{
    "sourceFile": "apps/load_balancer/src/load_balancer.erl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1639126536230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639126548832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n -author(\"alex\").\n \n -behaviour(application).\n \n--include_lib(\"../utils/include/servers.hrl\").\n+-include_lib(\"utils/include/servers.hrl\").\n \n %% Application callbacks\n -export([start/2,\n   stop/1]).\n"
                }
            ],
            "date": 1639126536230,
            "name": "Commit-0",
            "content": "%%%-------------------------------------------------------------------\n%%% @author alex\n%%% @copyright (C) 2021, <COMPANY>\n%%% @doc\n%%%\n%%% @end\n%%% Created : 27. Jul 2021 15:27\n%%%-------------------------------------------------------------------\n-module(load_balancer).\n-author(\"alex\").\n\n-behaviour(application).\n\n-include_lib(\"../utils/include/servers.hrl\").\n\n%% Application callbacks\n-export([start/2,\n  stop/1]).\n\n%%%===================================================================\n%%% Application callbacks\n%%%===================================================================\n\n%%--------------------------------------------------------------------\n%% @private\n%% @doc\n%% This function is called whenever an application is started using\n%% application:start/[1,2], and should start the processes of the\n%% application. If the application is structured according to the OTP\n%% design principles as a supervision tree, this means starting the\n%% top supervisor of the tree.\n%%\n%% @end\n%%--------------------------------------------------------------------\n-spec(start(StartType :: normal | {takeover, node()} | {failover, node()},\n    StartArgs :: term()) ->\n  {ok, pid()} |\n  {ok, pid(), State :: term()} |\n  {error, Reason :: term()}).\nstart(_StartType, _StartArgs) ->\n  application:ensure_all_started(udp_srv),\n  Servers = application:get_env(load_balancer, hosts, [{localhost, {0, 0, 0, 0}}]),\n  lists:foreach(\n    fun({ServerName, _IP}) ->\n      true = is_process_alive(whereis(ServerName))\n    end,\n    Servers),\n  Workers = case length(Servers) of\n              1 ->\n                [server1];\n\n              2 ->\n                app_supervisor:start_child(?WORKER1_SUP, load_balancer_srv, start_link, [?WORKER1_SRV, [server1], call]),\n                app_supervisor:start_child(?WORKER2_SUP, load_balancer_srv, start_link, [?WORKER2_SRV, [server2], call]),\n                [?WORKER1_SRV, ?WORKER2_SRV];\n\n              3 ->\n                app_supervisor:start_child(?WORKER1_SUP, load_balancer_srv, start_link, [?WORKER1_SRV, [server1, server2], call]),\n                app_supervisor:start_child(?WORKER2_SUP, load_balancer_srv, start_link, [?WORKER2_SRV, [server2, server3], call]),\n                app_supervisor:start_child(?WORKER3_SUP, load_balancer_srv, start_link, [?WORKER3_SRV, [server1, server3], call]),\n                [?WORKER1_SRV, ?WORKER2_SRV, ?WORKER3_SRV];\n\n              4 ->\n                app_supervisor:start_child(?WORKER1_SUP, load_balancer_srv, start_link, [?WORKER1_SRV, [server1, server2], call]),\n                app_supervisor:start_child(?WORKER2_SUP, load_balancer_srv, start_link, [?WORKER2_SRV, [server3, server4], call]),\n                app_supervisor:start_child(?WORKER3_SUP, load_balancer_srv, start_link, [?WORKER3_SRV, [server1, server3], call]),\n                app_supervisor:start_child(?WORKER4_SUP, load_balancer_srv, start_link, [?WORKER4_SRV, [server2, server4], call]),\n                app_supervisor:start_child(?WORKER5_SUP, load_balancer_srv, start_link, [?WORKER5_SRV, [server1, server4], call]),\n                app_supervisor:start_child(?WORKER6_SUP, load_balancer_srv, start_link, [?WORKER6_SRV, [server2, server3], call]),\n                [?WORKER1_SRV, ?WORKER2_SRV, ?WORKER3_SRV, ?WORKER4_SRV, ?WORKER5_SRV, ?WORKER6_SRV];\n\n              5 ->\n                app_supervisor:start_child(?WORKER1_SUP, load_balancer_srv, start_link, [?WORKER1_SRV, [server1, server3, server5], call]),\n                app_supervisor:start_child(?WORKER2_SUP, load_balancer_srv, start_link, [?WORKER2_SRV, [server2, server4], call]),\n                app_supervisor:start_child(?WORKER3_SUP, load_balancer_srv, start_link, [?WORKER3_SRV, [server1, server2, server4], call]),\n                app_supervisor:start_child(?WORKER4_SUP, load_balancer_srv, start_link, [?WORKER4_SRV, [server3, server5], call]),\n                app_supervisor:start_child(?WORKER5_SUP, load_balancer_srv, start_link, [?WORKER5_SRV, [server2, server3, server4], call]),\n                app_supervisor:start_child(?WORKER6_SUP, load_balancer_srv, start_link, [?WORKER6_SRV, [server1, server5], call]),\n                [?WORKER1_SRV, ?WORKER2_SRV, ?WORKER3_SRV, ?WORKER4_SRV, ?WORKER5_SRV, ?WORKER6_SRV];\n              _ ->\n                app_supervisor:start_child(?WORKER1_SUP, load_balancer_srv, start_link, [?WORKER1_SRV, [server1, server3, server5], call]),\n                app_supervisor:start_child(?WORKER2_SUP, load_balancer_srv, start_link, [?WORKER2_SRV, [server2, server4, server6], call]),\n                app_supervisor:start_child(?WORKER3_SUP, load_balancer_srv, start_link, [?WORKER3_SRV, [server1, server2, server4], call]),\n                app_supervisor:start_child(?WORKER4_SUP, load_balancer_srv, start_link, [?WORKER4_SRV, [server3, server5, server6], call]),\n                app_supervisor:start_child(?WORKER5_SUP, load_balancer_srv, start_link, [?WORKER5_SRV, [server2, server3, server4], call]),\n                app_supervisor:start_child(?WORKER6_SUP, load_balancer_srv, start_link, [?WORKER6_SRV, [server1, server5, server6], call]),\n                [?WORKER1_SRV, ?WORKER2_SRV, ?WORKER3_SRV, ?WORKER4_SRV, ?WORKER5_SRV, ?WORKER6_SRV]\n            end,\n  app_supervisor:start_child(?ROOT_LB_SUP, load_balancer_srv, start_link, [?ROOT_LB, Workers, call]),\n  lager:info(\"Load balancer started successfully with workers [~p] and severs [~p]\", [length(Workers), length(Servers)]),\n  {ok, self()}.\n\n%%--------------------------------------------------------------------\n%% @private\n%% @doc\n%% This function is called whenever an application has stopped. It\n%% is intended to be the opposite of Module:start/2 and should do\n%% any necessary cleaning up. The return value is ignored.\n%%\n%% @end\n%%--------------------------------------------------------------------\n-spec(stop(State :: term()) -> term()).\nstop(_State) ->\n  ok.\n\n%%%===================================================================\n%%% Internal functions\n%%%===================================================================\n"
        }
    ]
}