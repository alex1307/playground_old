{
    "sourceFile": "apps/message_collector/src/message_collector_srv.erl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1639131124728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1639131124728,
            "name": "Commit-0",
            "content": "%%%-------------------------------------------------------------------\n%%% @author alex\n%%% @copyright (C) 2021, <COMPANY>\n%%% @doc\n%%% @end\n%%%-------------------------------------------------------------------\n-module(message_collector_srv).\n\n-behaviour(gen_server).\n\n-export([\n  start_link/0,\n  start_link/1,\n  start_link/2]).\n-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2,\n  code_change/3]).\n\n-export([send_message/2,\n  get_last_message/1,\n  get_message/2,\n  get_message_count/1]).\n\n-define(SERVER, ?MODULE).\n\n-record(message_collector_srv_state, {\n  max_capacity :: integer(),\n  counter :: integer(),\n  seq::list(),\n  messages :: term()\n}).\n\n%%%===================================================================\n%%% Spawning and gen_server implementation\n%%%===================================================================\n\nstart_link() ->\n  start_link(?SERVER).\n\n\nstart_link(ServerName) ->\n  start_link(ServerName, 100000).\n\nstart_link(ServerName, MAX_CAPACITY) ->\n  gen_server:start_link({local, ServerName}, ?MODULE, [MAX_CAPACITY], []).\n\ninit([MAX_CAPACITY]) ->\n  {ok, #message_collector_srv_state{\n    max_capacity = MAX_CAPACITY -1,\n    counter = 0,\n    seq = lists:seq(0, MAX_CAPACITY-1),\n    messages = array:new(MAX_CAPACITY, {default, <<>>})\n  }}.\n\nhandle_call({collect, Msg}, _From, State = #message_collector_srv_state{\n  counter = Counter,\n  max_capacity = Max,\n  messages = Messages\n}) when Counter < Max ->\n  Next = Counter + 1,\n  Updated = array:set(Counter, Msg, Messages),\n  {reply, Next, State#message_collector_srv_state{messages = Updated, counter = Next}};\n\nhandle_call({collect, Msg}, _From, State = #message_collector_srv_state{\n  counter = Max,\n  max_capacity = Max,\n  messages = Messages\n})  ->\n  lager:info(\"Flushing: counter: ~p, length: ~p\", [Max, array:size(Messages)]),\n  flush(State#message_collector_srv_state{messages = array:set(Max, Msg, Messages)}),\n  {reply, 0, State#message_collector_srv_state{messages = array:new(Max + 1, {default, <<>>}), counter = 0}};\n\nhandle_call(flush, _From, State = #message_collector_srv_state{\n  max_capacity = Max,\n  messages = Messages\n})  ->\n  lager:info(\"Flushing: counter: ~p, length: ~p\", [Max, array:size(Messages)]),\n  flush(State),\n  {reply, 0, State#message_collector_srv_state{messages = array:new(Max + 1, {default, <<>>}), counter = 0}};\n\n\nhandle_call(current_state, _From, State)  ->\n  {reply, State, State};\n\nhandle_call(count, _From, State = #message_collector_srv_state{counter = Count})  ->\n  {reply, Count, State};\n\nhandle_call(last, _From, State = #message_collector_srv_state{counter = Count, messages = Messages})  ->\n  {reply, array:get(Count, Messages), State};\n\nhandle_call({get, Index}, _From, State = #message_collector_srv_state{messages = Messages})  ->\n  {reply, array:get(Index, Messages), State};\n\nhandle_call(_Request, _From, State = #message_collector_srv_state{}) ->\n  {reply, ok, State}.\n\nhandle_cast(_Request, State = #message_collector_srv_state{}) ->\n  {noreply, State}.\n\nhandle_info(_Info, State = #message_collector_srv_state{}) ->\n  {noreply, State}.\n\nterminate(_Reason, _State = #message_collector_srv_state{}) ->\n  ok.\n\ncode_change(_OldVsn, State = #message_collector_srv_state{}, _Extra) ->\n  {ok, State}.\n\n%%%===================================================================\n%%% Internal functions\n%%%===================================================================\n\n\nflush(_State = #message_collector_srv_state{messages = Messages})  ->\n    Cached = array:to_list(Messages),\n    scenarios:send_bulk_of_messages(worker1, Cached).\n\nsend_message(Server, Message) ->\n  gen_server:call(Server, {collect, Message}).\n\nget_message_count(Server) ->\n  gen_server:call(Server, count).\n\nget_last_message(Server) ->\n  gen_server:call(Server, last).\n\nget_message(Server, Index) ->\n  gen_server:call(Server, {get, Index})."
        }
    ]
}