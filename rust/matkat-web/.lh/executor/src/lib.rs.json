{
    "sourceFile": "executor/src/lib.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 640,
            "patches": [
                {
                    "date": 1642081699815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642081729661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,10 @@\n+\n+#[macro_use]\n+extern crate lazy_static;\n+\n+use std::collections::HashMap;\n+use std::sync::Mutex;\n lazy_static! {\n     static ref HASHMAP: Mutex<HashMap<u32, &'static str>> = {\n         let mut m = HashMap::new();\n         m.insert(0, \"foo\");\n"
                },
                {
                    "date": 1642082003328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,20 @@\n extern crate lazy_static;\n \n use std::collections::HashMap;\n use std::sync::Mutex;\n+\n lazy_static! {\n-    static ref HASHMAP: Mutex<HashMap<u32, &'static str>> = {\n+    static ref REGISTRY: Mutex<HashMap<String, &'static str>> = {\n         let mut m = HashMap::new();\n         m.insert(0, \"foo\");\n         m.insert(1, \"bar\");\n         m.insert(2, \"baz\");\n         Mutex::new(m)\n     };    \n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct CommandHandler {\n+    sender: crossbeam::channel::Sender<Vec<u8>>,\n+    receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642082057510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use std::collections::HashMap;\n use std::sync::Mutex;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<String, &'static str>> = {\n+    static ref REGISTRY: Mutex<HashMap<String, &'static CommandHandler>> = {\n         let mut m = HashMap::new();\n         m.insert(0, \"foo\");\n         m.insert(1, \"bar\");\n         m.insert(2, \"baz\");\n"
                },
                {
                    "date": 1642082067570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,9 @@\n \n lazy_static! {\n     static ref REGISTRY: Mutex<HashMap<String, &'static CommandHandler>> = {\n         let mut m = HashMap::new();\n-        m.insert(0, \"foo\");\n-        m.insert(1, \"bar\");\n-        m.insert(2, \"baz\");\n+        \n         Mutex::new(m)\n     };    \n }\n \n"
                },
                {
                    "date": 1642082077077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n \n lazy_static! {\n     static ref REGISTRY: Mutex<HashMap<String, &'static CommandHandler>> = {\n         let mut m = HashMap::new();\n-        \n         Mutex::new(m)\n     };    \n }\n \n"
                },
                {
                    "date": 1642082254690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,5 +15,40 @@\n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-}\n\\ No newline at end of file\n+}\n+\n+\n+pub async fn server_loop(max: i32) {\n+    println!(\"Server is started...\");\n+    let reciver = CURRENT_HANDLER.with(|f| f.receiver.clone());\n+    let mut message_counter = 0;\n+    let mut cycles = 0;\n+    loop {\n+        match reciver.recv_timeout(Duration::from_secs(1)) {\n+            Ok(buffer) => {\n+                message_counter += 1;\n+                info!(\n+                    \" => Message number #{}: {}\",\n+                    message_counter,\n+                    String::from_utf8_lossy(&buffer)\n+                );\n+                if message_counter < max {\n+                    continue;\n+                } else {\n+                    info!(\"!!! Threshold maximum messages reached: {}\", max);\n+                    break;\n+                }\n+            }\n+            Err(_) => {\n+                cycles += 1;\n+                if cycles < 5 {\n+                    continue;\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n"
                },
                {
                    "date": 1642082277428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n \n use std::collections::HashMap;\n use std::sync::Mutex;\n \n+use log::info;\n+\n lazy_static! {\n     static ref REGISTRY: Mutex<HashMap<String, &'static CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n"
                },
                {
                    "date": 1642082285928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n extern crate lazy_static;\n \n use std::collections::HashMap;\n use std::sync::Mutex;\n+use std::time::Duration;\n \n use log::info;\n \n lazy_static! {\n"
                },
                {
                    "date": 1642082329717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n use log::info;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<String, &'static CommandHandler>> = {\n+    static ref REGISTRY: Mutex<HashMap<&'static String, &'static >> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n }\n"
                },
                {
                    "date": 1642082362827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n use log::info;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<&'static String, &'static >> = {\n+    static ref REGISTRY: Mutex<HashMap<&'static String, &'static crossbeam::channel::Sender<Vec<u8>>>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n }\n"
                },
                {
                    "date": 1642082959057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n \n-pub async fn server_loop(max: i32) {\n+pub async fn server_loop(executor_name: String) {\n     println!(\"Server is started...\");\n     let reciver = CURRENT_HANDLER.with(|f| f.receiver.clone());\n     let mut message_counter = 0;\n     let mut cycles = 0;\n"
                },
                {
                    "date": 1642082969908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n \n pub async fn server_loop(executor_name: String) {\n     println!(\"Server is started...\");\n-    let reciver = CURRENT_HANDLER.with(|f| f.receiver.clone());\n+    let receiver = CURRENT_HANDLER.with(|f| f.receiver.clone());\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642083010107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n \n pub async fn server_loop(executor_name: String) {\n     println!(\"Server is started...\");\n-    let receiver = CURRENT_HANDLER.with(|f| f.receiver.clone());\n+    let receiver = REGISTRY.unwrap();\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642083018480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n \n pub async fn server_loop(executor_name: String) {\n     println!(\"Server is started...\");\n-    let receiver = REGISTRY.unwrap();\n+    let receiver = REGISTRY.lock().unwrap();\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642083050009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n \n pub async fn server_loop(executor_name: String) {\n     println!(\"Server is started...\");\n-    let receiver = REGISTRY.lock().unwrap();\n+    let receiver = REGISTRY.lock().unwrap().get(executor_name);\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642083059047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n use log::info;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<&'static String, &'static crossbeam::channel::Sender<Vec<u8>>>> = {\n+    static ref REGISTRY: Mutex<HashMap<&'static String, 'static crossbeam::channel::Sender<Vec<u8>>>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n }\n"
                },
                {
                    "date": 1642083081070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n use log::info;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<&'static String, 'static crossbeam::channel::Sender<Vec<u8>>>> = {\n+    static ref REGISTRY: Mutex<HashMap<String, crossbeam::channel::Sender<Vec<u8>>>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n }\n"
                },
                {
                    "date": 1642083089676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n \n pub async fn server_loop(executor_name: String) {\n     println!(\"Server is started...\");\n-    let receiver = REGISTRY.lock().unwrap().get(executor_name);\n+    let receiver = REGISTRY.lock().unwrap().get(&executor_name);\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642083160930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,12 @@\n \n \n pub async fn server_loop(executor_name: String) {\n     println!(\"Server is started...\");\n-    let receiver = REGISTRY.lock().unwrap().get(&executor_name);\n+    let executor = REGISTRY.lock().unwrap().get(&executor_name);\n+    let receiver = if executor.is_some() {\n+        executor.unwrap();\n+    };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642083962279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n use std::collections::HashMap;\n use std::sync::Mutex;\n use std::time::Duration;\n \n+use common_libs::error::AppResult;\n use log::info;\n \n lazy_static! {\n     static ref REGISTRY: Mutex<HashMap<String, crossbeam::channel::Sender<Vec<u8>>>> = {\n@@ -21,13 +22,15 @@\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n \n-pub async fn server_loop(executor_name: String) {\n+pub async fn server_loop(executor_name: String) -> AppResult {\n     println!(\"Server is started...\");\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n     let receiver = if executor.is_some() {\n         executor.unwrap();\n+    } else {\n+\n     };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n"
                },
                {
                    "date": 1642083971266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n \n-pub async fn server_loop(executor_name: String) -> AppResult {\n+pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n     let receiver = if executor.is_some() {\n         executor.unwrap();\n"
                },
                {
                    "date": 1642084003440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n use std::collections::HashMap;\n use std::sync::Mutex;\n use std::time::Duration;\n \n-use common_libs::error::AppResult;\n+use common_libs::error::{AppResult, AppError};\n use log::info;\n \n lazy_static! {\n     static ref REGISTRY: Mutex<HashMap<String, crossbeam::channel::Sender<Vec<u8>>>> = {\n@@ -28,9 +28,9 @@\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n     let receiver = if executor.is_some() {\n         executor.unwrap();\n     } else {\n-\n+        return AppError::from(\"executor.is.not.found\");\n     };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n"
                },
                {
                    "date": 1642084028174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,11 @@\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n     let receiver = if executor.is_some() {\n         executor.unwrap();\n     } else {\n-        return AppError::from(\"executor.is.not.found\");\n+        return AppError{\n+            message: \"executor.is.not.found\"\n+        }\n     };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n"
                },
                {
                    "date": 1642084034197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     let receiver = if executor.is_some() {\n         executor.unwrap();\n     } else {\n         return AppError{\n-            message: \"executor.is.not.found\"\n+            message: \"executor.is.not.found\".to_lowercase()\n         }\n     };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n"
                },
                {
                    "date": 1642084082026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,9 @@\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n     let receiver = if executor.is_some() {\n         executor.unwrap();\n     } else {\n-        return AppError{\n-            message: \"executor.is.not.found\".to_lowercase()\n-        }\n+        return Err(AppError::throw(\"executor.not.found\"))\n     };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n"
                },
                {
                    "date": 1642084096013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n     loop {\n-        match reciver.recv_timeout(Duration::from_secs(1)) {\n+        match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 message_counter += 1;\n                 info!(\n                     \" => Message number #{}: {}\",\n"
                },
                {
                    "date": 1642084114863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n     let receiver = if executor.is_some() {\n-        executor.unwrap();\n+        executor.unwrap()\n     } else {\n         return Err(AppError::throw(\"executor.not.found\"))\n     };\n     let mut message_counter = 0;\n"
                },
                {
                    "date": 1642084141648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n use common_libs::error::{AppResult, AppError};\n use log::info;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<String, crossbeam::channel::Sender<Vec<u8>>>> = {\n+    static ref REGISTRY: Mutex<HashMap<String, crossbeam::channel::Receiver<Vec<u8>>>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n }\n"
                },
                {
                    "date": 1642084167392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n use common_libs::error::{AppResult, AppError};\n use log::info;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<String, crossbeam::channel::Receiver<Vec<u8>>>> = {\n+    static ref REGISTRY: Mutex<HashMap<String, CommandHandler = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n }\n"
                },
                {
                    "date": 1642084172559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n use common_libs::error::{AppResult, AppError};\n use log::info;\n \n lazy_static! {\n-    static ref REGISTRY: Mutex<HashMap<String, CommandHandler = {\n+    static ref REGISTRY: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n }\n"
                },
                {
                    "date": 1642084183369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n-    let receiver = if executor.is_some() {\n+    let handler = if executor.is_some() {\n         executor.unwrap()\n     } else {\n         return Err(AppError::throw(\"executor.not.found\"))\n     };\n"
                },
                {
                    "date": 1642084200559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n         return Err(AppError::throw(\"executor.not.found\"))\n     };\n     let mut message_counter = 0;\n     let mut cycles = 0;\n+    let receiver = handler.receiver;\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 message_counter += 1;\n"
                },
                {
                    "date": 1642084216512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,6 +59,8 @@\n                 }\n             }\n         }\n     }\n+\n+    Ok(())\n }\n \n"
                },
                {
                    "date": 1642086364699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n \n+pub mod model;\n #[macro_use]\n extern crate lazy_static;\n \n use std::collections::HashMap;\n@@ -22,8 +23,9 @@\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n \n+\n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let executor = REGISTRY.lock().unwrap().get(&executor_name);\n     let handler = if executor.is_some() {\n"
                },
                {
                    "date": 1642140484720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n pub mod model;\n+\n #[macro_use]\n extern crate lazy_static;\n \n use std::collections::HashMap;\n@@ -14,8 +15,19 @@\n     static ref REGISTRY: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n+\n+    static ref CALLBACK: Mutex<HashMap<String, CommandHandler>> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };  \n+\n+    static ref FROM: Mutex<HashMap<String, Sring> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };\n+\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642140517198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n use common_libs::error::{AppResult, AppError};\n use log::info;\n \n lazy_static! {\n+    \n     static ref REGISTRY: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };    \n"
                },
                {
                    "date": 1642140569890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,22 +11,12 @@\n use common_libs::error::{AppResult, AppError};\n use log::info;\n \n lazy_static! {\n-    \n+\n     static ref REGISTRY: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n-    };    \n-\n-    static ref CALLBACK: Mutex<HashMap<String, CommandHandler>> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n-    };  \n-\n-    static ref FROM: Mutex<HashMap<String, Sring> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n     };\n \n }\n \n"
                },
                {
                    "date": 1642140588230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,17 @@\n     };\n \n }\n \n+lazy_static! {\n+\n+    static ref CALLBACK: Mutex<HashMap<String, CommandHandler>> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };\n+\n+}\n+\n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1642140606908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,17 @@\n     };\n \n }\n \n+lazy_static! {\n+\n+    static ref FROM: Mutex<HashMap<String, String>> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };\n+\n+}\n+\n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1642140664579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n use log::info;\n \n lazy_static! {\n \n-    static ref REGISTRY: Mutex<HashMap<String, CommandHandler>> = {\n+    static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };\n \n@@ -47,9 +47,9 @@\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let executor = REGISTRY.lock().unwrap().get(&executor_name);\n+    let executor = WORKERS.lock().unwrap().get(&executor_name);\n     let handler = if executor.is_some() {\n         executor.unwrap()\n     } else {\n         return Err(AppError::throw(\"executor.not.found\"))\n"
                },
                {
                    "date": 1642141071468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,14 @@\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n+pub fn start_worker<T: AsRef<str>>(name: T) -> AppResult<()> {\n+    let workers = WORKERS.lock().unwrap();\n \n+}\n \n+\n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let executor = WORKERS.lock().unwrap().get(&executor_name);\n     let handler = if executor.is_some() {\n"
                },
                {
                    "date": 1642141138286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,10 @@\n }\n \n pub fn start_worker<T: AsRef<str>>(name: T) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n+    let (tx, rx) = crossbeam::channel::unbounded();\n+    workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx })\n \n }\n \n \n"
                },
                {
                    "date": 1642141237861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,12 @@\n }\n \n pub fn start_worker<T: AsRef<str>>(name: T) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n+    if workers.contains_key(name) {\n+        let msg = format!(\"worker with name: {} already has been started.\", name);\n+        return Err(AppError::throw());\n+    }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx })\n \n }\n"
                },
                {
                    "date": 1642141244425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n pub fn start_worker<T: AsRef<str>>(name: T) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n     if workers.contains_key(name) {\n         let msg = format!(\"worker with name: {} already has been started.\", name);\n-        return Err(AppError::throw());\n+        return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx })\n \n"
                },
                {
                    "date": 1642141305271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx })\n-\n+    Ok(())\n }\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1642141326819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n-pub fn start_worker<T: AsRef<str>>(name: T) -> AppResult<()> {\n+pub fn start_worker(name: String) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n     if workers.contains_key(name) {\n         let msg = format!(\"worker with name: {} already has been started.\", name);\n         return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1642141355040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,14 @@\n }\n \n pub fn start_worker(name: String) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n-    if workers.contains_key(name) {\n+    if workers.contains_key(&name) {\n         let msg = format!(\"worker with name: {} already has been started.\", name);\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n-    workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx })\n+    workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx });\n     Ok(())\n }\n \n \n"
                },
                {
                    "date": 1642141408763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,17 +43,17 @@\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n-pub fn start_worker(name: String) -> AppResult<()> {\n+pub fn start_worker(worker_name: String) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n     if workers.contains_key(&name) {\n         let msg = format!(\"worker with name: {} already has been started.\", name);\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    Ok(())\n+    server_loop(worker_name)\n }\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1642141424411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    server_loop(worker_name)\n+    server_loop(worker_name)?\n }\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1642141444548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         let msg = format!(\"worker with name: {} already has been started.\", name);\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n-    workers.insert(name.clone(), CommandHandler { sender: tx, receiver: rx });\n+    workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n     server_loop(worker_name)?\n }\n \n \n"
                },
                {
                    "date": 1642141456120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,10 @@\n }\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n-    if workers.contains_key(&name) {\n-        let msg = format!(\"worker with name: {} already has been started.\", name);\n+    if workers.contains_key(&worker_name) {\n+        let msg = format!(\"worker with name: {} already has been started.\", worker_name);\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n"
                },
                {
                    "date": 1642141470399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    server_loop(worker_name)?\n+    server_loop(worker_name)\n }\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1642141483737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n-pub fn start_worker(worker_name: String) -> AppResult<()> {\n+pub async fn start_worker(worker_name: String) -> AppResult<()> {\n     let workers = WORKERS.lock().unwrap();\n     if workers.contains_key(&worker_name) {\n         let msg = format!(\"worker with name: {} already has been started.\", worker_name);\n         return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1642141513464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    server_loop(worker_name)\n+    server_loop(worker_name).await\n }\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1642141540117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n pub async fn start_worker(worker_name: String) -> AppResult<()> {\n-    let workers = WORKERS.lock().unwrap();\n+    let mut workers = WORKERS.lock().unwrap();\n     if workers.contains_key(&worker_name) {\n         let msg = format!(\"worker with name: {} already has been started.\", worker_name);\n         return Err(AppError::throw(&msg));\n     }\n"
                },
                {
                    "date": 1642141802170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n-pub async fn start_worker(worker_name: String) -> AppResult<()> {\n+pub fn start_worker(worker_name: String) -> AppResult<()> {\n     let mut workers = WORKERS.lock().unwrap();\n     if workers.contains_key(&worker_name) {\n         let msg = format!(\"worker with name: {} already has been started.\", worker_name);\n         return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1642141818243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    server_loop(worker_name).await\n+    Ok(())\n }\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1642141936654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n+    thread::spawn(move||server_loop(executor_name));\n     Ok(())\n }\n \n \n"
                },
                {
                    "date": 1642141955603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    thread::spawn(move||server_loop(executor_name));\n+    thread::spawn(move||server_loop(worker_name));\n     Ok(())\n }\n \n \n"
                },
                {
                    "date": 1642141968885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n #[macro_use]\n extern crate lazy_static;\n \n-use std::collections::HashMap;\n+use std::{collections::HashMap, thread};\n use std::sync::Mutex;\n use std::time::Duration;\n \n use common_libs::error::{AppResult, AppError};\n"
                },
                {
                    "date": 1642141988423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,10 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    thread::spawn(move||server_loop(worker_name));\n+    let handler = thread::spawn(move||server_loop(worker_name));\n+\n     Ok(())\n }\n \n \n"
                },
                {
                    "date": 1642141997062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n     let handler = thread::spawn(move||server_loop(worker_name));\n-\n+    handler.join();\n     Ok(())\n }\n \n \n"
                },
                {
                    "date": 1642142021372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,9 @@\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n     let handler = thread::spawn(move||server_loop(worker_name));\n     handler.join();\n+    info!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n \n"
                },
                {
                    "date": 1642142048825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,20 +72,12 @@\n     let receiver = handler.receiver;\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n-                message_counter += 1;\n-                info!(\n-                    \" => Message number #{}: {}\",\n-                    message_counter,\n-                    String::from_utf8_lossy(&buffer)\n-                );\n-                if message_counter < max {\n-                    continue;\n-                } else {\n+                \n                     info!(\"!!! Threshold maximum messages reached: {}\", max);\n                     break;\n-                }\n+                \n             }\n             Err(_) => {\n                 cycles += 1;\n                 if cycles < 5 {\n"
                },
                {
                    "date": 1642142074705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,19 +73,16 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 \n-                    info!(\"!!! Threshold maximum messages reached: {}\", max);\n+                    info!(\"!!! Job done....\");\n                     break;\n                 \n             }\n             Err(_) => {\n-                cycles += 1;\n-                if cycles < 5 {\n+                \n                     continue;\n-                } else {\n-                    break;\n-                }\n+                \n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1642142084613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,9 @@\n         executor.unwrap()\n     } else {\n         return Err(AppError::throw(\"executor.not.found\"))\n     };\n-    let mut message_counter = 0;\n-    let mut cycles = 0;\n+\n     let receiver = handler.receiver;\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n"
                },
                {
                    "date": 1642142257898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let executor = WORKERS.lock().unwrap().get(&executor_name);\n+    let executor = WORKERS.unwrap().get(&executor_name);\n     let handler = if executor.is_some() {\n         executor.unwrap()\n     } else {\n         return Err(AppError::throw(\"executor.not.found\"))\n"
                },
                {
                    "date": 1642142270335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let executor = WORKERS.unwrap().get(&executor_name);\n+    let executor = WORKERS.lock().unwrap().get(&executor_name);\n     let handler = if executor.is_some() {\n         executor.unwrap()\n     } else {\n         return Err(AppError::throw(\"executor.not.found\"))\n"
                },
                {
                    "date": 1642142282859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n \n pub async fn server_loop(executor_name: String) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let executor = WORKERS.lock().unwrap().get(&executor_name);\n+    let executor = WORKERS().unwrap().get(&executor_name);\n     let handler = if executor.is_some() {\n         executor.unwrap()\n     } else {\n         return Err(AppError::throw(\"executor.not.found\"))\n"
                },
                {
                    "date": 1642142411844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,18 +58,11 @@\n     Ok(())\n }\n \n \n-pub async fn server_loop(executor_name: String) -> AppResult<()> {\n+pub async fn server_loop(receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let executor = WORKERS().unwrap().get(&executor_name);\n-    let handler = if executor.is_some() {\n-        executor.unwrap()\n-    } else {\n-        return Err(AppError::throw(\"executor.not.found\"))\n-    };\n-\n-    let receiver = handler.receiver;\n+    \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 \n"
                },
                {
                    "date": 1642142433493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n-    let handler = thread::spawn(move||server_loop(worker_name));\n+    let handler = thread::spawn(move||server_loop(rx));\n     handler.join();\n     info!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n"
                },
                {
                    "date": 1642142496946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     println!(\"Server is started...\");\n     \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(buffer) => {\n+            Ok(_buffer) => {\n                 \n                     info!(\"!!! Job done....\");\n                     break;\n                 \n"
                },
                {
                    "date": 1642142521312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,8 @@\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n-    receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n     let mut workers = WORKERS.lock().unwrap();\n"
                },
                {
                    "date": 1642142535137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         let msg = format!(\"worker with name: {} already has been started.\", worker_name);\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n-    workers.insert(worker_name.clone(), CommandHandler { sender: tx, receiver: rx });\n+    workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n     let handler = thread::spawn(move||server_loop(rx));\n     handler.join();\n     info!(\"worker {} has been started.\", worker_name);\n     Ok(())\n"
                },
                {
                    "date": 1642142738952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let handler = thread::spawn(move||server_loop(rx));\n-    handler.join();\n+    let handler = thread::spawn(move||server_loop(rx));    \n     info!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642142747023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let handler = thread::spawn(move||server_loop(rx));    \n+    let _handler = thread::spawn(move||server_loop(rx));    \n     info!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642142840660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,4 +78,9 @@\n \n     Ok(())\n }\n \n+#[test]\n+fn start_server_test() {\n+    start_worker(\"alex_is_working\");\n+    assert!(true);\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642142851026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,7 +80,7 @@\n }\n \n #[test]\n fn start_server_test() {\n-    start_worker(\"alex_is_working\");\n+    start_worker(\"alex_is_working\".to_string());\n     assert!(true);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642142860584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,7 +80,7 @@\n }\n \n #[test]\n fn start_server_test() {\n-    start_worker(\"alex_is_working\".to_string());\n+    let _ok = start_worker(\"alex_is_working\".to_string());\n     assert!(true);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642142881293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \n #[macro_use]\n extern crate lazy_static;\n \n+use std::thread::sleep;\n use std::{collections::HashMap, thread};\n use std::sync::Mutex;\n use std::time::Duration;\n \n@@ -81,6 +82,7 @@\n \n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n+    sleep(Duration::from_secs(3));\n     assert!(true);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642142948135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,6 @@\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n     sleep(Duration::from_secs(3));\n     assert!(true);\n+    assert_eq!(1, WORKERS.lock().unwrap().len())\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642142983379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n     let _handler = thread::spawn(move||server_loop(rx));    \n-    info!(\"worker {} has been started.\", worker_name);\n+    println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n \n@@ -84,6 +84,6 @@\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n     sleep(Duration::from_secs(3));\n     assert!(true);\n-    assert_eq!(1, WORKERS.lock().unwrap().len())\n+    assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642143006761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move||server_loop(rx));    \n+    let _handler = thread::spawn(async move||server_loop(rx));    \n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642143011984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(async move||server_loop(rx));    \n+    let _handler = thread::spawn(move||server_loop(rx));    \n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642143021259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     Ok(())\n }\n \n \n-pub async fn server_loop(receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn server_loop(receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n     \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642143054681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n                     break;\n                 \n             }\n             Err(_) => {\n-                \n+                    println!(\"Hello from the server.....\");\n                     continue;\n                 \n             }\n         }\n"
                },
                {
                    "date": 1642143524642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n \n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n+    WORKERS.lock().unwrap().get(\"alex_is_working\");\n     sleep(Duration::from_secs(3));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642143538152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n-    WORKERS.lock().unwrap().get(\"alex_is_working\");\n+    let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap();\n     sleep(Duration::from_secs(3));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642143599663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,10 @@\n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n     let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap();\n-    sleep(Duration::from_secs(3));\n+    sleep(Duration::from_secs(1));\n+    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes());\n+    sleep(Duration::from_secs(2));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642143614844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n     let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap();\n     sleep(Duration::from_secs(1));\n-    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes());\n+    cmd_handler.sender.try_send(Vec::from(\"xxxxxx\".as_bytes()));\n     sleep(Duration::from_secs(2));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642145135870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n     let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap();\n     sleep(Duration::from_secs(1));\n-    cmd_handler.sender.try_send(Vec::from(\"xxxxxx\".as_bytes()));\n+    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642145192540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n-    let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap();\n+    let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap().clone();\n     sleep(Duration::from_secs(1));\n     cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n     assert!(true);\n"
                },
                {
                    "date": 1642145220672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(_buffer) => {\n                 \n-                    info!(\"!!! Job done....\");\n+                    println!(\"!!! Job done....\");\n                     break;\n                 \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642527333675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,13 @@\n use std::sync::Mutex;\n use std::time::Duration;\n \n use common_libs::error::{AppResult, AppError};\n+use common_libs::utils::from_binary;\n use log::info;\n \n+use crate::model::Command;\n+\n lazy_static! {\n \n     static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n@@ -62,11 +65,11 @@\n     println!(\"Server is started...\");\n     \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(_buffer) => {\n+            Ok(buffer) => {\n                 \n-                    println!(\"!!! Job done....\");\n+                    from_binary<Command>(buffer)\n                     break;\n                 \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642527345141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 \n-                    from_binary<Command>(buffer)\n+                    let command = from_binary<Command>(buffer)\n                     break;\n                 \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642527350299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 \n-                    let command = from_binary<Command>(buffer)\n+                    let command = from_binary::<Command>(buffer)\n                     break;\n                 \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642528936787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,12 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 \n-                    let command = from_binary::<Command>(buffer)\n+                    let command = match from_binary::<Command>(buffer){\n+                        Ok(_) => todo!(),\n+                        Err(_) => todo!(),\n+                    }\n                     break;\n                 \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642528963754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,11 +68,11 @@\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 \n                     let command = match from_binary::<Command>(buffer){\n-                        Ok(_) => todo!(),\n+                        Ok(command) => command,\n                         Err(_) => todo!(),\n-                    }\n+                    };\n                     break;\n                 \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642529029772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,15 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 \n-                    let command = match from_binary::<Command>(buffer){\n-                        Ok(command) => command,\n-                        Err(_) => todo!(),\n+                    let message = match from_binary::<Message>(buffer){\n+                        Ok(cmd) => cmd,\n+                        Err(_) => continue\n                     };\n+\n+                    if command.\n+\n                     break;\n                 \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642529047909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n                         Ok(cmd) => cmd,\n                         Err(_) => continue\n                     };\n \n-                    if command.\n+                    if message.c\n \n                     break;\n                 \n             }\n"
                },
                {
                    "date": 1642529060617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n                         Ok(cmd) => cmd,\n                         Err(_) => continue\n                     };\n \n-                    if message.c\n+                    \n \n                     break;\n                 \n             }\n"
                },
                {
                    "date": 1642529081348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n use common_libs::error::{AppResult, AppError};\n use common_libs::utils::from_binary;\n use log::info;\n \n-use crate::model::Command;\n+use crate::model::{Command, Message};\n \n lazy_static! {\n \n     static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n"
                },
                {
                    "date": 1642529145082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,18 @@\n                         Ok(cmd) => cmd,\n                         Err(_) => continue\n                     };\n \n+                    match message.command {\n+                        Command::Stop => break,\n+                        Command::Ping => todo!(),\n+                        Command::Status => todo!(),\n+                        Command::Execute => todo!(),\n+                        Command::Pause => todo!(),\n+                        Command::Undefined => continue,\n+                    }\n+\n                     \n-\n-                    break;\n                 \n             }\n             Err(_) => {\n                     println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1642529184993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,11 +80,8 @@\n                         Command::Execute => todo!(),\n                         Command::Pause => todo!(),\n                         Command::Undefined => continue,\n                     }\n-\n-                    \n-                \n             }\n             Err(_) => {\n                     println!(\"Hello from the server.....\");\n                     continue;\n"
                },
                {
                    "date": 1642529507343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,15 @@\n \n     Ok(())\n }\n \n+fn pong(from: String) {\n+    let handler =  match CALLBACK.lock().unwrap().get(from) {\n+        Some(handler) => handler,\n+        None => error!(),\n+    }\n+}\n+\n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n     let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap().clone();\n"
                },
                {
                    "date": 1642529518379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     Ok(())\n }\n \n fn pong(from: String) {\n-    let handler =  match CALLBACK.lock().unwrap().get(from) {\n+    let handler =  match CALLBACK.lock().unwrap().get(&from) {\n         Some(handler) => handler,\n         None => error!(),\n     }\n }\n"
                },
                {
                    "date": 1642529542269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n use std::{collections::HashMap, thread};\n use std::sync::Mutex;\n use std::time::Duration;\n \n-use common_libs::error::{AppResult, AppError};\n+use common_libs::error::{AppResult, AppError, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::info;\n \n use crate::model::{Command, Message};\n@@ -92,9 +92,9 @@\n \n     Ok(())\n }\n \n-fn pong(from: String) {\n+fn pong(from: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&from) {\n         Some(handler) => handler,\n         None => error!(),\n     }\n"
                },
                {
                    "date": 1642529591781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,12 @@\n \n fn pong(from: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&from) {\n         Some(handler) => handler,\n-        None => error!(),\n+        None => {return Err(RuntimeError{\n+            error_type: common_libs::error::RuntimeErrorType::NotFound,\n+            message: \n+        });\n     }\n }\n \n #[test]\n"
                },
                {
                    "date": 1642529610895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,12 +95,14 @@\n \n fn pong(from: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&from) {\n         Some(handler) => handler,\n-        None => {return Err(RuntimeError{\n-            error_type: common_libs::error::RuntimeErrorType::NotFound,\n-            message: \n-        });\n+        None => {\n+            return Err(RuntimeError{\n+                error_type: common_libs::error::RuntimeErrorType::NotFound,\n+                message: \n+            });\n+        }\n     }\n }\n \n #[test]\n"
                },
                {
                    "date": 1642529620967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n         Some(handler) => handler,\n         None => {\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n-                message: \n+                message: \"\".to_string()\n             });\n         }\n     }\n }\n"
                },
                {
                    "date": 1642529668370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n fn pong(from: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&from) {\n         Some(handler) => handler,\n         None => {\n+            let msg = format!(\"Pong command failed. {} not found.\", from);\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: \"\".to_string()\n             });\n"
                },
                {
                    "date": 1642529677447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", from);\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n-                message: \"\".to_string()\n+                message: msg\n             });\n         }\n     }\n }\n"
                },
                {
                    "date": 1642529697464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,11 @@\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg\n             });\n-        }\n+        };\n+\n+        Ok(())\n     }\n }\n \n #[test]\n"
                },
                {
                    "date": 1642529708507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,11 +102,11 @@\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg\n             });\n         };\n+    }\n \n         Ok(())\n-    }\n }\n \n #[test]\n fn start_server_test() {\n"
                },
                {
                    "date": 1642529716420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,12 +101,12 @@\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg\n             });\n-        };\n-    }\n+        }\n+    };\n \n-        Ok(())\n+    Ok(())\n }\n \n #[test]\n fn start_server_test() {\n"
                },
                {
                    "date": 1642529832168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,16 @@\n                 message: msg\n             });\n         }\n     };\n+    let pong = Message{\n+        from,\n+        ack: false,\n+        command: Command::Undefined,\n+        payload: todo!(),\n+        command_id: todo!(),\n+    }\n+    handler.sender.try_send(msg)\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642529854059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     let pong = Message{\n         from,\n         ack: false,\n         command: Command::Undefined,\n-        payload: todo!(),\n+        payload: String::from(\"pong\"),\n         command_id: todo!(),\n     }\n     handler.sender.try_send(msg)\n \n"
                },
                {
                    "date": 1642529868368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,10 +108,10 @@\n         from,\n         ack: false,\n         command: Command::Undefined,\n         payload: String::from(\"pong\"),\n-        command_id: todo!(),\n-    }\n+        command_id: String::default(),\n+    };\n     handler.sender.try_send(msg)\n \n     Ok(())\n }\n"
                },
                {
                    "date": 1642529882030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     let pong = Message{\n         from,\n         ack: false,\n         command: Command::Undefined,\n-        payload: String::from(\"pong\"),\n+        payload: String::new(\"pong\"),\n         command_id: String::default(),\n     };\n     handler.sender.try_send(msg)\n \n"
                },
                {
                    "date": 1642529902913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     let pong = Message{\n         from,\n         ack: false,\n         command: Command::Undefined,\n-        payload: String::new(\"pong\"),\n+        payload: String::from_utf8(\"pong\")\n         command_id: String::default(),\n     };\n     handler.sender.try_send(msg)\n \n"
                },
                {
                    "date": 1642529915375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     let pong = Message{\n         from,\n         ack: false,\n         command: Command::Undefined,\n-        payload: String::from_utf8(\"pong\")\n+        payload: String::from_utf8(\"pong\").unwrap(),\n         command_id: String::default(),\n     };\n     handler.sender.try_send(msg)\n \n"
                },
                {
                    "date": 1642529939693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     let pong = Message{\n         from,\n         ack: false,\n         command: Command::Undefined,\n-        payload: String::from_utf8(\"pong\").unwrap(),\n+        payload: \"pong\".to_string(),\n         command_id: String::default(),\n     };\n     handler.sender.try_send(msg)\n \n"
                },
                {
                    "date": 1642529963184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     let pong = Message{\n         from,\n         ack: false,\n         command: Command::Undefined,\n-        payload: \"pong\".to_string(),\n+        payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     handler.sender.try_send(msg)\n \n"
                },
                {
                    "date": 1642689234718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,13 +92,13 @@\n \n     Ok(())\n }\n \n-fn pong(from: String) -> RuntimeResult<()> {\n-    let handler =  match CALLBACK.lock().unwrap().get(&from) {\n+fn pong(from: String, to: String) -> RuntimeResult<()> {\n+    let handler =  match CALLBACK.lock().unwrap().get(&to) {\n         Some(handler) => handler,\n         None => {\n-            let msg = format!(\"Pong command failed. {} not found.\", from);\n+            let msg = format!(\"Pong command failed. {} not found.\", to);\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg\n             });\n@@ -110,10 +110,11 @@\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n-    handler.sender.try_send(msg)\n \n+    handler.sender.try_send(serde_json::)\n+\n     Ok(())\n }\n \n #[test]\n"
                },
                {
                    "date": 1642689381983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,11 +110,11 @@\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n+    let json = serde_json::to_string(&pong).unwrap();\n+    handler.sender.try_send(serde_json::to_string(&pong))\n \n-    handler.sender.try_send(serde_json::)\n-\n     Ok(())\n }\n \n #[test]\n"
                },
                {
                    "date": 1642689393756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(serde_json::to_string(&pong))\n+    handler.sender.try_send(serde_json::to_string(json.as_bytes().to_vec()))\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689403057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(serde_json::to_string(json.as_bytes().to_vec()))\n+    handler.sender.try_send(json.as_bytes().to_vec())\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689412675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(json.as_bytes().to_vec())\n+    handler.sender.try_send(json.as_bytes().to_vec())?;\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689419033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(json.as_bytes().to_vec())?;\n+    Ok(handler.sender.try_send(json.as_bytes().to_vec())?);\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689431104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    Ok(handler.sender.try_send(json.as_bytes().to_vec())?);\n+    let _ = handler.sender.try_send(json.as_bytes().to_vec())?;\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689462198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    let _ = handler.sender.try_send(json.as_bytes().to_vec())?;\n+    let _ = handler.sender.try_send(json.as_bytes().to_vec());\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689472314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    let _ = handler.sender.try_send(json.as_bytes().to_vec());\n+    handler.sender.try_send(json.as_bytes().to_vec());\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689482716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(json.as_bytes().to_vec());\n+    handler.sender.try_send(&json.as_bytes().to_vec());\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689488372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(&json.as_bytes().to_vec());\n+    handler.sender.try_send(json.as_bytes().to_vec());\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689505379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(json.as_bytes().to_vec());\n+    handler.sender.try_send(json.clone().as_bytes().to_vec());\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689526770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,10 @@\n \n     Ok(())\n }\n \n-fn pong(from: String, to: String) -> RuntimeResult<()> {\n-    let handler =  match CALLBACK.lock().unwrap().get(&to) {\n+fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n+    let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler,\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", to);\n             return Err(RuntimeError{\n"
                },
                {
                    "date": 1642689545000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler,\n         None => {\n-            let msg = format!(\"Pong command failed. {} not found.\", to);\n+            let msg = format!(\"Pong command failed. {} not found.\", receiver);\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg\n             });\n"
                },
                {
                    "date": 1642689610131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n-        Some(handler) => handler,\n+        Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n"
                },
                {
                    "date": 1642689626882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n-    handler.sender.try_send(json.clone().as_bytes().to_vec());\n+    let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n \n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642689657088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n \n     Ok(())\n }\n \n-fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n+fn pong(from: &str, receiver: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n"
                },
                {
                    "date": 1642689668626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n             });\n         }\n     };\n     let pong = Message{\n-        from,\n+        from.to_string(),\n         ack: false,\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n"
                },
                {
                    "date": 1642689705994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n \n     Ok(())\n }\n \n-fn pong(from: &str, receiver: String) -> RuntimeResult<()> {\n+fn pongT: AsRef<str>(from: &str, receiver: String) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n@@ -104,9 +104,9 @@\n             });\n         }\n     };\n     let pong = Message{\n-        from.to_string(),\n+        from: from.to_string(),\n         ack: false,\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n"
                },
                {
                    "date": 1642689714784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n \n     Ok(())\n }\n \n-fn pongT: AsRef<str>(from: &str, receiver: String) -> RuntimeResult<()> {\n+fn pong<T: AsRef<str>(from: T, receiver: T) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n"
                },
                {
                    "date": 1642689734294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n \n     Ok(())\n }\n \n-fn pong<T: AsRef<str>(from: T, receiver: T) -> RuntimeResult<()> {\n+fn pong<T: AsRef<str>>(from: T, receiver: T) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n"
                },
                {
                    "date": 1642689746210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     Ok(())\n }\n \n fn pong<T: AsRef<str>>(from: T, receiver: T) -> RuntimeResult<()> {\n-    let handler =  match CALLBACK.lock().unwrap().get(&receiver) {\n+    let handler =  match CALLBACK.lock().unwrap().get(receiver.as_ref()) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n             return Err(RuntimeError{\n"
                },
                {
                    "date": 1642689751976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n fn pong<T: AsRef<str>>(from: T, receiver: T) -> RuntimeResult<()> {\n     let handler =  match CALLBACK.lock().unwrap().get(receiver.as_ref()) {\n         Some(handler) => handler.clone(),\n         None => {\n-            let msg = format!(\"Pong command failed. {} not found.\", receiver);\n+            let msg = format!(\"Pong command failed. {} not found.\", receiver.as_ref());\n             return Err(RuntimeError{\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg\n             });\n"
                },
                {
                    "date": 1642689759200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n             });\n         }\n     };\n     let pong = Message{\n-        from: from.to_string(),\n+        from: from.as_ref().to_string(),\n         ack: false,\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n"
                },
                {
                    "date": 1642689782746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,39 @@\n-\n pub mod model;\n \n #[macro_use]\n extern crate lazy_static;\n \n+use std::sync::Mutex;\n use std::thread::sleep;\n+use std::time::Duration;\n use std::{collections::HashMap, thread};\n-use std::sync::Mutex;\n-use std::time::Duration;\n \n-use common_libs::error::{AppResult, AppError, RuntimeError, RuntimeResult};\n+use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::info;\n \n use crate::model::{Command, Message};\n \n lazy_static! {\n-\n     static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };\n-\n }\n \n lazy_static! {\n-\n     static ref CALLBACK: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };\n-\n }\n \n lazy_static! {\n-\n     static ref FROM: Mutex<HashMap<String, String>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };\n-\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n@@ -49,63 +42,63 @@\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n     let mut workers = WORKERS.lock().unwrap();\n     if workers.contains_key(&worker_name) {\n-        let msg = format!(\"worker with name: {} already has been started.\", worker_name);\n+        let msg = format!(\n+            \"worker with name: {} already has been started.\",\n+            worker_name\n+        );\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move||server_loop(rx));    \n+    let _handler = thread::spawn(move || server_loop(rx));\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n-\n pub fn server_loop(receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    \n+\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n-                \n-                    let message = match from_binary::<Message>(buffer){\n-                        Ok(cmd) => cmd,\n-                        Err(_) => continue\n-                    };\n+                let message = match from_binary::<Message>(buffer) {\n+                    Ok(cmd) => cmd,\n+                    Err(_) => continue,\n+                };\n \n-                    match message.command {\n-                        Command::Stop => break,\n-                        Command::Ping => todo!(),\n-                        Command::Status => todo!(),\n-                        Command::Execute => todo!(),\n-                        Command::Pause => todo!(),\n-                        Command::Undefined => continue,\n-                    }\n+                match message.command {\n+                    Command::Stop => break,\n+                    Command::Ping => todo!(),\n+                    Command::Status => todo!(),\n+                    Command::Execute => todo!(),\n+                    Command::Pause => todo!(),\n+                    Command::Undefined => continue,\n+                }\n             }\n             Err(_) => {\n-                    println!(\"Hello from the server.....\");\n-                    continue;\n-                \n+                println!(\"Hello from the server.....\");\n+                continue;\n             }\n         }\n     }\n \n     Ok(())\n }\n \n fn pong<T: AsRef<str>>(from: T, receiver: T) -> RuntimeResult<()> {\n-    let handler =  match CALLBACK.lock().unwrap().get(receiver.as_ref()) {\n+    let handler = match CALLBACK.lock().unwrap().get(receiver.as_ref()) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver.as_ref());\n-            return Err(RuntimeError{\n+            return Err(RuntimeError {\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n-                message: msg\n+                message: msg,\n             });\n         }\n     };\n-    let pong = Message{\n+    let pong = Message {\n         from: from.as_ref().to_string(),\n         ack: false,\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n@@ -119,11 +112,16 @@\n \n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n-    let cmd_handler = WORKERS.lock().unwrap().get(\"alex_is_working\").unwrap().clone();\n+    let cmd_handler = WORKERS\n+        .lock()\n+        .unwrap()\n+        .get(\"alex_is_working\")\n+        .unwrap()\n+        .clone();\n\\ No newline at end of file\n     sleep(Duration::from_secs(1));\n     cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n-}\n+}\n"
                },
                {
                    "date": 1642689831610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n-pub fn server_loop(receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn server_loop<T: AsRef<str>>(registered_name: receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n@@ -123,5 +123,5 @@\n     cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1642689837452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n-pub fn server_loop<T: AsRef<str>>(registered_name: receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn server_loop<T: AsRef<str>>(registered_name: T, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642689871297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => todo!(),\n+                    Command::Ping => pong(registered_name.as_ref(), message.from),\n                     Command::Status => todo!(),\n                     Command::Execute => todo!(),\n                     Command::Pause => todo!(),\n                     Command::Undefined => continue,\n"
                },
                {
                    "date": 1642689887380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name.as_ref(), message.from),\n+                    Command::Ping => pong(registered_name.as_ref(), &message.from),\n                     Command::Status => todo!(),\n                     Command::Execute => todo!(),\n                     Command::Pause => todo!(),\n                     Command::Undefined => continue,\n"
                },
                {
                    "date": 1642689894965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n-pub fn server_loop<T: AsRef<str>>(registered_name: T, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn server_loop<T: AsRef<str>>(registered_name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n@@ -68,9 +68,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name.as_ref(), &message.from),\n+                    Command::Ping => pong(registered_name.as_ref(), message.from),\n                     Command::Status => todo!(),\n                     Command::Execute => todo!(),\n                     Command::Pause => todo!(),\n                     Command::Undefined => continue,\n"
                },
                {
                    "date": 1642689900205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n-pub fn server_loop<T: AsRef<str>>(registered_name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn server_loop (registered_name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642689906207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name.as_ref(), message.from),\n+                    Command::Ping => pong(registered_name, message.from),\n                     Command::Status => todo!(),\n                     Command::Execute => todo!(),\n                     Command::Pause => todo!(),\n                     Command::Undefined => continue,\n"
                },
                {
                    "date": 1642689953493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n                     Command::Status => todo!(),\n                     Command::Execute => todo!(),\n                     Command::Pause => todo!(),\n                     Command::Undefined => continue,\n-                }\n+                };\n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n                 continue;\n"
                },
                {
                    "date": 1642689960528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n                     Command::Status => todo!(),\n                     Command::Execute => todo!(),\n                     Command::Pause => todo!(),\n                     Command::Undefined => continue,\n-                };\n+                }\n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n                 continue;\n"
                },
                {
                    "date": 1642689989170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(rx));\n+    let _handler = thread::spawn(move || server_loop(\"task_executor_1\".to_string(),rx));\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642690065383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,12 +69,9 @@\n \n                 match message.command {\n                     Command::Stop => break,\n                     Command::Ping => pong(registered_name, message.from),\n-                    Command::Status => todo!(),\n-                    Command::Execute => todo!(),\n-                    Command::Pause => todo!(),\n-                    Command::Undefined => continue,\n+                   _ => continue,\n                 }\n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1642690094143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name, message.from),\n+                    Command::Ping => pong(registered_name, message.from).unwrap(),\n                    _ => continue,\n                 }\n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642690108916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name, message.from).unwrap(),\n+                    Command::Ping => pong(registered_name.clone(), message.from).unwrap(),\n                    _ => continue,\n                 }\n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642694365440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,4 +121,9 @@\n     sleep(Duration::from_secs(2));\n     assert!(true);\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n+\n+#[test]\n+fn ping_pong_test {\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694547600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,7 +123,8 @@\n     assert_eq!(1, WORKERS.lock().unwrap().len());\n }\n \n #[test]\n-fn ping_pong_test {\n-\n+fn ping_pong_test() {\n+    let (client_tx, client_rx) = crossbeam::channel::unbounded();\n+    let mut callbacks = CALLBACK.lock().unwrap();\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694594195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,5 +126,6 @@\n #[test]\n fn ping_pong_test() {\n     let (client_tx, client_rx) = crossbeam::channel::unbounded();\n     let mut callbacks = CALLBACK.lock().unwrap();\n+    callbacks.insert(worker_name.clone(), CommandHandler { sender: client_tx });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694603854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,6 +126,6 @@\n #[test]\n fn ping_pong_test() {\n     let (client_tx, client_rx) = crossbeam::channel::unbounded();\n     let mut callbacks = CALLBACK.lock().unwrap();\n-    callbacks.insert(worker_name.clone(), CommandHandler { sender: client_tx });\n+    callbacks.insert(\"the_client\".clone(), CommandHandler { sender: client_tx });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694637154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,6 +126,6 @@\n #[test]\n fn ping_pong_test() {\n     let (client_tx, client_rx) = crossbeam::channel::unbounded();\n     let mut callbacks = CALLBACK.lock().unwrap();\n-    callbacks.insert(\"the_client\".clone(), CommandHandler { sender: client_tx });\n+    callbacks.insert(\"the_client\".to_string(), CommandHandler { sender: client_tx });\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694762962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,18 @@\n }\n \n #[test]\n fn ping_pong_test() {\n+    let _ok = start_worker(\"the_server\".to_string());\n     let (client_tx, client_rx) = crossbeam::channel::unbounded();\n     let mut callbacks = CALLBACK.lock().unwrap();\n     callbacks.insert(\"the_client\".to_string(), CommandHandler { sender: client_tx });\n+    let cmd_handler = WORKERS\n+        .lock()\n+        .unwrap()\n+        .get(\"alex_is_working\")\n+        .unwrap()\n+        .clone();\n+    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n+    sleep(Duration::from_secs(2));\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694772057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n     callbacks.insert(\"the_client\".to_string(), CommandHandler { sender: client_tx });\n     let cmd_handler = WORKERS\n         .lock()\n         .unwrap()\n-        .get(\"alex_is_working\")\n+        .get(\"the_server\")\n         .unwrap()\n         .clone();\n     cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n"
                },
                {
                    "date": 1642694805744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,8 +134,9 @@\n         .unwrap()\n         .get(\"the_server\")\n         .unwrap()\n         .clone();\n-    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n+\n+    let _ = cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694866625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,16 @@\n         .unwrap()\n         .get(\"the_server\")\n         .unwrap()\n         .clone();\n-\n+    let message = Message{\n+        command: Command::Ping,\n+        from: \"the_client\".to_string(),\n+        payload:vec![],\n+        ack: false,\n+        command_id: \"1\".to_string(),\n+        \n+    }\n     let _ = cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694888228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,11 +139,11 @@\n         command: Command::Ping,\n         from: \"the_client\".to_string(),\n         payload:vec![],\n         ack: false,\n-        command_id: \"1\".to_string(),\n-        \n-    }\n+        command_id: \"1\".to_string(),    \n+    };\n+\n     let _ = cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694934781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,16 +134,16 @@\n         .unwrap()\n         .get(\"the_server\")\n         .unwrap()\n         .clone();\n-    let message = Message{\n+    let ping = Message{\n         command: Command::Ping,\n         from: \"the_client\".to_string(),\n         payload:vec![],\n         ack: false,\n         command_id: \"1\".to_string(),    \n     };\n-\n+    let binary =  serde_json::to_string(&ping).unwrap();\n     let _ = cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694947642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         payload:vec![],\n         ack: false,\n         command_id: \"1\".to_string(),    \n     };\n-    let binary =  serde_json::to_string(&ping).unwrap();\n-    let _ = cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n+    let json =  serde_json::to_string(&ping).unwrap();\n+    let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642694964349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,7 +143,8 @@\n         command_id: \"1\".to_string(),    \n     };\n     let json =  serde_json::to_string(&ping).unwrap();\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+    \n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642695015896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,7 +144,28 @@\n     };\n     let json =  serde_json::to_string(&ping).unwrap();\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     \n+    loop {\n+        match client_rx.recv_timeout(Duration::from_secs(1)) {\n+            Ok(buffer) => {\n+                let message = match from_binary::<Message>(buffer) {\n+                    Ok(cmd) => cmd,\n+                    Err(_) => continue,\n+                };\n+\n+                match message.command {\n+                    Command::Stop => break,\n+                    Command::Ping => pong(registered_name.clone(), message.from).unwrap(),\n+                   _ => continue,\n+                }\n+            }\n+            Err(_) => {\n+                println!(\"Hello from the client.....\");\n+                continue;\n+            }\n+        }\n+    }\n+\n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642695064666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n         command_id: \"1\".to_string(),    \n     };\n     let json =  serde_json::to_string(&ping).unwrap();\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-    \n+    let mut counter = 1;\n     loop {\n         match client_rx.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 let message = match from_binary::<Message>(buffer) {\n@@ -159,12 +159,18 @@\n                    _ => continue,\n                 }\n             }\n             Err(_) => {\n-                println!(\"Hello from the client.....\");\n-                continue;\n+                println!(\"Hello from the client.....\");                \n             }\n         }\n+        counter += 1;\n+        if counter > 5{\n+            break;\n+        }\n+        else {\n+            continue\n+        }\n     }\n \n     sleep(Duration::from_secs(2));\n \n"
                },
                {
                    "date": 1642695083652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name.clone(), message.from).unwrap(),\n+                    Command::Ping => pong(\"the_client\".clone(), message.from).unwrap(),\n                    _ => continue,\n                 }\n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642695130175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,14 +151,9 @@\n                 let message = match from_binary::<Message>(buffer) {\n                     Ok(cmd) => cmd,\n                     Err(_) => continue,\n                 };\n-\n-                match message.command {\n-                    Command::Stop => break,\n-                    Command::Ping => pong(\"the_client\".clone(), message.from).unwrap(),\n-                   _ => continue,\n-                }\n+                info!(\"inbox: {}\", message)\n             }\n             Err(_) => {\n                 println!(\"Hello from the client.....\");                \n             }\n"
                },
                {
                    "date": 1642695136380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n                 let message = match from_binary::<Message>(buffer) {\n                     Ok(cmd) => cmd,\n                     Err(_) => continue,\n                 };\n-                info!(\"inbox: {}\", message)\n+                info!(\"inbox: {}\", message);\n             }\n             Err(_) => {\n                 println!(\"Hello from the client.....\");                \n             }\n"
                },
                {
                    "date": 1642695495981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n         ack: false,\n         command_id: \"1\".to_string(),    \n     };\n     let json =  serde_json::to_string(&ping).unwrap();\n+    info!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     let mut counter = 1;\n     loop {\n         match client_rx.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642695567781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n         ack: false,\n         command_id: \"1\".to_string(),    \n     };\n     let json =  serde_json::to_string(&ping).unwrap();\n-    info!(\"Sending: {}\", json);\n+    println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     let mut counter = 1;\n     loop {\n         match client_rx.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642695622498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(\"task_executor_1\".to_string(),rx));\n+    let _handler = thread::spawn(move || server_loop(worker_name,rx));\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695628669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(worker_name,rx));\n+    let _handler = thread::spawn(move || server_loop(worker_name.clone(),rx));\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695740210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(worker_name.clone(),rx));\n+    let _handler = thread::spawn(move |worker_name| server_loop(worker_name.clone(),rx));\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695763712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move |worker_name| server_loop(worker_name.clone(),rx));\n+    let _handler = thread::spawn(move || server_loop(worker_name.clone(),rx));\n     println!(\"worker {} has been started.\", worker_name);\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695772788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n     let _handler = thread::spawn(move || server_loop(worker_name.clone(),rx));\n-    println!(\"worker {} has been started.\", worker_name);\n+    println!(\"worker {} has been started.\", worker_name.clone());\n     Ok(())\n }\n \n pub fn server_loop (registered_name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n"
                },
                {
                    "date": 1642695809762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(worker_name.clone(),rx));\n+    let _handler = thread::spawn(move || server_loop(worker_name,rx));\n     println!(\"worker {} has been started.\", worker_name.clone());\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695840553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(worker_name,rx));\n+    let _handler = thread::spawn(move async || server_loop(worker_name,rx));\n     println!(\"worker {} has been started.\", worker_name.clone());\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695858922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move async || server_loop(worker_name,rx));\n+    let _handler = thread::spawn(move async |worker_name| server_loop(worker_name,rx));\n     println!(\"worker {} has been started.\", worker_name.clone());\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695865940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move async |worker_name| server_loop(worker_name,rx));\n+    let _handler = thread::spawn(async move |worker_name| server_loop(worker_name,rx));\n     println!(\"worker {} has been started.\", worker_name.clone());\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695887713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(async move |worker_name| server_loop(worker_name,rx));\n+    let _handler = thread::spawn(move || server_loop(worker_name,rx));\n     println!(\"worker {} has been started.\", worker_name.clone());\n     Ok(())\n }\n \n"
                },
                {
                    "date": 1642695922565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,14 +50,14 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(worker_name,rx));\n+    let _handler = thread::spawn(move || server_loop(&worker_name,rx));\n     println!(\"worker {} has been started.\", worker_name.clone());\n     Ok(())\n }\n \n-pub fn server_loop (registered_name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn server_loop (registered_name: &str, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642695979471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \n     Ok(())\n }\n \n-fn pong<T: AsRef<str>>(from: T, receiver: T) -> RuntimeResult<()> {\n+fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler = match CALLBACK.lock().unwrap().get(receiver.as_ref()) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver.as_ref());\n"
                },
                {
                    "date": 1642695995474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                 };\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name.clone(), message.from).unwrap(),\n+                    Command::Ping => pong(registered_name.to_string().clone(), message.from).unwrap(),\n                    _ => continue,\n                 }\n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642696005437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n             });\n         }\n     };\n     let pong = Message {\n-        from: from.as_ref().to_string(),\n+        from: from.to_string(),\n         ack: false,\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n"
                },
                {
                    "date": 1642696013356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     Ok(())\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n-    let handler = match CALLBACK.lock().unwrap().get(receiver.as_ref()) {\n+    let handler = match CALLBACK.lock().unwrap().get(receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver.as_ref());\n             return Err(RuntimeError {\n"
                },
                {
                    "date": 1642696018451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     Ok(())\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n-    let handler = match CALLBACK.lock().unwrap().get(receiver) {\n+    let handler = match CALLBACK.lock().unwrap().get(receiver.to_string()) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver.as_ref());\n             return Err(RuntimeError {\n"
                },
                {
                    "date": 1642696031774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     Ok(())\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n-    let handler = match CALLBACK.lock().unwrap().get(receiver.to_string()) {\n+    let handler = match CALLBACK.lock().unwrap().get(receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver.as_ref());\n             return Err(RuntimeError {\n"
                },
                {
                    "date": 1642696041878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,12 +83,12 @@\n     Ok(())\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n-    let handler = match CALLBACK.lock().unwrap().get(receiver) {\n+    let handler = match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n-            let msg = format!(\"Pong command failed. {} not found.\", receiver.as_ref());\n+            let msg = format!(\"Pong command failed. {} not found.\", receiver));\n             return Err(RuntimeError {\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg,\n             });\n"
                },
                {
                    "date": 1642696047238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler = match CALLBACK.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n-            let msg = format!(\"Pong command failed. {} not found.\", receiver));\n+            let msg = format!(\"Pong command failed. {} not found.\", receiver);\n             return Err(RuntimeError {\n                 error_type: common_libs::error::RuntimeErrorType::NotFound,\n                 message: msg,\n             });\n"
                },
                {
                    "date": 1642696310746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n     let _handler = thread::spawn(move || server_loop(&worker_name,rx));\n-    println!(\"worker {} has been started.\", worker_name.clone());\n+    \n     Ok(())\n }\n \n pub fn server_loop (registered_name: &str, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n"
                },
                {
                    "date": 1642696423335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,10 @@\n                     Ok(cmd) => cmd,\n                     Err(_) => continue,\n                 };\n \n+                println!(\"message is: {}\", message);\n+\n                 match message.command {\n                     Command::Stop => break,\n                     Command::Ping => pong(registered_name.to_string().clone(), message.from).unwrap(),\n                    _ => continue,\n"
                },
                {
                    "date": 1642696506885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n         command_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n+    println!(\"sending pong command: {}\", json);\n     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n \n     Ok(())\n }\n"
                },
                {
                    "date": 1642696638068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,12 @@\n                 println!(\"message is: {}\", message);\n \n                 match message.command {\n                     Command::Stop => break,\n-                    Command::Ping => pong(registered_name.to_string().clone(), message.from).unwrap(),\n+                    Command::Ping => {\n+                        println!(\"do pong\");\n+                        pong(registered_name.to_string().clone(), message.from).unwrap()\n+                    },\n                    _ => continue,\n                 }\n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642696973549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n                     Command::Ping => {\n                         println!(\"do pong\");\n                         pong(registered_name.to_string().clone(), message.from).unwrap()\n                     },\n-                   _ => continue,\n+                   _ => break,\n                 }\n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1642697040230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,11 +131,9 @@\n \n #[test]\n fn ping_pong_test() {\n     let _ok = start_worker(\"the_server\".to_string());\n-    let (client_tx, client_rx) = crossbeam::channel::unbounded();\n-    let mut callbacks = CALLBACK.lock().unwrap();\n-    callbacks.insert(\"the_client\".to_string(), CommandHandler { sender: client_tx });\n+    let _ok = start_worker(\"the_client\".to_string());\n     let cmd_handler = WORKERS\n         .lock()\n         .unwrap()\n         .get(\"the_server\")\n@@ -150,29 +148,9 @@\n     };\n     let json =  serde_json::to_string(&ping).unwrap();\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-    let mut counter = 1;\n-    loop {\n-        match client_rx.recv_timeout(Duration::from_secs(1)) {\n-            Ok(buffer) => {\n-                let message = match from_binary::<Message>(buffer) {\n-                    Ok(cmd) => cmd,\n-                    Err(_) => continue,\n-                };\n-                info!(\"inbox: {}\", message);\n-            }\n-            Err(_) => {\n-                println!(\"Hello from the client.....\");                \n-            }\n-        }\n-        counter += 1;\n-        if counter > 5{\n-            break;\n-        }\n-        else {\n-            continue\n-        }\n+    sleep(Duration::from_secs(5))\n     }\n \n     sleep(Duration::from_secs(2));\n \n"
                },
                {
                    "date": 1642697053830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,10 +148,7 @@\n     };\n     let json =  serde_json::to_string(&ping).unwrap();\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-    sleep(Duration::from_secs(5))\n-    }\n-\n     sleep(Duration::from_secs(2));\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642697154138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     Ok(())\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n-    let handler = match CALLBACK.lock().unwrap().get(&receiver) {\n+    let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n             return Err(RuntimeError {\n"
                },
                {
                    "date": 1642752509291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,13 @@\n \n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::info;\n+use model::ProcessResult;\n \n use crate::model::{Command, Message};\n \n+\n lazy_static! {\n     static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n@@ -34,8 +36,12 @@\n         Mutex::new(m)\n     };\n }\n \n+trait Processor<T> {\n+    fn process(message: Vec<u8>) -> ProcessResult<T>\n+}\n+\n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n }\n"
                },
                {
                    "date": 1642752522685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n trait Processor<T> {\n-    fn process(message: Vec<u8>) -> ProcessResult<T>\n+    fn process(message: Vec<u8>) -> ProcessResult<T>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642753704107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n }\n \n trait Processor<T> {\n     fn process(message: Vec<u8>) -> ProcessResult<T>;\n+    fn from() -> String;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n@@ -93,8 +94,40 @@\n \n     Ok(())\n }\n \n+pub fn start_workder (worker_name: &str, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+    println!(\"Server is started...\");\n+\n+    loop {\n+        match receiver.recv_timeout(Duration::from_secs(1)) {\n+            Ok(buffer) => {\n+                let message = match from_binary::<Message>(buffer) {\n+                    Ok(cmd) => cmd,\n+                    Err(_) => continue,\n+                };\n+\n+                println!(\"message is: {}\", message);\n+\n+                match message.command {\n+                    Command::Stop => break,\n+                    Command::Ping => {\n+                        println!(\"do pong\");\n+                        pong(worker_name.to_string().clone(), message.from).unwrap()\n+                    },\n+                   _ => break,\n+                }\n+            }\n+            Err(_) => {\n+                println!(\"Hello from the server.....\");\n+                continue;\n+            }\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n"
                },
                {
                    "date": 1642753807187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,12 @@\n         Mutex::new(m)\n     };\n }\n \n-trait Processor<T> {\n-    fn process(message: Vec<u8>) -> ProcessResult<T>;\n+trait Processor<S, T> {\n+    fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n+    fn receiver() -> crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642755981800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder (worker_name: &str, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn start_workder (worker_name: Processor) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642755997880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder (worker_name: Processor) -> AppResult<()> {\n+pub fn start_workder (worker_name: dyn Processor) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756014982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder (worker_name: dyn Processor) -> AppResult<()> {\n+pub fn start_workder:<S, T> (worker_name: dyn Processor) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756028613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder:<S, T> (worker_name: dyn Processor) -> AppResult<()> {\n+pub fn start_workder (worker_name: dyn Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756035543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder (worker_name: dyn Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder ::<S, T>(worker_name: dyn Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756058504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder ::<S, T>(worker_name: dyn Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder::<P: Processor<S, T>>(worker_name: dyn Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756074679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder::<P: Processor<S, T>>(worker_name: dyn Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder::<P: Processor<S, T>>(worker_name: dyn P) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756178115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder::<P: Processor<S, T>>(worker_name: dyn P) -> AppResult<()> {\n+pub fn start_workder(worker_name: impl Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756186141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder(worker_name: impl Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder::<S, T>(worker_name: impl Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756198738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder::<S, T>(worker_name: impl Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder::<S, T>(worker_name: impl dyn Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756218385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder::<S, T>(worker_name: impl dyn Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder<S, T>(worker_name: impl dyn Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642756275254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n trait Processor<S, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n-    fn receiver() -> crossbeam::channel::Receiver<S>;\n+    pub fn receiver() -> crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n@@ -95,11 +95,11 @@\n \n     Ok(())\n }\n \n-pub fn start_workder<S, T>(worker_name: impl dyn Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder<S, T>(processor: impl Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-\n+    let receiver = processor.\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 let message = match from_binary::<Message>(buffer) {\n"
                },
                {
                    "date": 1642756297255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n trait Processor<S, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n-    pub fn receiver() -> crossbeam::channel::Receiver<S>;\n+    fn receiver() -> crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642756323416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n }\n \n pub fn start_workder<S, T>(processor: impl Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let receiver = processor.\n+    let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 let message = match from_binary::<Message>(buffer) {\n"
                },
                {
                    "date": 1642756342312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n }\n \n pub fn start_workder<S, T>(processor: impl Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let receiver = processor.receiver();\n+    let receiver = processor.receiver::<S>();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 let message = match from_binary::<Message>(buffer) {\n"
                },
                {
                    "date": 1642756580596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n }\n \n pub fn start_workder<S, T>(processor: impl Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let receiver = processor.receiver::<S>();\n+    let receiver = processor.receiver<S>();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 let message = match from_binary::<Message>(buffer) {\n"
                },
                {
                    "date": 1642756596975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n }\n \n pub fn start_workder<S, T>(processor: impl Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let receiver = processor.receiver<S>();\n+    let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(buffer) => {\n                 let message = match from_binary::<Message>(buffer) {\n"
                },
                {
                    "date": 1642756616610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n trait Processor<S, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n-    fn receiver() -> crossbeam::channel::Receiver<S>;\n+    fn receiver() -> &crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642756668589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,8 @@\n \n trait Processor<S, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n-    fn receiver() -> &crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642756677202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n \n trait Processor<S, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n+    fn receiver() -> crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642756686139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n trait Processor<S, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n-    fn receiver() -> crossbeam::channel::Receiver<S>;\n+    fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642756824177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,24 +100,12 @@\n     println!(\"Server is started...\");\n     let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(buffer) => {\n-                let message = match from_binary::<Message>(buffer) {\n-                    Ok(cmd) => cmd,\n-                    Err(_) => continue,\n-                };\n-\n-                println!(\"message is: {}\", message);\n-\n-                match message.command {\n-                    Command::Stop => break,\n-                    Command::Ping => {\n-                        println!(\"do pong\");\n-                        pong(worker_name.to_string().clone(), message.from).unwrap()\n-                    },\n-                   _ => break,\n-                }\n+            Ok(in_message) => {\n+                \n+                let result = processor.process(in_message);\n+            \n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n                 continue;\n"
                },
                {
                    "date": 1642756872311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n trait Processor<S, T> {\n-    fn process(message: S) -> ProcessResult<T>;\n+    fn process(&self, message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642756884872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n trait Processor<S, T> {\n-    fn process(&self, message: S) -> ProcessResult<T>;\n+    fn process( message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642756921010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n trait Processor<S, T> {\n-    fn process( message: S) -> ProcessResult<T>;\n+    \n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642756929722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n trait Processor<S, T> {\n-    \n+    fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642756942719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         Mutex::new(m)\n     };\n }\n \n-trait Processor<S, T> {\n+trait Processor<S:Clone, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n"
                },
                {
                    "date": 1642756961741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         Mutex::new(m)\n     };\n }\n \n-trait Processor<S:Clone, T> {\n+trait Processor<S, T> {\n     fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n"
                },
                {
                    "date": 1642757121941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(in_message) => {\n                 \n-                let result = processor.process(in_message);\n+                let result = <impl Processor<S, T> as Processor>::process(processor, in_message);\n             \n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1642757144494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(in_message) => {\n                 \n-                let result = <impl Processor<S, T> as Processor>::process(processor, in_message);\n+                let result = <impl Processor<S, T> as Processor>::process(in_message);\n             \n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1642757171261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,16 +95,16 @@\n \n     Ok(())\n }\n \n-pub fn start_workder<S, T>(processor: impl Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder<S, T>(processor: Box<dyn Processor<S, T>) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(in_message) => {\n                 \n-                let result = <impl Processor<S, T> as Processor>::process(in_message);\n+                let result = processor.process(in_message);\n             \n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1642757186649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder<S, T>(processor: Box<dyn Processor<S, T>) -> AppResult<()> {\n+pub fn start_workder<S, T>(processor: Box<dyn Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642757195993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder<S, T>(processor: Box<dyn Processor<S, T>>) -> AppResult<()> {\n+pub fn start_workder<S, T>(processor: Box<dyn impl Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642757201125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder<S, T>(processor: Box<dyn impl Processor<S, T>>) -> AppResult<()> {\n+pub fn start_workder<S, T>(processor: Box<dyn Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642757206855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder<S, T>(processor: Box<dyn Processor<S, T>>) -> AppResult<()> {\n+pub fn start_workder<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n     let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642757246505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n trait Processor<S, T> {\n-    fn process(message: S) -> ProcessResult<T>;\n+    fn process(&self, message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642757277258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n trait Processor<S, T> {\n-    fn process(&self, message: S) -> ProcessResult<T>;\n+    pub fn process(&self, message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642757283866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n         Mutex::new(m)\n     };\n }\n \n-trait Processor<S, T> {\n-    pub fn process(&self, message: S) -> ProcessResult<T>;\n+pub trait Processor<S, T> {\n+    fn process(&self, message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642757295353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n pub trait Processor<S, T> {\n-    fn process(&self, message: S) -> ProcessResult<T>;\n+    fn process(message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642757300512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n pub trait Processor<S, T> {\n-    fn process(message: S) -> ProcessResult<T>;\n+    fn process(&self, message: S) -> ProcessResult<T>;\n     fn from() -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n"
                },
                {
                    "date": 1642757328003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,11 @@\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(in_message) => {\n                 \n-                let result = processor.process(in_message);\n+                match processor.process(in_message) {\n+                    \n+                } ;\n             \n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1642757350035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,10 @@\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(in_message) => {\n                 \n                 match processor.process(in_message) {\n-                    \n+                    Ok(_) => continue,\n+                    Err(_) => todo!(),\n                 } ;\n             \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642757415118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n use common_libs::utils::from_binary;\n use log::info;\n use model::ProcessResult;\n \n-use crate::model::{Command, Message};\n+use crate::model::{Command, Message, ProcessErrorType};\n \n \n lazy_static! {\n     static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n@@ -104,9 +104,15 @@\n             Ok(in_message) => {\n                 \n                 match processor.process(in_message) {\n                     Ok(_) => continue,\n-                    Err(_) => todo!(),\n+                    Err(err) => {\n+                        if ProcessErrorType::Continue == err.error_type {\n+                            continue;\n+                        } else {\n+                            break;\n+                        }\n+                    },\n                 } ;\n             \n             }\n             Err(_) => {\n"
                },
                {
                    "date": 1642757480074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n                 } ;\n             \n             }\n             Err(_) => {\n-                println!(\"Hello from the server.....\");\n+                println!(\"worker is waiting\");\n                 continue;\n             }\n         }\n     }\n"
                },
                {
                    "date": 1642757508980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                 \n                 match processor.process(in_message) {\n                     Ok(_) => continue,\n                     Err(err) => {\n-                        if ProcessErrorType::Continue == err.error_type {\n+                        if ProcessErrorType::Continue = err.error_type {\n                             continue;\n                         } else {\n                             break;\n                         }\n@@ -115,9 +115,9 @@\n                 } ;\n             \n             }\n             Err(_) => {\n-                println!(\"worker is waiting\");\n+                println!(\"worker is waiting...\");\n                 continue;\n             }\n         }\n     }\n"
                },
                {
                    "date": 1642757670865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                 \n                 match processor.process(in_message) {\n                     Ok(_) => continue,\n                     Err(err) => {\n-                        if ProcessErrorType::Continue = err.error_type {\n+                        if ProcessErrorType::Continue == err.error_type{\n                             continue;\n                         } else {\n                             break;\n                         }\n"
                },
                {
                    "date": 1642757677865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n                 \n                 match processor.process(in_message) {\n                     Ok(_) => continue,\n                     Err(err) => {\n-                        if ProcessErrorType::Continue == err.error_type{\n+                        if ProcessErrorType::Continue == err.error_type {\n                             continue;\n                         } else {\n                             break;\n                         }\n"
                },
                {
                    "date": 1642757700232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,8 @@\n     let receiver = processor.receiver();\n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(in_message) => {\n-                \n                 match processor.process(in_message) {\n                     Ok(_) => continue,\n                     Err(err) => {\n                         if ProcessErrorType::Continue == err.error_type {\n"
                },
                {
                    "date": 1642758335099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,12 +119,15 @@\n                 continue;\n             }\n         }\n     }\n-\n     Ok(())\n }\n \n+impl Processor for Worker {\n+    \n+}\n+\n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n"
                },
                {
                    "date": 1642758353854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::info;\n-use model::ProcessResult;\n+use model::{ProcessResult, Worker};\n \n use crate::model::{Command, Message, ProcessErrorType};\n \n \n"
                },
                {
                    "date": 1642758361601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n     }\n     Ok(())\n }\n \n-impl Processor for Worker {\n+impl Processor<S, T> for Worker {\n     \n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n"
                },
                {
                    "date": 1642758373776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,19 @@\n     Ok(())\n }\n \n impl Processor<S, T> for Worker {\n-    \n+    fn process(&self, message: S) -> ProcessResult<T> {\n+        todo!()\n+    }\n+\n+    fn from() -> String {\n+        todo!()\n+    }\n+\n+    fn receiver(&self) -> crossbeam::channel::Receiver<S> {\n+        todo!()\n+    }\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n"
                },
                {
                    "date": 1642758388858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n     }\n     Ok(())\n }\n \n-impl Processor<S, T> for Worker {\n+impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: S) -> ProcessResult<T> {\n         todo!()\n     }\n \n"
                },
                {
                    "date": 1642758395629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n     Ok(())\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n-    fn process(&self, message: S) -> ProcessResult<T> {\n+    fn process(&self, message: Message) -> ProcessResult<T> {\n         todo!()\n     }\n \n     fn from() -> String {\n"
                },
                {
                    "date": 1642758411698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n     Ok(())\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n-    fn process(&self, message: Message) -> ProcessResult<T> {\n+    fn process(&self, message: Vec<u8>) -> ProcessResult<Message> {\n         todo!()\n     }\n \n     fn from() -> String {\n"
                },
                {
                    "date": 1642758420695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n     fn from() -> String {\n         todo!()\n     }\n \n-    fn receiver(&self) -> crossbeam::channel::Receiver<S> {\n+    fn receiver(&self) -> crossbeam::channel::Receiver<Vec<u8>> {\n         todo!()\n     }\n }\n \n"
                },
                {
                    "date": 1642758444412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n         todo!()\n     }\n \n     fn receiver(&self) -> crossbeam::channel::Receiver<Vec<u8>> {\n-        todo!()\n+        self.receiver\n     }\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n"
                },
                {
                    "date": 1642758557251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n }\n \n pub trait Processor<S, T> {\n     fn process(&self, message: S) -> ProcessResult<T>;\n-    fn from() -> String;\n+    fn from(&self) -> String;\n     fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n }\n \n #[derive(Debug, Clone)]\n"
                },
                {
                    "date": 1642758599987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n     fn process(&self, message: Vec<u8>) -> ProcessResult<Message> {\n         todo!()\n     }\n \n-    fn from() -> String {\n-        todo!()\n+    fn from(&self) -> String {\n+        self.name.clone()\n     }\n \n     fn receiver(&self) -> crossbeam::channel::Receiver<Vec<u8>> {\n         self.receiver\n"
                },
                {
                    "date": 1642758644233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n pub trait Processor<S, T> {\n     fn process(&self, message: S) -> ProcessResult<T>;\n     fn from(&self) -> String;\n-    fn receiver(&self) -> crossbeam::channel::Receiver<S>;\n+    fn receive(&self) -> ProcessResult<T>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642758669172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,11 +97,11 @@\n }\n \n pub fn start_workder<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    let receiver = processor.receiver();\n+    \n     loop {\n-        match receiver.recv_timeout(Duration::from_secs(1)) {\n+        match processor.receive() {\n             Ok(in_message) => {\n                 match processor.process(in_message) {\n                     Ok(_) => continue,\n                     Err(err) => {\n"
                },
                {
                    "date": 1642758717196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,10 +131,10 @@\n     fn from(&self) -> String {\n         self.name.clone()\n     }\n \n-    fn receiver(&self) -> crossbeam::channel::Receiver<Vec<u8>> {\n-        self.receiver\n+    fn receive(&self) -> ProcessResult<Message> {\n+        todo!()\n     }\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n"
                },
                {
                    "date": 1642759355195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,11 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        todo!()\n+        match receiver.recv_timeout(Duration::from_secs(1)) {\n+            \n+        }\n     }\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n"
                },
                {
                    "date": 1642759374417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,10 +132,11 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        match receiver.recv_timeout(Duration::from_secs(1)) {\n-            \n+        match self.receiver.recv_timeout(Duration::from_secs(1)) {\n+            Ok(_) => todo!(),\n+            Err(_) => todo!(),\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1642759451501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::info;\n-use model::{ProcessResult, Worker};\n+use model::{ProcessResult, Worker, ProcessError};\n \n use crate::model::{Command, Message, ProcessErrorType};\n \n \n@@ -134,9 +134,14 @@\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(_) => todo!(),\n-            Err(_) => todo!(),\n+            Err(_) => Err(\n+                ProcessError{\n+                    reason: None,\n+                    error_type: ProcessErrorType::Continue,\n+                }\n+            ),\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1642759503265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,11 +131,11 @@\n     fn from(&self) -> String {\n         self.name.clone()\n     }\n \n-    fn receive(&self) -> ProcessResult<Message> {\n+    fn receive::<S>(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(_) => todo!(),\n+            Ok(_) => proce,\n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642759515832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n     fn from(&self) -> String {\n         self.name.clone()\n     }\n \n-    fn receive::<S>(&self) -> ProcessResult<Message> {\n+    fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(_) => proce,\n             Err(_) => Err(\n                 ProcessError{\n"
                },
                {
                    "date": 1642759535048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(_) => proce,\n+            Ok(_) => self.process(message),\n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642759628091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n     };\n }\n \n pub trait Processor<S, T> {\n+    fn map(S) -> T;\n     fn process(&self, message: S) -> ProcessResult<T>;\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n@@ -123,8 +124,11 @@\n     Ok(())\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n+\n+    fn map()\n+\n     fn process(&self, message: Vec<u8>) -> ProcessResult<Message> {\n         todo!()\n     }\n \n@@ -133,9 +137,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(_) => self.process(message),\n+            Ok(binary) => self.process(message),\n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642759635096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n pub trait Processor<S, T> {\n-    fn map(S) -> T;\n+    fn map(source: S) -> T;\n     fn process(&self, message: S) -> ProcessResult<T>;\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n"
                },
                {
                    "date": 1642759661989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n-    fn map()\n+    \n \n     fn process(&self, message: Vec<u8>) -> ProcessResult<Message> {\n         todo!()\n     }\n@@ -146,8 +146,12 @@\n                 }\n             ),\n         }\n     }\n+\n+    fn map(source: Vec<u8>) -> Message {\n+        todo!()\n+    }\n }\n \n fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n"
                },
                {
                    "date": 1642759701004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => self.process(message),\n+            Ok(binary) => map(binary),\n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642759717951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => map(binary),\n+            Ok(binary) => Self::map(binary),\n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642759731974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => Self::map(binary),\n+            Ok(binary) => Ok(Self::map(binary)),\n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642760339226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     };\n }\n \n pub trait Processor<S, T> {\n-    fn map(source: S) -> T;\n+    fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: S) -> ProcessResult<T>;\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n"
                },
                {
                    "date": 1642760357692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n             ),\n         }\n     }\n \n-    fn map(source: Vec<u8>) -> Message {\n+    fn map(source: Vec<u8>) -> ProcessResult<Message> {\n         todo!()\n     }\n }\n \n"
                },
                {
                    "date": 1642760363259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => Ok(Self::map(binary)),\n+            Ok(binary) => Ok(Self::map(binary)?),\n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642760391297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,8 @@\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n-    \n-\n     fn process(&self, message: Vec<u8>) -> ProcessResult<Message> {\n         todo!()\n     }\n \n"
                },
                {
                    "date": 1642760525809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,11 +114,14 @@\n                     },\n                 } ;\n             \n             }\n-            Err(_) => {\n-                println!(\"worker is waiting...\");\n-                continue;\n+            Err(err) => {\n+                if ProcessErrorType::Continue == err.error_type {\n+                    continue;\n+                } else {\n+                    break;\n+                }\n             }\n         }\n     }\n     Ok(())\n"
                },
                {
                    "date": 1642760564733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n }\n \n pub trait Processor<S, T> {\n     fn map(source: S) -> ProcessResult<T>;\n-    fn process(&self, message: S) -> ProcessResult<T>;\n+    fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n"
                },
                {
                    "date": 1642760583836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n-    fn process(&self, message: Vec<u8>) -> ProcessResult<Message> {\n+    fn process(&self, message: Message) -> ProcessResult<Message> {\n         todo!()\n     }\n \n     fn from(&self) -> String {\n"
                },
                {
                    "date": 1642760622345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,19 @@\n pub trait Processor<S, T> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n-    fn receive(&self) -> ProcessResult<T>;\n+    fn receive(&self) -> ProcessResult<Message> {\n+        match self.receiver.recv_timeout(Duration::from_secs(1)) {\n+            Ok(binary) => Ok(Self::map(binary)?),\n+            Err(_) => Err(\n+                ProcessError{\n+                    reason: None,\n+                    error_type: ProcessErrorType::Continue,\n+                }\n+            ),\n+        }\n+    }\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642760631130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n pub trait Processor<S, T> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n-    fn receive(&self) -> ProcessResult<Message> {\n+    fn receive(&self) -> ProcessResult<T> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => Ok(Self::map(binary)?),\n             Err(_) => Err(\n                 ProcessError{\n"
                },
                {
                    "date": 1642760646667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,19 +40,9 @@\n pub trait Processor<S, T> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n-    fn receive(&self) -> ProcessResult<T> {\n-        match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => Ok(Self::map(binary)?),\n-            Err(_) => Err(\n-                ProcessError{\n-                    reason: None,\n-                    error_type: ProcessErrorType::Continue,\n-                }\n-            ),\n-        }\n-    }\n+    fn receive(&self) -> ProcessResult<T>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642761215146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,12 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => Ok(Self::map(binary)?),\n+            Ok(binary) =>   {\n+\n+            },\n+            \n             Err(_) => Err(\n                 ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n"
                },
                {
                    "date": 1642761242001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,10 +138,10 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) =>   {\n-\n+            Ok(binary) => {\n+                let message = Self::map(binary)?;\n             },\n             \n             Err(_) => Err(\n                 ProcessError{\n"
                },
                {
                    "date": 1642761254275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,9 @@\n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n+                Ok(message)\n             },\n             \n             Err(_) => Err(\n                 ProcessError{\n"
                },
                {
                    "date": 1642761268064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,9 @@\n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n+                self.process(message);\n                 Ok(message)\n             },\n             \n             Err(_) => Err(\n"
                },
                {
                    "date": 1642761283566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,10 +140,9 @@\n     fn receive(&self) -> ProcessResult<Message> {\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n-                self.process(message);\n-                Ok(message)\n+                Ok(self.process(message)?)\n             },\n             \n             Err(_) => Err(\n                 ProcessError{\n"
                },
                {
                    "date": 1642761687132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,13 @@\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n     fn process(&self, message: Message) -> ProcessResult<Message> {\n-        todo!()\n+        match message.command {\n+            Command::Stop => todo!(),\n+            Command::Ping => todo!(),\n+            _ =>,\n+        }\n     }\n \n     fn from(&self) -> String {\n         self.name.clone()\n"
                },
                {
                    "date": 1642761730047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,11 @@\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n             _ =>,\n-        }\n+        };\n+\n+        Ok(message)\n     }\n \n     fn from(&self) -> String {\n         self.name.clone()\n"
                },
                {
                    "date": 1642761746035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n-            _ =>,\n+            _ => todo!(),\n         };\n \n         Ok(message)\n     }\n"
                },
                {
                    "date": 1642761764726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n-            _ => todo!(),\n+            _ => error!(),\n         };\n \n         Ok(message)\n     }\n"
                },
                {
                    "date": 1642761772193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n-            _ => error!(),\n+            _ => error!(\"\"),\n         };\n \n         Ok(message)\n     }\n"
                },
                {
                    "date": 1642761803327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n use std::{collections::HashMap, thread};\n \n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n-use log::info;\n+use log::{info, error};\n use model::{ProcessResult, Worker, ProcessError};\n \n use crate::model::{Command, Message, ProcessErrorType};\n \n@@ -132,9 +132,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n-            _ => error!(\"\"),\n+            cmd => error!(\"command.not.implemented: {}\", cmd),\n         };\n \n         Ok(message)\n     }\n"
                },
                {
                    "date": 1642761811767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n-            cmd => error!(\"command.not.implemented: {}\", cmd),\n+            cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n         Ok(message)\n     }\n"
                },
                {
                    "date": 1642761855400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,9 @@\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n     fn process(&self, message: Message) -> ProcessResult<Message> {\n+        let cloned = message.clone();\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n"
                },
                {
                    "date": 1642761864383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n             Command::Ping => todo!(),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n-        Ok(message)\n+        Ok(cloned)\n     }\n \n     fn from(&self) -> String {\n         self.name.clone()\n"
                },
                {
                    "date": 1642761876798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,16 +129,16 @@\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n     fn process(&self, message: Message) -> ProcessResult<Message> {\n-        let cloned = message.clone();\n+        let orig_message = message.clone();\n         match message.command {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n-        Ok(cloned)\n+        Ok(orig_message)\n     }\n \n     fn from(&self) -> String {\n         self.name.clone()\n"
                },
                {
                    "date": 1642762396258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,12 @@\n \n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         match message.command {\n-            Command::Stop => todo!(),\n+            Command::Stop => {Err(ProcessError{\n+                reason: None,\n+                error_type: ProcessErrorType::Break,\n+            })},\n             Command::Ping => todo!(),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n"
                },
                {
                    "date": 1642762407398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,13 @@\n use std::{collections::HashMap, thread};\n \n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n-use log::{info, error};\n-use model::{ProcessResult, Worker, ProcessError};\n+use log::{error, info};\n+use model::{ProcessError, ProcessResult, Worker};\n \n use crate::model::{Command, Message, ProcessErrorType};\n \n-\n lazy_static! {\n     static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n@@ -59,14 +58,17 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(&worker_name,rx));\n-    \n+    let _handler = thread::spawn(move || server_loop(&worker_name, rx));\n+\n     Ok(())\n }\n \n-pub fn server_loop (registered_name: &str, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> AppResult<()> {\n+pub fn server_loop(\n+    registered_name: &str,\n+    receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match receiver.recv_timeout(Duration::from_secs(1)) {\n@@ -82,10 +84,10 @@\n                     Command::Stop => break,\n                     Command::Ping => {\n                         println!(\"do pong\");\n                         pong(registered_name.to_string().clone(), message.from).unwrap()\n-                    },\n-                   _ => break,\n+                    }\n+                    _ => break,\n                 }\n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n@@ -98,9 +100,9 @@\n }\n \n pub fn start_workder<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n-    \n+\n     loop {\n         match processor.receive() {\n             Ok(in_message) => {\n                 match processor.process(in_message) {\n@@ -110,11 +112,10 @@\n                             continue;\n                         } else {\n                             break;\n                         }\n-                    },\n-                } ;\n-            \n+                    }\n+                };\n             }\n             Err(err) => {\n                 if ProcessErrorType::Continue == err.error_type {\n                     continue;\n@@ -127,16 +128,15 @@\n     Ok(())\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n-\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         match message.command {\n-            Command::Stop => {Err(ProcessError{\n+            Command::Stop => Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n-            })},\n+            }),\n             Command::Ping => todo!(),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n@@ -151,16 +151,14 @@\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n-            },\n-            \n-            Err(_) => Err(\n-                ProcessError{\n-                    reason: None,\n-                    error_type: ProcessErrorType::Continue,\n-                }\n-            ),\n+            }\n+\n+            Err(_) => Err(ProcessError {\n+                reason: None,\n+                error_type: ProcessErrorType::Continue,\n+            }),\n         }\n     }\n \n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n@@ -212,23 +210,17 @@\n #[test]\n fn ping_pong_test() {\n     let _ok = start_worker(\"the_server\".to_string());\n     let _ok = start_worker(\"the_client\".to_string());\n-    let cmd_handler = WORKERS\n-        .lock()\n-        .unwrap()\n-        .get(\"the_server\")\n-        .unwrap()\n-        .clone();\n-    let ping = Message{\n+    let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n+    let ping = Message {\n         command: Command::Ping,\n         from: \"the_client\".to_string(),\n-        payload:vec![],\n+        payload: vec![],\n         ack: false,\n-        command_id: \"1\".to_string(),    \n+        command_id: \"1\".to_string(),\n     };\n-    let json =  serde_json::to_string(&ping).unwrap();\n+    let json = serde_json::to_string(&ping).unwrap();\n\\ No newline at end of file\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n-\n-}\n+}\n"
                },
                {
                    "date": 1642762435176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         match message.command {\n-            Command::Stop => Err(ProcessError {\n+            Command::Stop => return Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n             Command::Ping => todo!(),\n@@ -222,5 +222,5 @@\n     let json = serde_json::to_string(&ping).unwrap();\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1642762499982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n             Command::Stop => return Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n-            Command::Ping => todo!(),\n+            Command::Ping => pong(from, receiver),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n         Ok(orig_message)\n"
                },
                {
                    "date": 1642762550767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n             Command::Stop => return Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n-            Command::Ping => pong(from, receiver),\n+            Command::Ping => pong(self.name),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n         Ok(orig_message)\n"
                },
                {
                    "date": 1642762576064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n             Command::Stop => return Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n-            Command::Ping => pong(self.name),\n+            Command::Ping => pong(self.name, message.from),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n         Ok(orig_message)\n"
                },
                {
                    "date": 1642762984037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n         todo!()\n     }\n }\n \n-fn pong(from: String, receiver: String) -> RuntimeResult<()> {\n+fn pong(from: String, receiver: String) -> ProcessResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n"
                },
                {
                    "date": 1642763035768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,11 +170,11 @@\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n-            return Err(RuntimeError {\n-                error_type: common_libs::error::RuntimeErrorType::NotFound,\n-                message: msg,\n+            return Err(ProcessError {\n+                error_type: ProcessErrorType::Continue\n+                reason: \"client.not.found\".to_string(),\n             });\n         }\n     };\n     let pong = Message {\n"
                },
                {
                    "date": 1642763045566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n             return Err(ProcessError {\n                 error_type: ProcessErrorType::Continue\n-                reason: \"client.not.found\".to_string(),\n+                reason: Some(\"client.not.found\".to_string()),\n             });\n         }\n     };\n     let pong = Message {\n"
                },
                {
                    "date": 1642763075105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n             return Err(ProcessError {\n-                error_type: ProcessErrorType::Continue\n+                error_type: ProcessErrorType::Continue,\n                 reason: Some(\"client.not.found\".to_string()),\n             });\n         }\n     };\n"
                },
                {
                    "date": 1642763093912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n             Command::Stop => return Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n-            Command::Ping => pong(self.name, message.from),\n+            Command::Ping => pong(self.name, message.from)?,\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n         Ok(orig_message)\n"
                },
                {
                    "date": 1642763099070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n             Command::Stop => return Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n-            Command::Ping => pong(self.name, message.from)?,\n+            Command::Ping => pong(self.name, message.from).unwrap(),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n         Ok(orig_message)\n"
                },
                {
                    "date": 1642763105275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n             Command::Stop => return Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n-            Command::Ping => pong(self.name, message.from).unwrap(),\n+            Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n             cmd => error!(\"command.not.implemented: {:?}\", cmd),\n         };\n \n         Ok(orig_message)\n"
                },
                {
                    "date": 1642763181910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             }),\n             Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n-            cmd => error!(\"command.not.implemented: {:?}\", cmd),\n+            cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n         };\n \n         Ok(orig_message)\n     }\n"
                },
                {
                    "date": 1642763481319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,12 @@\n         }\n     }\n \n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n-        todo!()\n+        let message = match from_binary::<Message>(source) {\n+            Ok(cmd) => cmd,\n+            Err(_) => continue,\n+        };\n     }\n }\n \n fn pong(from: String, receiver: String) -> ProcessResult<()> {\n"
                },
                {
                    "date": 1642763517485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,12 +161,12 @@\n         }\n     }\n \n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n-        let message = match from_binary::<Message>(source) {\n-            Ok(cmd) => cmd,\n+        match from_binary::<Message>(source) {\n+            Ok(msg) => Ok(msg),\n             Err(_) => continue,\n-        };\n+        }\n     }\n }\n \n fn pong(from: String, receiver: String) -> ProcessResult<()> {\n"
                },
                {
                    "date": 1642763590224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,12 @@\n \n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n         match from_binary::<Message>(source) {\n             Ok(msg) => Ok(msg),\n-            Err(_) => continue,\n+            Err(_) => Err(ProcessError{\n+                reason: Some(\"invalid.data\"),\n+                error_type: ProcessErrorType::Continue\n+            }),\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1642763598601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n         match from_binary::<Message>(source) {\n             Ok(msg) => Ok(msg),\n             Err(_) => Err(ProcessError{\n-                reason: Some(\"invalid.data\"),\n+                reason: Some(\"invalid.data\".to_string()),\n                 error_type: ProcessErrorType::Continue\n             }),\n         }\n     }\n"
                },
                {
                    "date": 1642763642597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,8 @@\n             }),\n             Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n             cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n         };\n-\n         Ok(orig_message)\n     }\n \n     fn from(&self) -> String {\n"
                },
                {
                    "date": 1642763706920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,8 +128,13 @@\n     Ok(())\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n+\n+    fn new() ->Self{\n+\n+    }\n+\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         match message.command {\n             Command::Stop => return Err(ProcessError {\n"
                },
                {
                    "date": 1642763751915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n-    fn new() ->Self{\n+    fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) ->Self{\n \n     }\n \n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1642763782731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,10 +129,12 @@\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n-    fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) ->Self{\n+    fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) ->Self {\n \n+        Worker { name, receiver }\n+\n     }\n \n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n"
                },
                {
                    "date": 1642763788957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n-    fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) ->Self {\n+    fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> Self {\n \n         Worker { name, receiver }\n \n     }\n"
                },
                {
                    "date": 1642763833696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,16 +127,18 @@\n     }\n     Ok(())\n }\n \n-impl Processor<Vec<u8>, Message> for Worker {\n-\n+impl Worker {\n     fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> Self {\n \n         Worker { name, receiver }\n \n     }\n+}\n \n+impl Processor<Vec<u8>, Message> for Worker {\n+\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         match message.command {\n             Command::Stop => return Err(ProcessError {\n"
                },
                {
                    "date": 1642763840779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,10 +128,9 @@\n     Ok(())\n }\n \n impl Worker {\n-    fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> Self {\n-\n+    pub fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> Self {\n         Worker { name, receiver }\n \n     }\n }\n"
                },
                {
                    "date": 1642763846896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,8 @@\n \n impl Worker {\n     pub fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> Self {\n         Worker { name, receiver }\n-\n     }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1642764086157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,11 +128,19 @@\n     Ok(())\n }\n \n impl Worker {\n-    pub fn new(name: String, receiver: crossbeam::channel::Receiver<Vec<u8>>) -> Self {\n-        Worker { name, receiver }\n+    pub fn new(name: String) -> Self {\n+        let mut workers = WORKERS.lock().unwrap();\n+        if workers.contains_key(&name) {\n+        let msg = format!(\n+            \"worker with name: {} already has been started.\",\n+            name\n+        );\n+        return Err(AppError::throw(&msg));\n     }\n+    let (tx, rx) = crossbeam::channel::unbounded();\n+    }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n \n"
                },
                {
                    "date": 1642764283069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,10 @@\n         );\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n+    workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n+    Worker { name: name, receiver: tx }\n     }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1642764292059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n         );\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n-    workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n+    workers.insert(name.clone(), CommandHandler { sender: tx });\n     Worker { name: name, receiver: tx }\n     }\n }\n \n"
                },
                {
                    "date": 1642764301692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx });\n-    Worker { name: name, receiver: tx }\n+    Worker { name: name, receiver: rx }\n     }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1642764340931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx });\n-    Worker { name: name, receiver: rx }\n+    Worker { name, receiver: rx }\n     }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1642765198136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n         return Err(AppError::throw(&msg));\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx });\n-    Worker { name, receiver: rx }\n+    Worker { name, receiver: Some(rx) }\n     }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1642765237439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n         let msg = format!(\n             \"worker with name: {} already has been started.\",\n             name\n         );\n-        return Err(AppError::throw(&msg));\n+        return Worker{name: String::default(), None};\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx });\n     Worker { name, receiver: Some(rx) }\n"
                },
                {
                    "date": 1642765243711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n         let msg = format!(\n             \"worker with name: {} already has been started.\",\n             name\n         );\n-        return Worker{name: String::default(), None};\n+        return Worker{name: String::default(), receiver: None};\n     }\n     let (tx, rx) = crossbeam::channel::unbounded();\n     workers.insert(name.clone(), CommandHandler { sender: tx });\n     Worker { name, receiver: Some(rx) }\n"
                },
                {
                    "date": 1642765254296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        match self.receiver.recv_timeout(Duration::from_secs(1)) {\n+        match self.receiver.unwrap().recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n             }\n"
                },
                {
                    "date": 1642765383822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        match self.receiver.unwrap().recv_timeout(Duration::from_secs(1)) {\n+        match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n             }\n"
                },
                {
                    "date": 1642765412910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,9 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n+        let rcv = self.receiver.unwrap();\n         match self.receiver.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n"
                },
                {
                    "date": 1642765420502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         let rcv = self.receiver.unwrap();\n-        match self.receiver.recv_timeout(Duration::from_secs(1)) {\n+        match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n             }\n"
                },
                {
                    "date": 1642765435315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        let rcv = self.receiver.unwrap();\n+        let rcv = self.receiver.clone().unwrap();\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n"
                },
                {
                    "date": 1642765463099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        let rcv = self.receiver.clone().unwrap();\n+        let rcv = self.receiver.unwrap();\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n"
                },
                {
                    "date": 1642765520651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,12 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        let rcv = self.receiver.unwrap();\n+        let rcv = match self.receiver{\n+            Some(rcv) => rcv,\n+            None => todo!()\n+        };\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n"
                },
                {
                    "date": 1642765532199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         let rcv = match self.receiver{\n-            Some(rcv) => rcv,\n+            Some(rcv1) => rcv1,\n             None => todo!()\n         };\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n"
                },
                {
                    "date": 1642765537598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         let rcv = match self.receiver{\n-            Some(rcv1) => rcv1,\n+            Some(rcv1) => &rcv1,\n             None => todo!()\n         };\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n"
                },
                {
                    "date": 1642765553757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n         let rcv = match self.receiver{\n-            Some(rcv1) => &rcv1,\n+            Some(rcv1) => rcv1,\n             None => todo!()\n         };\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n"
                },
                {
                    "date": 1642765582894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        let rcv = match self.receiver{\n+        let rcv = match &self.receiver{\n             Some(rcv1) => rcv1,\n             None => todo!()\n         };\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1642765661630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,12 @@\n \n     fn receive(&self) -> ProcessResult<Message> {\n         let rcv = match &self.receiver{\n             Some(rcv1) => rcv1,\n-            None => todo!()\n+            None => return Err(ProcessError{\n+                reason: None,\n+                error_type: ProcessErrorType::Fatal\n+            })\n         };\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n"
                },
                {
                    "date": 1642765706599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,29 +131,33 @@\n impl Worker {\n     pub fn new(name: String) -> Self {\n         let mut workers = WORKERS.lock().unwrap();\n         if workers.contains_key(&name) {\n-        let msg = format!(\n-            \"worker with name: {} already has been started.\",\n-            name\n-        );\n-        return Worker{name: String::default(), receiver: None};\n+            let msg = format!(\"worker with name: {} already has been started.\", name);\n+            return Worker {\n+                name: String::default(),\n+                receiver: None,\n+            };\n+        }\n+        let (tx, rx) = crossbeam::channel::unbounded();\n+        workers.insert(name.clone(), CommandHandler { sender: tx });\n+        Worker {\n+            name,\n+            receiver: Some(rx),\n+        }\n     }\n-    let (tx, rx) = crossbeam::channel::unbounded();\n-    workers.insert(name.clone(), CommandHandler { sender: tx });\n-    Worker { name, receiver: Some(rx) }\n-    }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n-\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         match message.command {\n-            Command::Stop => return Err(ProcessError {\n-                reason: None,\n-                error_type: ProcessErrorType::Break,\n-            }),\n+            Command::Stop => {\n+                return Err(ProcessError {\n+                    reason: None,\n+                    error_type: ProcessErrorType::Break,\n+                })\n+            }\n             Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n             cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n         };\n         Ok(orig_message)\n@@ -163,14 +167,16 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        let rcv = match &self.receiver{\n+        let rcv = match &self.receiver {\n             Some(rcv1) => rcv1,\n-            None => return Err(ProcessError{\n-                reason: None,\n-                error_type: ProcessErrorType::Fatal\n-            })\n+            None => {\n+                return Err(ProcessError {\n+                    reason: None,\n+                    error_type: ProcessErrorType::Fatal,\n+                })\n+            }\n         };\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n@@ -186,11 +192,11 @@\n \n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n         match from_binary::<Message>(source) {\n             Ok(msg) => Ok(msg),\n-            Err(_) => Err(ProcessError{\n+            Err(_) => Err(ProcessError {\n                 reason: Some(\"invalid.data\".to_string()),\n-                error_type: ProcessErrorType::Continue\n+                error_type: ProcessErrorType::Continue,\n             }),\n         }\n     }\n }\n"
                },
                {
                    "date": 1642765721823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,9 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n+        \n         let rcv = match &self.receiver {\n             Some(rcv1) => rcv1,\n             None => {\n                 return Err(ProcessError {\n@@ -176,8 +177,9 @@\n                     error_type: ProcessErrorType::Fatal,\n                 })\n             }\n         };\n+        \n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n"
                },
                {
                    "date": 1642765758373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,8 @@\n impl Worker {\n     pub fn new(name: String) -> Self {\n         let mut workers = WORKERS.lock().unwrap();\n         if workers.contains_key(&name) {\n-            let msg = format!(\"worker with name: {} already has been started.\", name);\n             return Worker {\n                 name: String::default(),\n                 receiver: None,\n             };\n@@ -177,9 +176,9 @@\n                     error_type: ProcessErrorType::Fatal,\n                 })\n             }\n         };\n-        \n+\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n"
                },
                {
                    "date": 1642765788913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,10 @@\n impl Worker {\n     pub fn new(name: String) -> Self {\n         let mut workers = WORKERS.lock().unwrap();\n         if workers.contains_key(&name) {\n+            let msg = format!(\"worker with name: {} already has been started.\", name);\n+            error!(\"failed: {}\", msg);\n             return Worker {\n                 name: String::default(),\n                 receiver: None,\n             };\n@@ -176,9 +178,9 @@\n                     error_type: ProcessErrorType::Fatal,\n                 })\n             }\n         };\n-\n+        \n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n"
                },
                {
                    "date": 1642769310873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,8 +145,12 @@\n             name,\n             receiver: Some(rx),\n         }\n     }\n+\n+\n+\n+    \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n@@ -261,4 +265,9 @@\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     sleep(Duration::from_secs(2));\n }\n+\n+#[test]\n+fn ping_pong_workers_test() {\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769336809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n use std::thread::sleep;\n use std::time::Duration;\n use std::{collections::HashMap, thread};\n \n+use common_libs::configure_log4rs;\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n use model::{ProcessError, ProcessResult, Worker};\n@@ -268,6 +269,6 @@\n }\n \n #[test]\n fn ping_pong_workers_test() {\n-    \n+    configure_log4rs();\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769489122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,5 +270,6 @@\n \n #[test]\n fn ping_pong_workers_test() {\n     configure_log4rs();\n+    let worker1 = Worker::new(\"worker1\".to_string());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769502264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,5 +271,6 @@\n #[test]\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n+    let worker2 = Worker::new(\"worker2\".to_string());\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769574704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,5 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n+    let _handler = thread::spawn(move || start_worker(worker1));\n+    let _handler = thread::spawn(move || start_worker(worker2));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769613361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _handler = thread::spawn(move || start_worker(worker1));\n-    let _handler = thread::spawn(move || start_worker(worker2));\n+    let _handler = thread::spawn(move || start_workder(worker1));\n+    let _handler = thread::spawn(move || start_workder(worker2));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769637524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _handler = thread::spawn(move || start_workder(worker1));\n-    let _handler = thread::spawn(move || start_workder(worker2));\n+    let _handler = thread::spawn(move || start_workder::<Vec<u8>, Message>(worker1));\n+    let _handler = thread::spawn(move || start_workder::<Vec<u8>, Message>(worker2));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769649060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _handler = thread::spawn(move || start_workder::<Vec<u8>, Message>(worker1));\n-    let _handler = thread::spawn(move || start_workder::<Vec<u8>, Message>(worker2));\n+    let _handler = thread::spawn(move || start_workders::<Vec<u8>, Message>(worker1));\n+    let _handler = thread::spawn(move || start_workders::<Vec<u8>, Message>(worker2));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769679039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workder<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n+pub fn start_workders<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match processor.receive() {\n"
                },
                {
                    "date": 1642769702715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _handler = thread::spawn(move || start_workders::<Vec<u8>, Message>(worker1));\n-    let _handler = thread::spawn(move || start_workders::<Vec<u8>, Message>(worker2));\n+    let _handler = thread::spawn(move || start_workders:(worker1));\n+    let _handler = thread::spawn(move || start_workders::(worker2));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769719932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _handler = thread::spawn(move || start_workders:(worker1));\n+    let _handler = thread::spawn(move || start_workders:(Box::new(worker1)));\n     let _handler = thread::spawn(move || start_workders::(worker2));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769749196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,6 +273,6 @@\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n     let _handler = thread::spawn(move || start_workders:(Box::new(worker1)));\n-    let _handler = thread::spawn(move || start_workders::(worker2));\n+    let _handler = thread::spawn(move || start_workders::(Box::new(worker2)));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769766097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _handler = thread::spawn(move || start_workders:(Box::new(worker1)));\n-    let _handler = thread::spawn(move || start_workders::(Box::new(worker2)));\n+    let _ = thread::spawn(move || start_workders:(Box::new(worker1)));\n+    let _ = thread::spawn(move || start_workders::(Box::new(worker2)));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769771627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _ = thread::spawn(move || start_workders:(Box::new(worker1)));\n+    let _ = thread::spawn(move || start_workders:Box::new(worker1)));\n     let _ = thread::spawn(move || start_workders::(Box::new(worker2)));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769777869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,7 +272,7 @@\n fn ping_pong_workers_test() {\n     configure_log4rs();\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n-    let _ = thread::spawn(move || start_workders:Box::new(worker1)));\n-    let _ = thread::spawn(move || start_workders::(Box::new(worker2)));\n+    let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n+    let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769806650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,5 +274,6 @@\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n     let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n     let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n+    sleep(Duration::from_secs(2));\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642769875924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,12 +190,14 @@\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n             }\n \n-            Err(_) => Err(ProcessError {\n+            Err(_) => {\n+                info!(\"waiting for a message....\");\n+                Err(ProcessError {\n                 reason: None,\n                 error_type: ProcessErrorType::Continue,\n-            }),\n+            })},\n         }\n     }\n \n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1642769885622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,12 +146,8 @@\n             name,\n             receiver: Some(rx),\n         }\n     }\n-\n-\n-\n-    \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n@@ -173,9 +169,8 @@\n         self.name.clone()\n     }\n \n     fn receive(&self) -> ProcessResult<Message> {\n-        \n         let rcv = match &self.receiver {\n             Some(rcv1) => rcv1,\n             None => {\n                 return Err(ProcessError {\n@@ -183,9 +178,9 @@\n                     error_type: ProcessErrorType::Fatal,\n                 })\n             }\n         };\n-        \n+\n         match rcv.recv_timeout(Duration::from_secs(1)) {\n             Ok(binary) => {\n                 let message = Self::map(binary)?;\n                 Ok(self.process(message)?)\n@@ -193,11 +188,12 @@\n \n             Err(_) => {\n                 info!(\"waiting for a message....\");\n                 Err(ProcessError {\n-                reason: None,\n-                error_type: ProcessErrorType::Continue,\n-            })},\n+                    reason: None,\n+                    error_type: ProcessErrorType::Continue,\n+                })\n+            }\n         }\n     }\n \n     fn map(source: Vec<u8>) -> ProcessResult<Message> {\n@@ -277,5 +273,5 @@\n     let worker2 = Worker::new(\"worker2\".to_string());\n     let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n     let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n     sleep(Duration::from_secs(2));\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1642769932814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n                 Ok(self.process(message)?)\n             }\n \n             Err(_) => {\n-                info!(\"waiting for a message....\");\n+                info!(\"{} waiting for a message....\", self.from());\n                 Err(ProcessError {\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n                 })\n"
                },
                {
                    "date": 1642770751221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,12 @@\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n+pub trait SendMessage<M> {\n+    fn sendTo(to: String, message: M) -> ProcessResult<()>\n+}\n+\n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n }\n@@ -186,9 +190,9 @@\n                 Ok(self.process(message)?)\n             }\n \n             Err(_) => {\n-                info!(\"{} waiting for a message....\", self.from());\n+                info!(\"{} is waiting for a message....\", self.from());\n                 Err(ProcessError {\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n                 })\n"
                },
                {
                    "date": 1642770771164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n pub trait SendMessage<M> {\n-    fn sendTo(to: String, message: M) -> ProcessResult<()>\n+    fn send_message_to(to: String, message: M) -> ProcessResult<()>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642770784639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n pub trait SendMessage<M> {\n-    fn send_message_to(to: String, message: M) -> ProcessResult<()>;\n+    fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n }\n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n"
                },
                {
                    "date": 1642770828863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,8 +210,12 @@\n         }\n     }\n }\n \n+impl SendMessage<Message> for Worker {\n+    \n+}\n+\n fn pong(from: String, receiver: String) -> ProcessResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n"
                },
                {
                    "date": 1642770834991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,11 @@\n     }\n }\n \n impl SendMessage<Message> for Worker {\n-    \n+    fn send_message_to(message: Message, to: String) -> ProcessResult<()> {\n+        todo!()\n+    }\n }\n \n fn pong(from: String, receiver: String) -> ProcessResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n"
                },
                {
                    "date": 1642770878181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,19 @@\n }\n \n impl SendMessage<Message> for Worker {\n     fn send_message_to(message: Message, to: String) -> ProcessResult<()> {\n-        todo!()\n+        let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n+    let ping = Message {\n+        command: Command::Ping,\n+        from: \"the_client\".to_string(),\n+        payload: vec![],\n+        ack: false,\n+        command_id: \"1\".to_string(),\n+    };\n+    let json = serde_json::to_string(&ping).unwrap();\n+    println!(\"Sending: {}\", json);\n+    let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     }\n }\n \n fn pong(from: String, receiver: String) -> ProcessResult<()> {\n"
                },
                {
                    "date": 1642770897644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,17 +211,17 @@\n     }\n }\n \n impl SendMessage<Message> for Worker {\n-    fn send_message_to(message: Message, to: String) -> ProcessResult<()> {\n+    fn send_message_to(&self, message: Message, to: String) -> ProcessResult<()> {\n         let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n-    let ping = Message {\n-        command: Command::Ping,\n-        from: \"the_client\".to_string(),\n-        payload: vec![],\n-        ack: false,\n-        command_id: \"1\".to_string(),\n-    };\n+        let ping = Message {\n+            command: Command::Ping,\n+            from: \"the_client\".to_string(),\n+            payload: vec![],\n+            ack: false,\n+            command_id: \"1\".to_string(),\n+        };\n     let json = serde_json::to_string(&ping).unwrap();\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n     }\n"
                },
                {
                    "date": 1642770926738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n     }\n }\n \n impl SendMessage<Message> for Worker {\n-    fn send_message_to(&self, message: Message, to: String) -> ProcessResult<()> {\n+    fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n         let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n         let ping = Message {\n             command: Command::Ping,\n             from: \"the_client\".to_string(),\n"
                },
                {
                    "date": 1642770940591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n }\n \n impl SendMessage<Message> for Worker {\n     fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n-        let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n+        let cmd_handler = WORKERS.lock().unwrap().get(destination).unwrap().clone();\n         let ping = Message {\n             command: Command::Ping,\n             from: \"the_client\".to_string(),\n             payload: vec![],\n"
                },
                {
                    "date": 1642770951173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,8 +223,9 @@\n         };\n     let json = serde_json::to_string(&ping).unwrap();\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+    Ok(())\n     }\n }\n \n fn pong(from: String, receiver: String) -> ProcessResult<()> {\n"
                },
                {
                    "date": 1642770956327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n }\n \n impl SendMessage<Message> for Worker {\n     fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n-        let cmd_handler = WORKERS.lock().unwrap().get(destination).unwrap().clone();\n+        let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();\n         let ping = Message {\n             command: Command::Ping,\n             from: \"the_client\".to_string(),\n             payload: vec![],\n"
                },
                {
                    "date": 1642770972476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,20 +212,13 @@\n }\n \n impl SendMessage<Message> for Worker {\n     fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n-        let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();\n-        let ping = Message {\n-            command: Command::Ping,\n-            from: \"the_client\".to_string(),\n-            payload: vec![],\n-            ack: false,\n-            command_id: \"1\".to_string(),\n-        };\n-    let json = serde_json::to_string(&ping).unwrap();\n-    println!(\"Sending: {}\", json);\n-    let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-    Ok(())\n+        let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n+        let json = serde_json::to_string(&ping).unwrap();\n+        println!(\"Sending: {}\", json);\n+        let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+        Ok(())\n     }\n }\n \n fn pong(from: String, receiver: String) -> ProcessResult<()> {\n"
                },
                {
                    "date": 1642770985369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n \n impl SendMessage<Message> for Worker {\n     fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n         let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n-        let json = serde_json::to_string(&ping).unwrap();\n+        let json = serde_json::to_string(&message).unwrap();\n         println!(\"Sending: {}\", json);\n         let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n         Ok(())\n     }\n"
                },
                {
                    "date": 1642771006015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n use model::{ProcessError, ProcessResult, Worker};\n+use serde::__private::de;\n \n use crate::model::{Command, Message, ProcessErrorType};\n \n lazy_static! {\n@@ -214,9 +215,9 @@\n impl SendMessage<Message> for Worker {\n     fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n         let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n         let json = serde_json::to_string(&message).unwrap();\n-        println!(\"Sending: {}\", json);\n+        info!(\"Sending: {} to {}\", json, &destination);\n         let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n         Ok(())\n     }\n }\n"
                },
                {
                    "date": 1642771087577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,6 +287,14 @@\n     let worker1 = Worker::new(\"worker1\".to_string());\n     let worker2 = Worker::new(\"worker2\".to_string());\n     let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n     let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n+    let ping = Message {\n+        command: Command::Ping,\n+        from: \"worker1\".to_string(),\n+        payload: vec![],\n+        ack: false,\n+        command_id: \"1\".to_string(),\n+    };\n+    Worker::send_message_to(ping, \"worker2\".to_string());\n     sleep(Duration::from_secs(2));\n }\n"
                },
                {
                    "date": 1642771102734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,7 +294,7 @@\n         payload: vec![],\n         ack: false,\n         command_id: \"1\".to_string(),\n     };\n-    Worker::send_message_to(ping, \"worker2\".to_string());\n+    let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n     sleep(Duration::from_secs(2));\n }\n"
                },
                {
                    "date": 1643028748043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,18 +110,9 @@\n \n     loop {\n         match processor.receive() {\n             Ok(in_message) => {\n-                match processor.process(in_message) {\n-                    Ok(_) => continue,\n-                    Err(err) => {\n-                        if ProcessErrorType::Continue == err.error_type {\n-                            continue;\n-                        } else {\n-                            break;\n-                        }\n-                    }\n-                };\n+                info!(\"message has been processed: {}\", in_message)\n             }\n             Err(err) => {\n                 if ProcessErrorType::Continue == err.error_type {\n                     continue;\n"
                },
                {
                    "date": 1643028759124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n \n     loop {\n         match processor.receive() {\n             Ok(in_message) => {\n-                info!(\"message has been processed: {}\", in_message)\n+                info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n                 if ProcessErrorType::Continue == err.error_type {\n                     continue;\n"
                },
                {
                    "date": 1643028806147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n #[macro_use]\n extern crate lazy_static;\n \n+use std::fmt::Debug;\n use std::sync::Mutex;\n use std::thread::sleep;\n use std::time::Duration;\n use std::{collections::HashMap, thread};\n@@ -37,9 +38,9 @@\n         Mutex::new(m)\n     };\n }\n \n-pub trait Processor<S, T> {\n+pub trait Processor<S, T::Debug> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n"
                },
                {
                    "date": 1643028831553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         Mutex::new(m)\n     };\n }\n \n-pub trait Processor<S, T::Debug> {\n+pub trait Processor<S, T:Debug> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n"
                },
                {
                    "date": 1643028837510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         Mutex::new(m)\n     };\n }\n \n-pub trait Processor<S, T:Debug> {\n+pub trait Processor<S, T: Debug> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n"
                },
                {
                    "date": 1643028872199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workders<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n+pub fn start_workders<S, T>(processor: Box<impl Processor<S, T: Debug>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match processor.receive() {\n"
                },
                {
                    "date": 1643028879960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workders<S, T>(processor: Box<impl Processor<S, T: Debug>>) -> AppResult<()> {\n+pub fn start_workders<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n     println!(\"Server is started...\");\n \n     loop {\n         match processor.receive() {\n"
                },
                {
                    "date": 1643028907092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workders<S, T>(processor: Box<impl Processor<S, T>>) -> AppResult<()> {\n+pub fn start_workders<S, T>(processor: Box<impl Processor<S, T: Debug>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match processor.receive() {\n"
                },
                {
                    "date": 1643028919166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \n     Ok(())\n }\n \n-pub fn start_workders<S, T>(processor: Box<impl Processor<S, T: Debug>>) -> AppResult<()>  {\n+pub fn start_workders<S, T: Debug>(processor: Box<impl Processor<S, T>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match processor.receive() {\n"
                },
                {
                    "date": 1643032122229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n         from: from.to_string(),\n         ack: false,\n         command: Command::Undefined,\n         payload: \"pong\".to_string().as_bytes().to_vec(),\n-        command_id: String::default(),\n+        correlation_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n@@ -264,9 +264,9 @@\n         command: Command::Ping,\n         from: \"the_client\".to_string(),\n         payload: vec![],\n         ack: false,\n-        command_id: \"1\".to_string(),\n+        correlation_id: \"1\".to_string(),\n     };\n     let json = serde_json::to_string(&ping).unwrap();\n     println!(\"Sending: {}\", json);\n     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n@@ -284,9 +284,9 @@\n         command: Command::Ping,\n         from: \"worker1\".to_string(),\n         payload: vec![],\n         ack: false,\n-        command_id: \"1\".to_string(),\n+        correlation_id: \"1\".to_string(),\n     };\n     let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n     sleep(Duration::from_secs(2));\n }\n"
                },
                {
                    "date": 1643032163134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,9 @@\n     let pong = Message {\n         from: from.to_string(),\n         ack: false,\n         command: Command::Undefined,\n-        payload: \"pong\".to_string().as_bytes().to_vec(),\n+        payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n"
                },
                {
                    "date": 1643032175278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n     let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n     let ping = Message {\n         command: Command::Ping,\n         from: \"the_client\".to_string(),\n-        payload: vec![],\n+        payload: None,\n         ack: false,\n         correlation_id: \"1\".to_string(),\n     };\n     let json = serde_json::to_string(&ping).unwrap();\n"
                },
                {
                    "date": 1643032185749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n     let _ok = start_worker(\"the_client\".to_string());\n     let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n     let ping = Message {\n         command: Command::Ping,\n-        from: \"the_client\".to_string(),\n+        from: Some(\"the_client\".to_string()),\n         payload: None,\n         ack: false,\n         correlation_id: \"1\".to_string(),\n     };\n"
                },
                {
                    "date": 1643032192128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n     let _ok = start_worker(\"the_client\".to_string());\n     let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n     let ping = Message {\n         command: Command::Ping,\n-        from: Some(\"the_client\".to_string()),\n+        from: \"the_client\".to_string(),\n         payload: None,\n         ack: false,\n         correlation_id: \"1\".to_string(),\n     };\n"
                },
                {
                    "date": 1643032207423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,9 @@\n     let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n     let ping = Message {\n         command: Command::Ping,\n         from: \"worker1\".to_string(),\n-        payload: vec![],\n+        payload: Some(vec![]),\n         ack: false,\n         correlation_id: \"1\".to_string(),\n     };\n     let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n"
                },
                {
                    "date": 1643032230659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,9 @@\n     let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n     let ping = Message {\n         command: Command::Ping,\n         from: \"worker1\".to_string(),\n-        payload: Some(vec![]),\n+        payload: None,\n         ack: false,\n         correlation_id: \"1\".to_string(),\n     };\n     let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n"
                },
                {
                    "date": 1643032266934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         }\n     };\n     let pong = Message {\n         from: from.to_string(),\n-        ack: false,\n+        ack: None,\n         command: Command::Undefined,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n     };\n"
                },
                {
                    "date": 1643032277106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n     let ping = Message {\n         command: Command::Ping,\n         from: \"the_client\".to_string(),\n         payload: None,\n-        ack: false,\n+        ack: None,\n         correlation_id: \"1\".to_string(),\n     };\n     let json = serde_json::to_string(&ping).unwrap();\n     println!(\"Sending: {}\", json);\n"
                },
                {
                    "date": 1643032302211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n     let ping = Message {\n         command: Command::Ping,\n         from: \"worker1\".to_string(),\n         payload: None,\n-        ack: false,\n+        ack: None,\n         correlation_id: \"1\".to_string(),\n     };\n     let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n     sleep(Duration::from_secs(2));\n"
                },
                {
                    "date": 1643033703723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n #[macro_use]\n extern crate lazy_static;\n \n use std::fmt::Debug;\n+use std::ptr::NonNull;\n use std::sync::Mutex;\n use std::thread::sleep;\n use std::time::Duration;\n use std::{collections::HashMap, thread};\n@@ -87,14 +88,20 @@\n \n                 println!(\"message is: {}\", message);\n \n                 match message.command {\n-                    Command::Stop => break,\n-                    Command::Ping => {\n-                        println!(\"do pong\");\n-                        pong(registered_name.to_string().clone(), message.from).unwrap()\n-                    }\n-                    _ => break,\n+                    Some(cmd) {\n+                        match cmd {\n+                            \n+                        Command::Stop => break,\n+                        Command::Ping => {\n+                            println!(\"do pong\");\n+                            pong(registered_name.to_string().clone(), message.from).unwrap()\n+                        }\n+                        _ => break,\n+                        }\n+                    },\n+                    None => continue\n                 }\n             }\n             Err(_) => {\n                 println!(\"Hello from the server.....\");\n"
                },
                {
                    "date": 1643038225608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,18 +155,22 @@\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n-        match message.command {\n-            Command::Stop => {\n-                return Err(ProcessError {\n-                    reason: None,\n-                    error_type: ProcessErrorType::Break,\n-                })\n-            }\n-            Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n-            cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n-        };\n+        if message.command.is_some() {\n+            let command = message.command.unwrap();\n+            match message.command {\n+                Command::Stop => {\n+                    return Err(ProcessError {\n+                        reason: None,\n+                        error_type: ProcessErrorType::Break,\n+                    })\n+                }\n+                Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n+                cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n+            };\n+        }\n+       \n         Ok(orig_message)\n     }\n \n     fn from(&self) -> String {\n"
                },
                {
                    "date": 1643038231393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n-            match message.command {\n+            match command {\n                 Command::Stop => {\n                     return Err(ProcessError {\n                         reason: None,\n                         error_type: ProcessErrorType::Break,\n"
                },
                {
                    "date": 1643038339093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,9 @@\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n+        let message_type = message.message_type;\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n             match command {\n                 Command::Stop => {\n@@ -167,8 +168,10 @@\n                 }\n                 Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n                 cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n             };\n+        } else {\n+\n         }\n        \n         Ok(orig_message)\n     }\n"
                },
                {
                    "date": 1643040655287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,12 @@\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n+pub trait TRequest {\n+    fn command(&self) -> Command;\n+}\n+\n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n }\n \n@@ -152,12 +156,18 @@\n         }\n     }\n }\n \n+\n+\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n+        match message_type {\n+            model::MessageType::Request => process_request(),\n+            _ => process_response(),\n+        }\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n             match command {\n                 Command::Stop => {\n"
                },
                {
                    "date": 1643040675507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n }\n \n pub trait TRequest {\n     fn command(&self) -> Command;\n+    fn params(&self) -> Vec<String>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643040721037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n use common_libs::configure_log4rs;\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n-use model::{ProcessError, ProcessResult, Worker};\n+use model::{ProcessError, ProcessResult, Worker, Status};\n use serde::__private::de;\n \n use crate::model::{Command, Message, ProcessErrorType};\n \n@@ -51,8 +51,13 @@\n     fn command(&self) -> Command;\n     fn params(&self) -> Vec<String>;\n }\n \n+pub trait TResponse {\n+    fn status(&self) -> Status;\n+    fn params(&self) -> Vec<String>;\n+}\n+\n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n }\n \n"
                },
                {
                    "date": 1643040778215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,15 @@\n }\n \n pub trait TResponse {\n     fn status(&self) -> Status;\n-    fn params(&self) -> Vec<String>;\n }\n \n+pub trait TMessage {\n+    fn from() -> String;\n+    fn payload() -> Option<Vec<u8>\n+}\n+\n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n }\n \n"
                },
                {
                    "date": 1643040793531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n }\n \n pub trait TMessage {\n     fn from() -> String;\n-    fn payload() -> Option<Vec<u8>\n+    fn payload() -> Option<Vec<u8>>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643040809593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n \n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n+    fn correlation_id() -> String;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643040868987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n \n pub trait TRequest {\n     fn command(&self) -> Command;\n     fn params(&self) -> Vec<String>;\n+    \n }\n \n pub trait TResponse {\n     fn status(&self) -> Status;\n"
                },
                {
                    "date": 1643040935156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,12 +46,13 @@\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n+\n+\n pub trait TRequest {\n     fn command(&self) -> Command;\n-    fn params(&self) -> Vec<String>;\n-    \n+    fn params(&self) -> Vec<String>;    \n }\n \n pub trait TResponse {\n     fn status(&self) -> Status;\n@@ -60,8 +61,9 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n+    fn request() -> Option<TRequest>\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643040940779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n-    fn request() -> Option<TRequest>\n+    fn request() -> Option<TRequest>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643040949566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n-    fn request() -> Option<TRequest>;\n+    fn request() -> Option<dyn TRequest>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643040970922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n-    fn request() -> Option<dyn TRequest>;\n+    fn request() -> Option<dyn TRequest + Sized>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643040983645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n-    fn request() -> Option<dyn TRequest + Sized>;\n+    fn request() -> Option<TRequest>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643041012193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n-    fn request() -> Option<TRequest>;\n+    fn request() -> Option<dyn TRequest>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643041029600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n-    fn request() -> Option<dyn TRequest>;\n+    fn request() -> Option<Box<dyn TRequest>>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643041045094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n     fn request() -> Option<Box<dyn TRequest>>;\n+    fn response() -> Option<Box<dyn TResponse>>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643041077299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,10 +61,8 @@\n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n     fn correlation_id() -> String;\n-    fn request() -> Option<Box<dyn TRequest>>;\n-    fn response() -> Option<Box<dyn TResponse>>;\n }\n \n pub trait SendMessage<M> {\n     fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n"
                },
                {
                    "date": 1643041157566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,10 +169,10 @@\n         }\n     }\n }\n \n+fn process_request<T: TRequest + TMessage> (request: T) -> T {}\n \n-\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n"
                },
                {
                    "date": 1643041177805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,10 +169,12 @@\n         }\n     }\n }\n \n-fn process_request<T: TRequest + TMessage> (request: T) -> T {}\n+fn process_request<T: dyn TRequest + dyn TMessage> (request: T) -> T {\n \n+}\n+\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n"
                },
                {
                    "date": 1643041186490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         }\n     }\n }\n \n-fn process_request<T: dyn TRequest + dyn TMessage> (request: T) -> T {\n+fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643041232940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,8 +173,12 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n+fn process_response<T: TResponse + TMessage> (request: T) -> T {\n+\n+}\n+\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n"
                },
                {
                    "date": 1643041254508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n-fn process_response<T: TResponse + TMessage> (request: T) -> T {\n+fn process_response<T> (request: T) -> T where T: : TResponse + TMessage{\n \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643041262164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,11 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n-fn process_response<T> (request: T) -> T where T: : TResponse + TMessage{\n+fn process_response<T> (request: T) -> T \n+    where T: TResponse + TMessage\n+    {\n \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643041267511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n }\n \n fn process_response<T> (request: T) -> T \n     where T: TResponse + TMessage\n-    {\n+{\n \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643041273862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n-fn process_response<T> (request: T) -> T \n+fn process_response<dyn T> (request: T) -> T \n     where T: TResponse + TMessage\n {\n \n }\n"
                },
                {
                    "date": 1643041281368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n-fn process_response<dyn T> (request: T) -> T \n+fn process_response<T> (request: dyn T) -> T \n     where T: TResponse + TMessage\n {\n \n }\n"
                },
                {
                    "date": 1643041289940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n-fn process_response<T> (request: dyn T) -> T \n+fn process_response<T> (request: T) -> T \n     where T: TResponse + TMessage\n {\n \n }\n"
                },
                {
                    "date": 1643041302545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,10 +173,10 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n \n }\n \n-fn process_response<T> (request: T) -> T \n-    where T: TResponse + TMessage\n+fn process_response<R> (request: R) -> R\n+    where R: TResponse + TMessage\n {\n \n }\n \n"
                },
                {
                    "date": 1643042743903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n     }\n }\n \n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n-\n+    request\n }\n \n fn process_response<R> (request: R) -> R\n     where R: TResponse + TMessage\n"
                },
                {
                    "date": 1643042804511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,12 +173,12 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n     request\n }\n \n-fn process_response<R> (request: R) -> R\n+fn process_response<R> (response: R) -> R\n     where R: TResponse + TMessage\n {\n-\n+    response\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643042814195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,10 +173,10 @@\n fn process_request<T: TRequest + TMessage> (request: T) -> T {\n     request\n }\n \n-fn process_response<R> (response: R) -> R\n-    where R: TResponse + TMessage\n+fn process_response<Res> (response: Res) -> Res\n+    where Res: TResponse + TMessage\n {\n     response\n }\n \n"
                },
                {
                    "date": 1643042826711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         }\n     }\n }\n \n-fn process_request<T: TRequest + TMessage> (request: T) -> T {\n+fn process_request<Req: TRequest + TMessage> (request: Req) -> Req {\n     request\n }\n \n fn process_response<Res> (response: Res) -> Res\n"
                },
                {
                    "date": 1643042894353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,11 +176,16 @@\n \n fn process_response<Res> (response: Res) -> Res\n     where Res: TResponse + TMessage\n {\n+\n     response\n }\n \n+impl MessageProcessor<Rhs: Self> {\n+    \n+}\n+\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n"
                },
                {
                    "date": 1643042903148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,10 +180,10 @@\n \n     response\n }\n \n-impl MessageProcessor<Rhs: Self> {\n-    \n+trait MessageProcessor<Rhs: Self> {\n+\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643042913814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n \n     response\n }\n \n-trait MessageProcessor<Rhs: Self> {\n+trait MessageProcessor<Rhs=Self> {\n \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643042931064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n     response\n }\n \n trait MessageProcessor<Rhs=Self> {\n-\n+    type: Output;\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643042948443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,10 @@\n }\n \n trait MessageProcessor<Rhs=Self> {\n     type: Output;\n+\n+    process(self, Rhs) -> Output\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643042958288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n \n trait MessageProcessor<Rhs=Self> {\n     type: Output;\n \n-    process(self, Rhs) -> Output\n+    process(self, Rhs) -> Self::Output;\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643042969011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n \n trait MessageProcessor<Rhs=Self> {\n     type: Output;\n \n-    process(self, Rhs) -> Self::Output;\n+    process(self, rhs: Rhs) -> Self::Output  ;\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643042974331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n \n trait MessageProcessor<Rhs=Self> {\n     type: Output;\n \n-    process(self, rhs: Rhs) -> Self::Output  ;\n+    process(self, rhs: Rhs) -> Self::Output;\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643042979719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n     response\n }\n \n trait MessageProcessor<Rhs=Self> {\n-    type: Output;\n+    type Output;\n \n     process(self, rhs: Rhs) -> Self::Output;\n }\n \n"
                },
                {
                    "date": 1643042991682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n \n trait MessageProcessor<Rhs=Self> {\n     type Output;\n \n-    process(self, rhs: Rhs) -> Self::Output;\n+    fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643043055868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,8 +186,12 @@\n \n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n+impl MessageProcessor<TMessage + TRequest> for Message{\n+    \n+}\n+\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n"
                },
                {
                    "date": 1643043105480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,10 +186,10 @@\n \n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n-impl MessageProcessor<TMessage + TRequest> for Message{\n-    \n+impl MessageProcessor<TRequest> for Message{\n+\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643043113350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n \n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n-impl MessageProcessor<TRequest> for Message{\n+impl MessageProcessor<dyn TRequest> for Message{\n \n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643043121928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,13 @@\n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n impl MessageProcessor<dyn TRequest> for Message{\n+    type Output;\n \n+    fn process(self, rhs: dyn TRequest) -> Self::Output {\n+        todo!()\n+    }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n"
                },
                {
                    "date": 1643043137105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n \n impl MessageProcessor<dyn TRequest> for Message{\n     type Output;\n \n-    fn process(self, rhs: dyn TRequest) -> Self::Output {\n+    fn process(self, rhs: dyn TRequest) -> Message {\n         todo!()\n     }\n }\n \n"
                },
                {
                    "date": 1643043149728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n impl MessageProcessor<dyn TRequest> for Message{\n-    type Output;\n+    type Output = Message;\n \n     fn process(self, rhs: dyn TRequest) -> Message {\n         todo!()\n     }\n"
                },
                {
                    "date": 1643043155867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n \n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n-impl MessageProcessor<dyn TRequest> for Message{\n+impl MessageProcessor<TRequest> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: dyn TRequest) -> Message {\n         todo!()\n"
                },
                {
                    "date": 1643043166769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n \n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n-impl MessageProcessor<TRequest> for Message{\n+impl MessageProcessor<dyn TRequest> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: dyn TRequest) -> Message {\n         todo!()\n"
                },
                {
                    "date": 1643043188648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n \n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n-impl MessageProcessor<dyn TRequest> for Message{\n+impl MessageProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: dyn TRequest) -> Message {\n         todo!()\n"
                },
                {
                    "date": 1643043199857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n \n impl MessageProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n-    fn process(self, rhs: dyn TRequest) -> Message {\n+    fn process(self, rhs: Box<dyn TRequest>) -> Message {\n         todo!()\n     }\n }\n \n"
                },
                {
                    "date": 1643043231022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,15 +180,15 @@\n \n     response\n }\n \n-trait MessageProcessor<Rhs=Self> {\n+trait RequestProcessor<Rhs=Self> {\n     type Output;\n \n     fn process(self, rhs: Rhs) -> Self::Output;\n }\n \n-impl MessageProcessor<Box<dyn TRequest>> for Message{\n+impl RequestProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TRequest>) -> Message {\n         todo!()\n"
                },
                {
                    "date": 1643043947130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n \n trait RequestProcessor<Rhs=Self> {\n     type Output;\n \n-    fn process(self, rhs: Rhs) -> Self::Output;\n+    fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n impl RequestProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n"
                },
                {
                    "date": 1643043954304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n \n impl RequestProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TRequest>) -> Message {\n+    fn process(self, rhs: Box<dyn TRequest>) -> Option<Message> {\n         todo!()\n     }\n }\n \n"
                },
                {
                    "date": 1643043972029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,8 +194,16 @@\n         todo!()\n     }\n }\n \n+impl RequestProcessor<Box<dyn TResponse>> for Message{\n+    type Output = Message;\n+\n+    fn process(self, rhs: Box<dyn TResponse>) -> Option<Message> {\n+        todo!()\n+    }\n+}\n+\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n"
                },
                {
                    "date": 1643043996233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,23 +180,23 @@\n \n     response\n }\n \n-trait RequestProcessor<Rhs=Self> {\n+trait ResponseProcessor<Rhs=Self> {\n     type Output;\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n-impl RequestProcessor<Box<dyn TRequest>> for Message{\n+impl ResponseProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TRequest>) -> Option<Message> {\n         todo!()\n     }\n }\n \n-impl RequestProcessor<Box<dyn TResponse>> for Message{\n+impl ResponseProcessor<Box<dyn TResponse>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> Option<Message> {\n         todo!()\n"
                },
                {
                    "date": 1643044026069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n-impl ResponseProcessor<Box<dyn TRequest>> for Message{\n+impl RequestProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TRequest>) -> Option<Message> {\n         todo!()\n"
                },
                {
                    "date": 1643044045958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n \n     response\n }\n \n-trait ResponseProcessor<Rhs=Self> {\n+trait MessageProcessor<Rhs=Self> {\n     type Output;\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n"
                },
                {
                    "date": 1643044055674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,17 +186,17 @@\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n-impl RequestProcessor<Box<dyn TRequest>> for Message{\n+impl MessageProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TRequest>) -> Option<Message> {\n         todo!()\n     }\n }\n \n-impl ResponseProcessor<Box<dyn TResponse>> for Message{\n+impl MessageProcessor<Box<dyn TResponse>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> Option<Message> {\n         todo!()\n"
                },
                {
                    "date": 1643044080956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n impl MessageProcessor<Box<dyn TResponse>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> Option<Message> {\n-        todo!()\n+        None\n     }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643044102259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,10 +189,10 @@\n \n impl MessageProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TRequest>) -> Option<Message> {\n-        todo!()\n+    fn process(self, message: Box<dyn TRequest>) -> Option<Message> {\n+        Some(message)\n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n"
                },
                {
                    "date": 1643044283278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,10 +189,10 @@\n \n impl MessageProcessor<Box<dyn TRequest>> for Message{\n     type Output = Message;\n \n-    fn process(self, message: Box<dyn TRequest>) -> Option<Message> {\n-        Some(message)\n+    fn process(self, mess: Box<dyn TRequest>) -> Option<Message> {\n+        None\n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n"
                },
                {
                    "date": 1643044385536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,10 @@\n \n \n pub trait TRequest {\n     fn command(&self) -> Command;\n-    fn params(&self) -> Vec<String>;    \n+    fn params(&self) -> Vec<String>;  \n+    fn payload(&self) -> Vec<u8>;\n }\n \n pub trait TResponse {\n     fn status(&self) -> Status;\n"
                },
                {
                    "date": 1643044424752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,12 @@\n \n \n \n pub trait TRequest {\n+    fn from() -> String;\n     fn command(&self) -> Command;\n     fn params(&self) -> Vec<String>;  \n-    fn payload(&self) -> Vec<u8>;\n+    fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n     fn status(&self) -> Status;\n"
                },
                {
                    "date": 1643044439377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n \n \n pub trait TRequest {\n-    fn from() -> String;\n+    fn from(&self) -> String;\n     fn command(&self) -> Command;\n     fn params(&self) -> Vec<String>;  \n     fn payload(&self) -> Vec<u8>;    \n }\n"
                },
                {
                    "date": 1643044501518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \n pub trait TRequest {\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn params(&self) -> Vec<String>;  \n+    fn params(&self) -> Vec<(String, String)>;  \n     fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n"
                },
                {
                    "date": 1643044515860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \n pub trait TRequest {\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn params(&self) -> Vec<(String, String)>;  \n+    fn params(&self) -> Vec<String>;  \n     fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n"
                },
                {
                    "date": 1643044533484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n pub trait TRequest {\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n     fn params(&self) -> Vec<String>;  \n+    fn headers(&self) -> Vec<(String, String)>;  \n     fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n"
                },
                {
                    "date": 1643044545655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,8 @@\n \n pub trait TRequest {\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn params(&self) -> Vec<String>;  \n-    fn headers(&self) -> Vec<(String, String)>;  \n     fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n"
                },
                {
                    "date": 1643044655661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n }\n \n pub trait TResponse {\n     fn status(&self) -> Status;\n+    fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TMessage {\n     fn from() -> String;\n"
                },
                {
                    "date": 1643044685577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,11 @@\n     fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n+    fn correlation_id() -> String;\n     fn status(&self) -> Status;\n-    fn payload(&self) -> Vec<u8>;    \n+    fn payload(&self) -> Vec<u8>;\n }\n \n pub trait TMessage {\n     fn from() -> String;\n"
                },
                {
                    "date": 1643044696207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n-    fn correlation_id() -> String;\n+    fn correlation_id(&self) -> String;\n     fn status(&self) -> Status;\n     fn payload(&self) -> Vec<u8>;\n }\n \n"
                },
                {
                    "date": 1643044762062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n \n \n \n pub trait TRequest {\n+    fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n     fn payload(&self) -> Vec<u8>;    \n }\n"
                },
                {
                    "date": 1643044828829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n pub trait TRequest {\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn payload(&self) -> Vec<u8>;    \n+    fn payload(&self) -> Option<Vec<u8>>;    \n }\n \n pub trait TResponse {\n     fn correlation_id(&self) -> String;\n"
                },
                {
                    "date": 1643044843741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n pub trait TRequest {\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn payload(&self) -> Option<Vec<u8>>;    \n+    fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n     fn correlation_id(&self) -> String;\n"
                },
                {
                    "date": 1643044897406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,15 +52,15 @@\n pub trait TRequest {\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn payload(&self) -> Vec<u8>;    \n+    fn payload(&self) -> Option<Vec<u8>>;    \n }\n \n pub trait TResponse {\n     fn correlation_id(&self) -> String;\n     fn status(&self) -> Status;\n-    fn payload(&self) -> Vec<u8>;\n+    fn payload(&self) -> Option<Vec<u8>>;\n }\n \n pub trait TMessage {\n     fn from() -> String;\n"
                },
                {
                    "date": 1643044920151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n pub trait TRequest {\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn payload(&self) -> Option<Vec<u8>>;    \n+    fn payload(&self) -> Vec<u8>;    \n }\n \n pub trait TResponse {\n     fn correlation_id(&self) -> String;\n"
                },
                {
                    "date": 1643045258981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n pub trait TRequest {\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn payload(&self) -> Vec<u8>;    \n+    fn payload(&self) -> Option<Vec<u8>>;    \n }\n \n pub trait TResponse {\n     fn correlation_id(&self) -> String;\n@@ -190,12 +190,12 @@\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n-impl MessageProcessor<Box<dyn TRequest>> for Message{\n-    type Output = Message;\n+impl MessageProcessor<Box<dyn TRequest>> for TResponse{\n+    type Output = TResponse;\n \n-    fn process(self, mess: Box<dyn TRequest>) -> Option<Message> {\n+    fn process(self, mess: Box<dyn TRequest>) -> Option<TResponse> {\n         None\n     }\n }\n \n"
                },
                {
                    "date": 1643045271922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n-impl MessageProcessor<Box<dyn TRequest>> for TResponse{\n+impl MessageProcessor<Box<dyn TRequest>> for dyn TResponse{\n     type Output = TResponse;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<TResponse> {\n         None\n"
                },
                {
                    "date": 1643045278427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n impl MessageProcessor<Box<dyn TRequest>> for dyn TResponse{\n-    type Output = TResponse;\n+    type Output = dyn TResponse;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<TResponse> {\n         None\n     }\n"
                },
                {
                    "date": 1643045286281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n \n impl MessageProcessor<Box<dyn TRequest>> for dyn TResponse{\n     type Output = dyn TResponse;\n \n-    fn process(self, mess: Box<dyn TRequest>) -> Option<TResponse> {\n+    fn process(self, mess: Box<dyn TRequest>) -> Option<dyn TResponse> {\n         None\n     }\n }\n \n"
                },
                {
                    "date": 1643045302912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n \n impl MessageProcessor<Box<dyn TRequest>> for dyn TResponse{\n     type Output = dyn TResponse;\n \n-    fn process(self, mess: Box<dyn TRequest>) -> Option<dyn TResponse> {\n+    fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         None\n     }\n }\n \n"
                },
                {
                    "date": 1643045314025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n-impl MessageProcessor<Box<dyn TRequest>> for dyn TResponse{\n+impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse>{\n     type Output = dyn TResponse;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         None\n"
                },
                {
                    "date": 1643045322620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,10 +190,10 @@\n \n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n-impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse>{\n-    type Output = dyn TResponse;\n+impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n+    type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         None\n     }\n"
                },
                {
                    "date": 1643045409970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,11 @@\n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n-        None\n+        match mess.command() {\n+            \n+        }\n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n"
                },
                {
                    "date": 1643045415905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,14 @@\n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         match mess.command() {\n-            \n+            Command::Stop => todo!(),\n+            Command::Ping => todo!(),\n+            Command::Status => todo!(),\n+            Command::Execute => todo!(),\n+            Command::Pause => todo!(),\n+            Command::Undefined => todo!(),\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1643045435772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,8 +194,9 @@\n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n+        let command = mess.command();\n         match mess.command() {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n             Command::Status => todo!(),\n"
                },
                {
                    "date": 1643045473102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,8 @@\n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n-        let command = mess.command();\n         match mess.command() {\n             Command::Stop => todo!(),\n             Command::Ping => todo!(),\n             Command::Status => todo!(),\n"
                },
                {
                    "date": 1643045481772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,8 +191,9 @@\n     fn process(self, rhs: Rhs) -> Option<Self::Output>;\n }\n \n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n+    \n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         match mess.command() {\n"
                },
                {
                    "date": 1643045708617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         match mess.command() {\n             Command::Stop => todo!(),\n-            Command::Ping => todo!(),\n+            Command::Ping => pong(, receiver),\n             Command::Status => todo!(),\n             Command::Execute => todo!(),\n             Command::Pause => todo!(),\n             Command::Undefined => todo!(),\n"
                },
                {
                    "date": 1643045747972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         match mess.command() {\n             Command::Stop => todo!(),\n-            Command::Ping => pong(, receiver),\n+            Command::Ping => pong(mess.from()),\n             Command::Status => todo!(),\n             Command::Execute => todo!(),\n             Command::Pause => todo!(),\n             Command::Undefined => todo!(),\n"
                },
                {
                    "date": 1643045796516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,12 +195,13 @@\n     \n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n+        let reply_back_to = mess.from();\n         match mess.command() {\n             Command::Stop => todo!(),\n             Command::Ping => pong(mess.from()),\n-            Command::Status => todo!(),\n+            Command::Status => status(),\n             Command::Execute => todo!(),\n             Command::Pause => todo!(),\n             Command::Undefined => todo!(),\n         }\n"
                },
                {
                    "date": 1643045806265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,10 +198,10 @@\n     fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n         match mess.command() {\n             Command::Stop => todo!(),\n-            Command::Ping => pong(mess.from()),\n-            Command::Status => status(),\n+            Command::Ping => pong(reply_back_to),\n+            Command::Status => status(reply_back_to),\n             Command::Execute => todo!(),\n             Command::Pause => todo!(),\n             Command::Undefined => todo!(),\n         }\n"
                },
                {
                    "date": 1643046166785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n use common_libs::configure_log4rs;\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n-use model::{ProcessError, ProcessResult, Worker, Status};\n+use model::{ProcessError, ProcessResult, Worker, Status, Response};\n use serde::__private::de;\n \n use crate::model::{Command, Message, ProcessErrorType};\n \n@@ -187,9 +187,9 @@\n \n trait MessageProcessor<Rhs=Self> {\n     type Output;\n \n-    fn process(self, rhs: Rhs) -> Option<Self::Output>;\n+    fn process(self, rhs: Rhs) -> Response<Self::Output>;\n }\n \n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n     \n"
                },
                {
                    "date": 1643046207569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,16 +187,16 @@\n \n trait MessageProcessor<Rhs=Self> {\n     type Output;\n \n-    fn process(self, rhs: Rhs) -> Response<Self::Output>;\n+    fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n     \n     type Output = Box<dyn TResponse>;\n \n-    fn process(self, mess: Box<dyn TRequest>) -> Option<Box<dyn TResponse>> {\n+    fn process(self, mess: Box<dyn TRequest>) -> <Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n         match mess.command() {\n             Command::Stop => todo!(),\n             Command::Ping => pong(reply_back_to),\n"
                },
                {
                    "date": 1643046225247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n     \n     type Output = Box<dyn TResponse>;\n \n-    fn process(self, mess: Box<dyn TRequest>) -> <Box<dyn TResponse>> {\n+    fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n         match mess.command() {\n             Command::Stop => todo!(),\n             Command::Ping => pong(reply_back_to),\n"
                },
                {
                    "date": 1643046231331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> Option<Message> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Message> {\n         None\n     }\n }\n \n"
                },
                {
                    "date": 1643046258552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,11 @@\n impl MessageProcessor<Box<dyn TResponse>> for Message{\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Message> {\n-        None\n+        Err(ProcessError{\n+            \n+        })\n     }\n }\n \n impl Processor<Vec<u8>, Message> for Worker {\n"
                },
                {
                    "date": 1643046266693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,10 @@\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Message> {\n         Err(ProcessError{\n-            \n+            reason: todo!(),\n+            error_type: todo!(),\n         })\n     }\n }\n \n"
                },
                {
                    "date": 1643097909826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \n \n pub trait TRequest {\n     fn correlation_id(&self) -> String;\n-    fn from(&self) -> String;\n+    fn from(&self) -> String; \n     fn command(&self) -> Command;\n     fn payload(&self) -> Option<Vec<u8>>;    \n }\n \n@@ -309,9 +309,9 @@\n             });\n         }\n     };\n     let pong = Message {\n-        from: from.to_string(),\n+        from: None\n         ack: None,\n         command: Command::Undefined,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n"
                },
                {
                    "date": 1643097927553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,11 +309,11 @@\n             });\n         }\n     };\n     let pong = Message {\n-        from: None\n+        from: None,\n         ack: None,\n-        command: Command::Undefined,\n+        command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n"
                },
                {
                    "date": 1643097941466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,8 +314,10 @@\n         ack: None,\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n+        message_type: Response,\n+        status: todo!(),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n"
                },
                {
                    "date": 1643097967163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,9 +315,9 @@\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n         message_type: Response,\n-        status: todo!(),\n+        status: Status::Ok,\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n"
                },
                {
                    "date": 1643097975535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n         ack: None,\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n-        message_type: Response,\n+        message_type: Response { from: val, status: val, payload: val, command_id: val },\n         status: Status::Ok,\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n"
                },
                {
                    "date": 1643097985984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n         ack: None,\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n-        message_type: Response { from: val, status: val, payload: val, command_id: val },\n+        message_type: MessageType::Request,\n         status: Status::Ok,\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n"
                },
                {
                    "date": 1643097993166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n use log::{error, info};\n use model::{ProcessError, ProcessResult, Worker, Status, Response};\n use serde::__private::de;\n \n-use crate::model::{Command, Message, ProcessErrorType};\n+use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n lazy_static! {\n     static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n"
                },
                {
                    "date": 1643098043562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n use common_libs::configure_log4rs;\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n-use model::{ProcessError, ProcessResult, Worker, Status, Response};\n-use serde::__private::de;\n+use model::{ProcessError, ProcessResult, Worker};\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n lazy_static! {\n"
                },
                {
                    "date": 1643098049248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n use common_libs::configure_log4rs;\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n-use model::{ProcessError, ProcessResult, Worker};\n+use model::{ProcessError, ProcessResult, Worker, Status};\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n lazy_static! {\n"
                },
                {
                    "date": 1643098091063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n         message_type: MessageType::Request,\n-        status: Status::Ok,\n+        status: Some(Status::Ok),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n"
                },
                {
                    "date": 1643098121837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,9 +296,9 @@\n         Ok(())\n     }\n }\n \n-fn pong(from: String, receiver: String) -> ProcessResult<()> {\n+fn pong(receiver: String) -> ProcessResult<()> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n"
                },
                {
                    "date": 1643098338996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,14 +196,14 @@\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n         match mess.command() {\n-            Command::Stop => todo!(),\n+            Command::Stop => Err(ProcessError{\n+                reason: None,\n+                error_type::ProcessErrorType::Break,\n+            }),\n             Command::Ping => pong(reply_back_to),\n-            Command::Status => status(reply_back_to),\n-            Command::Execute => todo!(),\n-            Command::Pause => todo!(),\n-            Command::Undefined => todo!(),\n+            _ ,\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1643098391271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,8 +203,9 @@\n             }),\n             Command::Ping => pong(reply_back_to),\n             _ ,\n         }\n+        Ok(Box::new(mess))\n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n"
                },
                {
                    "date": 1643098403146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n                 error_type::ProcessErrorType::Break,\n             }),\n             Command::Ping => pong(reply_back_to),\n             _ ,\n-        }\n+        };\n         Ok(Box::new(mess))\n     }\n }\n \n"
                },
                {
                    "date": 1643098425593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,14 +196,17 @@\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n         match mess.command() {\n-            Command::Stop => Err(ProcessError{\n+            Command::Stop => return Err(ProcessError{\n                 reason: None,\n                 error_type::ProcessErrorType::Break,\n             }),\n             Command::Ping => pong(reply_back_to),\n-            _ ,\n+            _  => Err(ProcessError{\n+                reason: None,\n+                error_type::ProcessErrorType::Break,\n+            }),\n         };\n         Ok(Box::new(mess))\n     }\n }\n"
                },
                {
                    "date": 1643098437491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,12 +196,12 @@\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n         match mess.command() {\n-            Command::Stop => return Err(ProcessError{\n+            Command::Stop => {return Err(ProcessError{\n                 reason: None,\n                 error_type::ProcessErrorType::Break,\n-            }),\n+            });}\n             Command::Ping => pong(reply_back_to),\n             _  => Err(ProcessError{\n                 reason: None,\n                 error_type::ProcessErrorType::Break,\n"
                },
                {
                    "date": 1643098446215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n                 reason: None,\n                 error_type::ProcessErrorType::Break,\n             });}\n             Command::Ping => pong(reply_back_to),\n-            _  => Err(ProcessError{\n+            _  => return Err(ProcessError{\n                 reason: None,\n                 error_type::ProcessErrorType::Break,\n             }),\n         };\n"
                },
                {
                    "date": 1643098457557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,13 +200,13 @@\n             Command::Stop => {return Err(ProcessError{\n                 reason: None,\n                 error_type::ProcessErrorType::Break,\n             });}\n-            Command::Ping => pong(reply_back_to),\n+            Command::Ping => {pong(reply_back_to),\n             _  => return Err(ProcessError{\n                 reason: None,\n                 error_type::ProcessErrorType::Break,\n-            }),\n+            })}\n         };\n         Ok(Box::new(mess))\n     }\n }\n"
                },
                {
                    "date": 1643098492686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,14 +198,14 @@\n         let reply_back_to = mess.from();\n         match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n                 reason: None,\n-                error_type::ProcessErrorType::Break,\n+                error_type: ProcessErrorType::Break,\n             });}\n             Command::Ping => {pong(reply_back_to),\n             _  => return Err(ProcessError{\n                 reason: None,\n-                error_type::ProcessErrorType::Break,\n+                error_type:ProcessErrorType::Continue,\n             })}\n         };\n         Ok(Box::new(mess))\n     }\n"
                },
                {
                    "date": 1643098500375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             });}\n             Command::Ping => {pong(reply_back_to),\n-            _  => return Err(ProcessError{\n+            _  => {return Err(ProcessError{\n                 reason: None,\n                 error_type:ProcessErrorType::Continue,\n             })}\n         };\n"
                },
                {
                    "date": 1643098505867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n             _  => {return Err(ProcessError{\n                 reason: None,\n                 error_type:ProcessErrorType::Continue,\n             })}\n-        };\n+        }\n         Ok(Box::new(mess))\n     }\n }\n \n"
                },
                {
                    "date": 1643098517980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,14 +200,14 @@\n             Command::Stop => {return Err(ProcessError{\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             });}\n-            Command::Ping => {pong(reply_back_to),\n+            Command::Ping => {pong(reply_back_to)}\n             _  => {return Err(ProcessError{\n                 reason: None,\n                 error_type:ProcessErrorType::Continue,\n             })}\n-        }\n+        };\n         Ok(Box::new(mess))\n     }\n }\n \n"
                },
                {
                    "date": 1643098528247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n                 reason: None,\n                 error_type:ProcessErrorType::Continue,\n             })}\n         };\n-        Ok(Box::new(mess))\n+        Ok(mess)\n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n"
                },
                {
                    "date": 1643098741570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n         Ok(())\n     }\n }\n \n-fn pong(receiver: String) -> ProcessResult<()> {\n+fn pong(receiver: String) -> ProcessResult<Box<dyn TResponse>> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n"
                },
                {
                    "date": 1643099063808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,9 +324,9 @@\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n \n-    Ok(())\n+    Ok(Box::new(pong))\n }\n \n #[test]\n fn start_server_test() {\n"
                },
                {
                    "date": 1643099113370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n         message_type: MessageType::Request,\n-        status: Some(Status::Ok),\n+        status: Some(Status::InProgress),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n"
                },
                {
                    "date": 1643099255449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n         ack: None,\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n-        message_type: MessageType::Request,\n+        message_type: MessageType::Response,\n         status: Some(Status::InProgress),\n     };\n     let json = serde_json::to_string(&pong).unwrap();\n     println!(\"sending pong command: {}\", json);\n"
                },
                {
                    "date": 1643099290348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         }\n     };\n     let pong = Message {\n         from: None,\n-        ack: None,\n+        ack: Some(true),\n         command: None,\n         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n         correlation_id: String::default(),\n         message_type: MessageType::Response,\n"
                },
                {
                    "date": 1643099674805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n-        match mess.command() {\n+        let response = match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             });}\n@@ -206,9 +206,9 @@\n                 reason: None,\n                 error_type:ProcessErrorType::Continue,\n             })}\n         };\n-        Ok(mess)\n+        \n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n"
                },
                {
                    "date": 1643099710280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,14 +200,17 @@\n             Command::Stop => {return Err(ProcessError{\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             });}\n-            Command::Ping => {pong(reply_back_to)}\n-            _  => {return Err(ProcessError{\n-                reason: None,\n-                error_type:ProcessErrorType::Continue,\n-            })}\n-        };\n+            Command::Ping => {\n+                pong(reply_back_to)\n+            }\n+            _  => {\n+                return Err(ProcessError{\n+                    reason: None,\n+                    error_type:ProcessErrorType::Continue,\n+                })}\n+        }\n         \n     }\n }\n \n"
                },
                {
                    "date": 1643099719757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n-        let response = match mess.command() {\n+        match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n             });}\n"
                },
                {
                    "date": 1643099733970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,8 +195,9 @@\n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n         let reply_back_to = mess.from();\n+        \n         match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n                 reason: None,\n                 error_type: ProcessErrorType::Break,\n@@ -208,10 +209,9 @@\n                 return Err(ProcessError{\n                     reason: None,\n                     error_type:ProcessErrorType::Continue,\n                 })}\n-        }\n-        \n+        }        \n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n"
                },
                {
                    "date": 1643099813667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n \n impl MessageProcessor<Box<dyn TResponse>> for Message{\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Message> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<()> {\n         Err(ProcessError{\n             reason: todo!(),\n             error_type: todo!(),\n         })\n"
                },
                {
                    "date": 1643099832785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,12 +213,12 @@\n         }        \n     }\n }\n \n-impl MessageProcessor<Box<dyn TResponse>> for Message{\n+impl MessageProcessor<Box<dyn TResponse>> for (){\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<()> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<(Message)> {\n         Err(ProcessError{\n             reason: todo!(),\n             error_type: todo!(),\n         })\n"
                },
                {
                    "date": 1643099838328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n \n impl MessageProcessor<Box<dyn TResponse>> for (){\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<(Message)> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<(()))> {\n         Err(ProcessError{\n             reason: todo!(),\n             error_type: todo!(),\n         })\n"
                },
                {
                    "date": 1643099845882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n \n impl MessageProcessor<Box<dyn TResponse>> for (){\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<(()))> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<())> {\n         Err(ProcessError{\n             reason: todo!(),\n             error_type: todo!(),\n         })\n"
                },
                {
                    "date": 1643099878849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,12 +216,12 @@\n \n impl MessageProcessor<Box<dyn TResponse>> for (){\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<())> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<()> {\n         Err(ProcessError{\n             reason: todo!(),\n-            error_type: todo!(),\n+            error_type: ProcessErrorType::Continue,\n         })\n     }\n }\n \n"
                },
                {
                    "date": 1643099885717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,9 @@\n     type Output = Message;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<()> {\n         Err(ProcessError{\n-            reason: todo!(),\n+            reason: None,\n             error_type: ProcessErrorType::Continue,\n         })\n     }\n }\n"
                },
                {
                    "date": 1643099901834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,12 +213,12 @@\n         }        \n     }\n }\n \n-impl MessageProcessor<Box<dyn TResponse>> for (){\n+impl MessageProcessor<Box<dyn TResponse>> for T{\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<()> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<T> {\n         Err(ProcessError{\n             reason: None,\n             error_type: ProcessErrorType::Continue,\n         })\n"
                },
                {
                    "date": 1643099933237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,8 +194,9 @@\n     \n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n+        \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n"
                },
                {
                    "date": 1643102145061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,12 +214,12 @@\n         }        \n     }\n }\n \n-impl MessageProcessor<Box<dyn TResponse>> for T{\n+impl MessageProcessor<Box<dyn TResponse>> for Status{\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<T> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Status> {\n         Err(ProcessError{\n             reason: None,\n             error_type: ProcessErrorType::Continue,\n         })\n"
                },
                {
                    "date": 1643102170816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n \n impl MessageProcessor<Box<dyn TResponse>> for Status{\n     type Output = Message;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Status> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Box<Status>> {\n         Err(ProcessError{\n             reason: None,\n             error_type: ProcessErrorType::Continue,\n         })\n"
                },
                {
                    "date": 1643102184384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n     }\n }\n \n impl MessageProcessor<Box<dyn TResponse>> for Status{\n-    type Output = Message;\n+    type Output = Status;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Box<Status>> {\n         Err(ProcessError{\n             reason: None,\n"
                },
                {
                    "date": 1643102193041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n \n impl MessageProcessor<Box<dyn TResponse>> for Status{\n     type Output = Status;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Box<Status>> {\n+    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Status> {\n         Err(ProcessError{\n             reason: None,\n             error_type: ProcessErrorType::Continue,\n         })\n"
                },
                {
                    "date": 1643104670607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n         match message_type {\n-            model::MessageType::Request => process_request(),\n+            model::MessageType::Request => MessageProcessor::process(self, message)\n             _ => process_response(),\n         }\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n"
                },
                {
                    "date": 1643104686276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n         match message_type {\n-            model::MessageType::Request => MessageProcessor::process(self, message)\n+            model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n             _ => process_response(),\n         }\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n"
                },
                {
                    "date": 1643104707270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n         match message_type {\n             model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n-            _ => process_response(),\n+            _ => process_response(()),\n         }\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n             match command {\n"
                },
                {
                    "date": 1643104733672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,10 +231,10 @@\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n         match message_type {\n             model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n-            _ => process_response(()),\n-        }\n+            _ => todo!()\n+        };\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n             match command {\n                 Command::Stop => {\n"
                },
                {
                    "date": 1643104774476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n         match message_type {\n-            model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n+            model::MessageType::Request => MessageProcessor::process::<Message>(self, Box::new(message)),\n             _ => todo!()\n         };\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n"
                },
                {
                    "date": 1643180324285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,14 @@\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n+pub trait ServerProcessor<S, R: Debug + TRequest, Res: Debug + TResponse> {\n+    \n+}\n \n \n+\n pub trait TRequest {\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String; \n     fn command(&self) -> Command;\n@@ -230,9 +234,9 @@\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n         match message_type {\n-            model::MessageType::Request => MessageProcessor::process::<Message>(self, Box::new(message)),\n+            model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n             _ => todo!()\n         };\n         if message.command.is_some() {\n             let command = message.command.unwrap();\n"
                },
                {
                    "date": 1643180354169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,10 @@\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n-pub trait ServerProcessor<S, R: Debug + TRequest, Res: Debug + TResponse> {\n-    \n+pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n+    fn process(&self, message: Req) -> ProcessResult<Res>;\n }\n \n \n \n"
                },
                {
                    "date": 1643180408057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n+    fn receive(&self) -> ProcessResult<TRequest>;\n     fn process(&self, message: Req) -> ProcessResult<Res>;\n }\n \n \n"
                },
                {
                    "date": 1643180423147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n-    fn receive(&self) -> ProcessResult<TRequest>;\n+    fn receive(&self) -> ProcessResult<Req>;\n     fn process(&self, message: Req) -> ProcessResult<Res>;\n }\n \n \n"
                },
                {
                    "date": 1643180478411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n }\n \n pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n     fn receive(&self) -> ProcessResult<Req>;\n+    fn validate(&self, request: Req) -> bool;\n     fn process(&self, message: Req) -> ProcessResult<Res>;\n }\n \n \n"
                },
                {
                    "date": 1643180487640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,10 @@\n }\n \n pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n     fn receive(&self) -> ProcessResult<Req>;\n-    fn validate(&self, request: Req) -> bool;\n-    fn process(&self, message: Req) -> ProcessResult<Res>;\n+    fn validate(&self,  request: Req) -> bool;\n+    fn process(&self,   message: Req) -> ProcessResult<Res>;\n }\n \n \n \n"
                },
                {
                    "date": 1643181704863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,29 @@\n \n     Ok(())\n }\n \n+pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n+    println!(\"Server is started...\");\n+\n+    loop {\n+        match processor.receive() {\n+            Ok(in_message) => {\n+                info!(\"message has been processed: {:?}\", in_message)\n+            }\n+            Err(err) => {\n+                if ProcessErrorType::Continue == err.error_type {\n+                    continue;\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+    Ok(())\n+}\n+\n+\n pub fn start_workders<S, T: Debug>(processor: Box<impl Processor<S, T>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n"
                },
                {
                    "date": 1643181718063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n-        match processor.receive() {\n+        match server.receive() {\n             Ok(in_message) => {\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n"
                },
                {
                    "date": 1643181757999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n+pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<dyn<ServerProcessor<S, Req, Res>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n"
                },
                {
                    "date": 1643181769073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<dyn<ServerProcessor<S, Req, Res>>) -> AppResult<()>  {\n+pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<impl <ServerProcessor<S, Req, Res>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n"
                },
                {
                    "date": 1643181784704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<impl <ServerProcessor<S, Req, Res>>) -> AppResult<()>  {\n+pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<impl <ServerProcessor<S, impl Req, Res>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n"
                },
                {
                    "date": 1643181791510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<impl <ServerProcessor<S, impl Req, Res>>) -> AppResult<()>  {\n+pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<impl <ServerProcessor<S, Req, Res>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n"
                },
                {
                    "date": 1643181840418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: Box<impl <ServerProcessor<S, Req, Res>>) -> AppResult<()>  {\n+pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: impl <ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n"
                },
                {
                    "date": 1643181846274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: impl <ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n+pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n"
                },
                {
                    "date": 1643181990767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,13 @@\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n+            \n             Ok(in_message) => {\n+                if(server.validate(request)) {\n+                    server.process(in_message);\n+                }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n                 if ProcessErrorType::Continue == err.error_type {\n"
                },
                {
                    "date": 1643181997710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n     loop {\n         match server.receive() {\n             \n             Ok(in_message) => {\n-                if(server.validate(request)) {\n+                if(server.validate(in_message)) {\n                     server.process(in_message);\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n"
                },
                {
                    "date": 1643182006396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n     loop {\n         match server.receive() {\n             \n             Ok(in_message) => {\n-                if(server.validate(in_message)) {\n+                if server.validate(in_message) {\n                     server.process(in_message);\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n"
                },
                {
                    "date": 1643182107166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,18 @@\n         match server.receive() {\n             \n             Ok(in_message) => {\n                 if server.validate(in_message) {\n-                    server.process(in_message);\n+                    let response = server.process(in_message);\n+                    match response {\n+                        Err(err) => {\n+                            if ProcessErrorType::Continue == err.error_type {\n+                                continue;\n+                            } else {\n+                                break;\n+                            }\n+                        }\n+                    }\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n"
                },
                {
                    "date": 1643182115365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,9 @@\n                             } else {\n                                 break;\n                             }\n                         }\n+                        Ok(_) => todo!(),\n                     }\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n"
                },
                {
                    "date": 1643182340376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n     fn receive(&self) -> ProcessResult<Req>;\n     fn validate(&self,  request: Req) -> bool;\n     fn process(&self,   message: Req) -> ProcessResult<Res>;\n+    fn response(&self) -> ProcessResult<Res>;\n }\n \n \n \n"
                },
                {
                    "date": 1643182376594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n                             } else {\n                                 break;\n                             }\n                         }\n-                        Ok(_) => todo!(),\n+                        Ok(response) => server.response(response),\n                     }\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n"
                },
                {
                    "date": 1643182384003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n                             } else {\n                                 break;\n                             }\n                         }\n-                        Ok(response) => server.response(response),\n+                        Ok(res) => server.response(res),\n                     }\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n"
                },
                {
                    "date": 1643182401495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n     fn receive(&self) -> ProcessResult<Req>;\n     fn validate(&self,  request: Req) -> bool;\n     fn process(&self,   message: Req) -> ProcessResult<Res>;\n-    fn response(&self) -> ProcessResult<Res>;\n+    fn response(&self, response: Res) -> ProcessResult<Res>;\n }\n \n \n \n"
                },
                {
                    "date": 1643182527378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n                             } else {\n                                 break;\n                             }\n                         }\n-                        Ok(res) => server.response(res),\n+                        Ok(res) => pong(in_message.from()),\n                     }\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n"
                },
                {
                    "date": 1643182537774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n                                 continue;\n                             } else {\n                                 break;\n                             }\n-                        }\n+                        },\n                         Ok(res) => pong(in_message.from()),\n                     }\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n"
                },
                {
                    "date": 1643182543146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n                                 continue;\n                             } else {\n                                 break;\n                             }\n-                        },\n+                        };\n                         Ok(res) => pong(in_message.from()),\n                     }\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n"
                },
                {
                    "date": 1643182591743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,11 +155,11 @@\n                                 continue;\n                             } else {\n                                 break;\n                             }\n-                        };\n+                        },\n                         Ok(res) => pong(in_message.from()),\n-                    }\n+                    };\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n"
                },
                {
                    "date": 1643182601538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,8 +158,9 @@\n                             }\n                         },\n                         Ok(res) => pong(in_message.from()),\n                     };\n+                    \n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n"
                },
                {
                    "date": 1643182619672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,11 @@\n         match server.receive() {\n             \n             Ok(in_message) => {\n                 if server.validate(in_message) {\n+                    \n                     let response = server.process(in_message);\n+                    \n                     match response {\n                         Err(err) => {\n                             if ProcessErrorType::Continue == err.error_type {\n                                 continue;\n@@ -158,9 +160,9 @@\n                             }\n                         },\n                         Ok(res) => pong(in_message.from()),\n                     };\n-                    \n+\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n"
                },
                {
                    "date": 1643387658900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,20 +54,9 @@\n }\n \n \n \n-pub trait TRequest {\n-    fn correlation_id(&self) -> String;\n-    fn from(&self) -> String; \n-    fn command(&self) -> Command;\n-    fn payload(&self) -> Option<Vec<u8>>;    \n-}\n \n-pub trait TResponse {\n-    fn correlation_id(&self) -> String;\n-    fn status(&self) -> Status;\n-    fn payload(&self) -> Option<Vec<u8>>;\n-}\n \n pub trait TMessage {\n     fn from() -> String;\n     fn payload() -> Option<Vec<u8>>;\n@@ -161,8 +150,10 @@\n                         },\n                         Ok(res) => pong(in_message.from()),\n                     };\n \n+                } else {\n+                    pong(receiver)\n                 }\n                 info!(\"message has been processed: {:?}\", in_message)\n             }\n             Err(err) => {\n@@ -228,14 +219,9 @@\n \n     response\n }\n \n-trait MessageProcessor<Rhs=Self> {\n-    type Output;\n \n-    fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n-}\n-\n impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n     \n     type Output = Box<dyn TResponse>;\n \n"
                },
                {
                    "date": 1643389719345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,45 +208,11 @@\n         }\n     }\n }\n \n-fn process_request<Req: TRequest + TMessage> (request: Req) -> Req {\n-    request\n-}\n \n-fn process_response<Res> (response: Res) -> Res\n-    where Res: TResponse + TMessage\n-{\n \n-    response\n-}\n \n-\n-impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n-    \n-    type Output = Box<dyn TResponse>;\n-\n-    fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n-        \n-        let reply_back_to = mess.from();\n-        \n-        match mess.command() {\n-            Command::Stop => {return Err(ProcessError{\n-                reason: None,\n-                error_type: ProcessErrorType::Break,\n-            });}\n-            Command::Ping => {\n-                pong(reply_back_to)\n-            }\n-            _  => {\n-                return Err(ProcessError{\n-                    reason: None,\n-                    error_type:ProcessErrorType::Continue,\n-                })}\n-        }        \n-    }\n-}\n-\n impl MessageProcessor<Box<dyn TResponse>> for Status{\n     type Output = Status;\n \n     fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Status> {\n"
                },
                {
                    "date": 1643389729689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,19 +211,9 @@\n \n \n \n \n-impl MessageProcessor<Box<dyn TResponse>> for Status{\n-    type Output = Status;\n \n-    fn process(self, rhs: Box<dyn TResponse>) -> ProcessResult<Status> {\n-        Err(ProcessError{\n-            reason: None,\n-            error_type: ProcessErrorType::Continue,\n-        })\n-    }\n-}\n-\n impl Processor<Vec<u8>, Message> for Worker {\n     fn process(&self, message: Message) -> ProcessResult<Message> {\n         let orig_message = message.clone();\n         let message_type = message.message_type;\n"
                },
                {
                    "date": 1643389770445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,18 +56,9 @@\n \n \n \n \n-pub trait TMessage {\n-    fn from() -> String;\n-    fn payload() -> Option<Vec<u8>>;\n-    fn correlation_id() -> String;\n-}\n \n-pub trait SendMessage<M> {\n-    fn send_message_to(message: M, to: String) -> ProcessResult<()>;\n-}\n-\n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n }\n"
                },
                {
                    "date": 1643389790196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,8 @@\n }\n \n \n \n-\n-\n-\n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n }\n@@ -119,9 +116,9 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + TRequest, Res: Debug + TResponse>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n+pub fn run_server<S, Req: Debug + Request, Res: Debug + Response>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n \n     loop {\n         match server.receive() {\n"
                },
                {
                    "date": 1643389838238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     fn from(&self) -> String;\n     fn receive(&self) -> ProcessResult<T>;\n }\n \n-pub trait ServerProcessor<S, Req: Debug + TRequest, Res: Debug + TResponse> {\n+pub trait ServerProcessor<S, Req: Debug + Request, Res: Debug + Response> {\n     fn receive(&self) -> ProcessResult<Req>;\n     fn validate(&self,  request: Req) -> bool;\n     fn process(&self,   message: Req) -> ProcessResult<Res>;\n     fn response(&self, response: Res) -> ProcessResult<Res>;\n"
                },
                {
                    "date": 1643389846240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n use common_libs::configure_log4rs;\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n-use model::{ProcessError, ProcessResult, Worker, Status};\n+use model::{ProcessError, ProcessResult, Worker, Status, Response};\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n lazy_static! {\n"
                },
                {
                    "date": 1643389852748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n use common_libs::configure_log4rs;\n use common_libs::error::{AppError, AppResult, RuntimeError, RuntimeResult};\n use common_libs::utils::from_binary;\n use log::{error, info};\n-use model::{ProcessError, ProcessResult, Worker, Status, Response};\n+use model::{ProcessError, ProcessResult, Worker, Status, Response, Request};\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n lazy_static! {\n"
                },
                {
                    "date": 1643643556316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,10 @@\n \n \n \n #[derive(Debug, Clone)]\n-pub struct CommandHandler {\n-    sender: crossbeam::channel::Sender<Vec<u8>>,\n+pub struct CommandHandler<T> {\n+    sender: crossbeam::channel::Sender<T>,\n }\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n     let mut workers = WORKERS.lock().unwrap();\n"
                },
                {
                    "date": 1643647012224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,14 @@\n pub struct CommandHandler<T> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n+impl CommandHandler<T> {\n+    pub fn send(message: T) {\n+        \n+    }\n+}\n+\n pub fn start_worker(worker_name: String) -> AppResult<()> {\n     let mut workers = WORKERS.lock().unwrap();\n     if workers.contains_key(&worker_name) {\n         let msg = format!(\n"
                },
                {
                    "date": 1643647022790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,11 @@\n pub struct CommandHandler<T> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n-impl CommandHandler<T> {\n+impl CommandHandler {\n     pub fn send(message: T) {\n-        \n+\n     }\n }\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643647038239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n pub struct CommandHandler<T> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n-impl CommandHandler {\n+impl <T> CommandHandler {\n     pub fn send(message: T) {\n \n     }\n }\n"
                },
                {
                    "date": 1643647049469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     sender: crossbeam::channel::Sender<T>,\n }\n \n impl <T> CommandHandler {\n-    pub fn send(message: T) {\n+    pub fn send(&self, message: T) {\n \n     }\n }\n \n"
                },
                {
                    "date": 1643647069097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n }\n \n impl <T> CommandHandler {\n     pub fn send(&self, message: T) {\n-\n+        self.sender.try_send(message);\n     }\n }\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643647111395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n }\n \n impl <T> CommandHandler {\n     pub fn send(&self, message: T) {\n-        self.sender.try_send(message);\n+        self.sender.try_send(&message);\n     }\n }\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643647119573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n }\n \n impl <T> CommandHandler {\n     pub fn send(&self, message: T) {\n-        self.sender.try_send(&message);\n+        self.sender.try_send(message);\n     }\n }\n \n pub fn start_worker(worker_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643647562136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n pub struct CommandHandler<T> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n-impl <T> CommandHandler {\n+impl CommandHandler {\n     pub fn send(&self, message: T) {\n         self.sender.try_send(message);\n     }\n }\n"
                },
                {
                    "date": 1643647568986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n pub struct CommandHandler<T> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n-impl CommandHandler {\n+impl CommandHandler<T> {\n     pub fn send(&self, message: T) {\n         self.sender.try_send(message);\n     }\n }\n"
                },
                {
                    "date": 1643647583655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n pub struct CommandHandler<T> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n-impl CommandHandler<T> {\n+impl <T> CommandHandler<T> {\n     pub fn send(&self, message: T) {\n         self.sender.try_send(message);\n     }\n }\n"
                },
                {
                    "date": 1643651130289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,302 +65,4 @@\n         self.sender.try_send(message);\n     }\n }\n \n-pub fn start_worker(worker_name: String) -> AppResult<()> {\n-    let mut workers = WORKERS.lock().unwrap();\n-    if workers.contains_key(&worker_name) {\n-        let msg = format!(\n-            \"worker with name: {} already has been started.\",\n-            worker_name\n-        );\n-        return Err(AppError::throw(&msg));\n-    }\n-    let (tx, rx) = crossbeam::channel::unbounded();\n-    workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(&worker_name, rx));\n-\n-    Ok(())\n-}\n-\n-pub fn server_loop(\n-    registered_name: &str,\n-    receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-) -> AppResult<()> {\n-    println!(\"Server is started...\");\n-\n-    loop {\n-        match receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(buffer) => {\n-                let message = match from_binary::<Message>(buffer) {\n-                    Ok(cmd) => cmd,\n-                    Err(_) => continue,\n-                };\n-\n-                println!(\"message is: {}\", message);\n-\n-                match message.command {\n-                    Some(cmd) {\n-                        match cmd {\n-                            \n-                        Command::Stop => break,\n-                        Command::Ping => {\n-                            println!(\"do pong\");\n-                            pong(registered_name.to_string().clone(), message.from).unwrap()\n-                        }\n-                        _ => break,\n-                        }\n-                    },\n-                    None => continue\n-                }\n-            }\n-            Err(_) => {\n-                println!(\"Hello from the server.....\");\n-                continue;\n-            }\n-        }\n-    }\n-\n-    Ok(())\n-}\n-\n-pub fn run_server<S, Req: Debug + Request, Res: Debug + Response>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n-    println!(\"Server is started...\");\n-\n-    loop {\n-        match server.receive() {\n-            \n-            Ok(in_message) => {\n-                if server.validate(in_message) {\n-                    \n-                    let response = server.process(in_message);\n-                    \n-                    match response {\n-                        Err(err) => {\n-                            if ProcessErrorType::Continue == err.error_type {\n-                                continue;\n-                            } else {\n-                                break;\n-                            }\n-                        },\n-                        Ok(res) => pong(in_message.from()),\n-                    };\n-\n-                } else {\n-                    pong(receiver)\n-                }\n-                info!(\"message has been processed: {:?}\", in_message)\n-            }\n-            Err(err) => {\n-                if ProcessErrorType::Continue == err.error_type {\n-                    continue;\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-    Ok(())\n-}\n-\n-\n-pub fn start_workders<S, T: Debug>(processor: Box<impl Processor<S, T>>) -> AppResult<()>  {\n-    println!(\"Server is started...\");\n-\n-    loop {\n-        match processor.receive() {\n-            Ok(in_message) => {\n-                info!(\"message has been processed: {:?}\", in_message)\n-            }\n-            Err(err) => {\n-                if ProcessErrorType::Continue == err.error_type {\n-                    continue;\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-    Ok(())\n-}\n-\n-impl Worker {\n-    pub fn new(name: String) -> Self {\n-        let mut workers = WORKERS.lock().unwrap();\n-        if workers.contains_key(&name) {\n-            let msg = format!(\"worker with name: {} already has been started.\", name);\n-            error!(\"failed: {}\", msg);\n-            return Worker {\n-                name: String::default(),\n-                receiver: None,\n-            };\n-        }\n-        let (tx, rx) = crossbeam::channel::unbounded();\n-        workers.insert(name.clone(), CommandHandler { sender: tx });\n-        Worker {\n-            name,\n-            receiver: Some(rx),\n-        }\n-    }\n-}\n-\n-\n-\n-\n-\n-impl Processor<Vec<u8>, Message> for Worker {\n-    fn process(&self, message: Message) -> ProcessResult<Message> {\n-        let orig_message = message.clone();\n-        let message_type = message.message_type;\n-        match message_type {\n-            model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n-            _ => todo!()\n-        };\n-        if message.command.is_some() {\n-            let command = message.command.unwrap();\n-            match command {\n-                Command::Stop => {\n-                    return Err(ProcessError {\n-                        reason: None,\n-                        error_type: ProcessErrorType::Break,\n-                    })\n-                }\n-                Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n-                cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n-            };\n-        } else {\n-\n-        }\n-       \n-        Ok(orig_message)\n-    }\n-\n-    fn from(&self) -> String {\n-        self.name.clone()\n-    }\n-\n-    fn receive(&self) -> ProcessResult<Message> {\n-        let rcv = match &self.receiver {\n-            Some(rcv1) => rcv1,\n-            None => {\n-                return Err(ProcessError {\n-                    reason: None,\n-                    error_type: ProcessErrorType::Fatal,\n-                })\n-            }\n-        };\n-\n-        match rcv.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => {\n-                let message = Self::map(binary)?;\n-                Ok(self.process(message)?)\n-            }\n-\n-            Err(_) => {\n-                info!(\"{} is waiting for a message....\", self.from());\n-                Err(ProcessError {\n-                    reason: None,\n-                    error_type: ProcessErrorType::Continue,\n-                })\n-            }\n-        }\n-    }\n-\n-    fn map(source: Vec<u8>) -> ProcessResult<Message> {\n-        match from_binary::<Message>(source) {\n-            Ok(msg) => Ok(msg),\n-            Err(_) => Err(ProcessError {\n-                reason: Some(\"invalid.data\".to_string()),\n-                error_type: ProcessErrorType::Continue,\n-            }),\n-        }\n-    }\n-}\n-\n-impl SendMessage<Message> for Worker {\n-    fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n-        let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n-        let json = serde_json::to_string(&message).unwrap();\n-        info!(\"Sending: {} to {}\", json, &destination);\n-        let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-        Ok(())\n-    }\n-}\n-\n-fn pong(receiver: String) -> ProcessResult<Box<dyn TResponse>> {\n-    let handler = match WORKERS.lock().unwrap().get(&receiver) {\n-        Some(handler) => handler.clone(),\n-        None => {\n-            let msg = format!(\"Pong command failed. {} not found.\", receiver);\n-            return Err(ProcessError {\n-                error_type: ProcessErrorType::Continue,\n-                reason: Some(\"client.not.found\".to_string()),\n-            });\n-        }\n-    };\n-    let pong = Message {\n-        from: None,\n-        ack: Some(true),\n-        command: None,\n-        payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n-        correlation_id: String::default(),\n-        message_type: MessageType::Response,\n-        status: Some(Status::InProgress),\n-    };\n-    let json = serde_json::to_string(&pong).unwrap();\n-    println!(\"sending pong command: {}\", json);\n-    let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n-\n-    Ok(Box::new(pong))\n-}\n-\n-#[test]\n-fn start_server_test() {\n-    let _ok = start_worker(\"alex_is_working\".to_string());\n-    let cmd_handler = WORKERS\n-        .lock()\n-        .unwrap()\n-        .get(\"alex_is_working\")\n-        .unwrap()\n-        .clone();\n-    sleep(Duration::from_secs(1));\n-    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n-    sleep(Duration::from_secs(2));\n-    assert!(true);\n-    assert_eq!(1, WORKERS.lock().unwrap().len());\n-}\n-\n-#[test]\n-fn ping_pong_test() {\n-    let _ok = start_worker(\"the_server\".to_string());\n-    let _ok = start_worker(\"the_client\".to_string());\n-    let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n-    let ping = Message {\n-        command: Command::Ping,\n-        from: \"the_client\".to_string(),\n-        payload: None,\n-        ack: None,\n-        correlation_id: \"1\".to_string(),\n-    };\n-    let json = serde_json::to_string(&ping).unwrap();\n-    println!(\"Sending: {}\", json);\n-    let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-    sleep(Duration::from_secs(2));\n-}\n-\n-#[test]\n-fn ping_pong_workers_test() {\n-    configure_log4rs();\n-    let worker1 = Worker::new(\"worker1\".to_string());\n-    let worker2 = Worker::new(\"worker2\".to_string());\n-    let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n-    let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n-    let ping = Message {\n-        command: Command::Ping,\n-        from: \"worker1\".to_string(),\n-        payload: None,\n-        ack: None,\n-        correlation_id: \"1\".to_string(),\n-    };\n-    let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n-    sleep(Duration::from_secs(2));\n-}\n"
                },
                {
                    "date": 1643651167504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,21 +17,9 @@\n use model::{ProcessError, ProcessResult, Worker, Status, Response, Request};\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n-lazy_static! {\n-    static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n-    };\n-}\n \n-lazy_static! {\n-    static ref CALLBACK: Mutex<HashMap<String, CommandHandler>> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n-    };\n-}\n \n lazy_static! {\n     static ref FROM: Mutex<HashMap<String, String>> = {\n         let mut m = HashMap::new();\n"
                },
                {
                    "date": 1643651173955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,16 +18,8 @@\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n \n-\n-lazy_static! {\n-    static ref FROM: Mutex<HashMap<String, String>> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n-    };\n-}\n-\n pub trait Processor<S, T: Debug> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n"
                },
                {
                    "date": 1643651221172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,29 @@\n use model::{ProcessError, ProcessResult, Worker, Status, Response, Request};\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n+lazy_static! {\n+    static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };\n+}\n \n+lazy_static! {\n+    static ref CALLBACK: Mutex<HashMap<String, CommandHandler>> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };\n+}\n+\n+lazy_static! {\n+    static ref FROM: Mutex<HashMap<String, String>> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };\n+}\n+\n pub trait Processor<S, T: Debug> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n     fn from(&self) -> String;\n@@ -45,4 +65,302 @@\n         self.sender.try_send(message);\n     }\n }\n \n+pub fn start_worker(worker_name: String) -> AppResult<()> {\n+    let mut workers = WORKERS.lock().unwrap();\n+    if workers.contains_key(&worker_name) {\n+        let msg = format!(\n+            \"worker with name: {} already has been started.\",\n+            worker_name\n+        );\n+        return Err(AppError::throw(&msg));\n+    }\n+    let (tx, rx) = crossbeam::channel::unbounded();\n+    workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n+    let _handler = thread::spawn(move || server_loop(&worker_name, rx));\n+\n+    Ok(())\n+}\n+\n+pub fn server_loop(\n+    registered_name: &str,\n+    receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+) -> AppResult<()> {\n+    println!(\"Server is started...\");\n+\n+    loop {\n+        match receiver.recv_timeout(Duration::from_secs(1)) {\n+            Ok(buffer) => {\n+                let message = match from_binary::<Message>(buffer) {\n+                    Ok(cmd) => cmd,\n+                    Err(_) => continue,\n+                };\n+\n+                println!(\"message is: {}\", message);\n+\n+                match message.command {\n+                    Some(cmd) {\n+                        match cmd {\n+                            \n+                        Command::Stop => break,\n+                        Command::Ping => {\n+                            println!(\"do pong\");\n+                            pong(registered_name.to_string().clone(), message.from).unwrap()\n+                        }\n+                        _ => break,\n+                        }\n+                    },\n+                    None => continue\n+                }\n+            }\n+            Err(_) => {\n+                println!(\"Hello from the server.....\");\n+                continue;\n+            }\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+pub fn run_server<S, Req: Debug + Request, Res: Debug + Response>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n+    println!(\"Server is started...\");\n+\n+    loop {\n+        match server.receive() {\n+            \n+            Ok(in_message) => {\n+                if server.validate(in_message) {\n+                    \n+                    let response = server.process(in_message);\n+                    \n+                    match response {\n+                        Err(err) => {\n+                            if ProcessErrorType::Continue == err.error_type {\n+                                continue;\n+                            } else {\n+                                break;\n+                            }\n+                        },\n+                        Ok(res) => pong(in_message.from()),\n+                    };\n+\n+                } else {\n+                    pong(receiver)\n+                }\n+                info!(\"message has been processed: {:?}\", in_message)\n+            }\n+            Err(err) => {\n+                if ProcessErrorType::Continue == err.error_type {\n+                    continue;\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+    Ok(())\n+}\n+\n+\n+pub fn start_workders<S, T: Debug>(processor: Box<impl Processor<S, T>>) -> AppResult<()>  {\n+    println!(\"Server is started...\");\n+\n+    loop {\n+        match processor.receive() {\n+            Ok(in_message) => {\n+                info!(\"message has been processed: {:?}\", in_message)\n+            }\n+            Err(err) => {\n+                if ProcessErrorType::Continue == err.error_type {\n+                    continue;\n+                } else {\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+    Ok(())\n+}\n+\n+impl Worker {\n+    pub fn new(name: String) -> Self {\n+        let mut workers = WORKERS.lock().unwrap();\n+        if workers.contains_key(&name) {\n+            let msg = format!(\"worker with name: {} already has been started.\", name);\n+            error!(\"failed: {}\", msg);\n+            return Worker {\n+                name: String::default(),\n+                receiver: None,\n+            };\n+        }\n+        let (tx, rx) = crossbeam::channel::unbounded();\n+        workers.insert(name.clone(), CommandHandler { sender: tx });\n+        Worker {\n+            name,\n+            receiver: Some(rx),\n+        }\n+    }\n+}\n+\n+\n+\n+\n+\n+impl Processor<Vec<u8>, Message> for Worker {\n+    fn process(&self, message: Message) -> ProcessResult<Message> {\n+        let orig_message = message.clone();\n+        let message_type = message.message_type;\n+        match message_type {\n+            model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n+            _ => todo!()\n+        };\n+        if message.command.is_some() {\n+            let command = message.command.unwrap();\n+            match command {\n+                Command::Stop => {\n+                    return Err(ProcessError {\n+                        reason: None,\n+                        error_type: ProcessErrorType::Break,\n+                    })\n+                }\n+                Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n+                cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n+            };\n+        } else {\n+\n+        }\n+       \n+        Ok(orig_message)\n+    }\n+\n+    fn from(&self) -> String {\n+        self.name.clone()\n+    }\n+\n+    fn receive(&self) -> ProcessResult<Message> {\n+        let rcv = match &self.receiver {\n+            Some(rcv1) => rcv1,\n+            None => {\n+                return Err(ProcessError {\n+                    reason: None,\n+                    error_type: ProcessErrorType::Fatal,\n+                })\n+            }\n+        };\n+\n+        match rcv.recv_timeout(Duration::from_secs(1)) {\n+            Ok(binary) => {\n+                let message = Self::map(binary)?;\n+                Ok(self.process(message)?)\n+            }\n+\n+            Err(_) => {\n+                info!(\"{} is waiting for a message....\", self.from());\n+                Err(ProcessError {\n+                    reason: None,\n+                    error_type: ProcessErrorType::Continue,\n+                })\n+            }\n+        }\n+    }\n+\n+    fn map(source: Vec<u8>) -> ProcessResult<Message> {\n+        match from_binary::<Message>(source) {\n+            Ok(msg) => Ok(msg),\n+            Err(_) => Err(ProcessError {\n+                reason: Some(\"invalid.data\".to_string()),\n+                error_type: ProcessErrorType::Continue,\n+            }),\n+        }\n+    }\n+}\n+\n+impl SendMessage<Message> for Worker {\n+    fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n+        let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n+        let json = serde_json::to_string(&message).unwrap();\n+        info!(\"Sending: {} to {}\", json, &destination);\n+        let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+        Ok(())\n+    }\n+}\n+\n+fn pong(receiver: String) -> ProcessResult<Box<dyn TResponse>> {\n+    let handler = match WORKERS.lock().unwrap().get(&receiver) {\n+        Some(handler) => handler.clone(),\n+        None => {\n+            let msg = format!(\"Pong command failed. {} not found.\", receiver);\n+            return Err(ProcessError {\n+                error_type: ProcessErrorType::Continue,\n+                reason: Some(\"client.not.found\".to_string()),\n+            });\n+        }\n+    };\n+    let pong = Message {\n+        from: None,\n+        ack: Some(true),\n+        command: None,\n+        payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n+        correlation_id: String::default(),\n+        message_type: MessageType::Response,\n+        status: Some(Status::InProgress),\n+    };\n+    let json = serde_json::to_string(&pong).unwrap();\n+    println!(\"sending pong command: {}\", json);\n+    let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n+\n+    Ok(Box::new(pong))\n+}\n+\n+#[test]\n+fn start_server_test() {\n+    let _ok = start_worker(\"alex_is_working\".to_string());\n+    let cmd_handler = WORKERS\n+        .lock()\n+        .unwrap()\n+        .get(\"alex_is_working\")\n+        .unwrap()\n+        .clone();\n+    sleep(Duration::from_secs(1));\n+    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n+    sleep(Duration::from_secs(2));\n+    assert!(true);\n+    assert_eq!(1, WORKERS.lock().unwrap().len());\n+}\n+\n+#[test]\n+fn ping_pong_test() {\n+    let _ok = start_worker(\"the_server\".to_string());\n+    let _ok = start_worker(\"the_client\".to_string());\n+    let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n+    let ping = Message {\n+        command: Command::Ping,\n+        from: \"the_client\".to_string(),\n+        payload: None,\n+        ack: None,\n+        correlation_id: \"1\".to_string(),\n+    };\n+    let json = serde_json::to_string(&ping).unwrap();\n+    println!(\"Sending: {}\", json);\n+    let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+    sleep(Duration::from_secs(2));\n+}\n+\n+#[test]\n+fn ping_pong_workers_test() {\n+    configure_log4rs();\n+    let worker1 = Worker::new(\"worker1\".to_string());\n+    let worker2 = Worker::new(\"worker2\".to_string());\n+    let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n+    let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n+    let ping = Message {\n+        command: Command::Ping,\n+        from: \"worker1\".to_string(),\n+        payload: None,\n+        ack: None,\n+        correlation_id: \"1\".to_string(),\n+    };\n+    let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n+    sleep(Duration::from_secs(2));\n+}\n"
                },
                {
                    "date": 1643651231650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,46 +122,46 @@\n \n     Ok(())\n }\n \n-pub fn run_server<S, Req: Debug + Request, Res: Debug + Response>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n-    println!(\"Server is started...\");\n+// pub fn run_server<S, Req: Debug + Request, Res: Debug + Response>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n+//     println!(\"Server is started...\");\n \n-    loop {\n-        match server.receive() {\n+//     loop {\n+//         match server.receive() {\n             \n-            Ok(in_message) => {\n-                if server.validate(in_message) {\n+//             Ok(in_message) => {\n+//                 if server.validate(in_message) {\n                     \n-                    let response = server.process(in_message);\n+//                     let response = server.process(in_message);\n                     \n-                    match response {\n-                        Err(err) => {\n-                            if ProcessErrorType::Continue == err.error_type {\n-                                continue;\n-                            } else {\n-                                break;\n-                            }\n-                        },\n-                        Ok(res) => pong(in_message.from()),\n-                    };\n+//                     match response {\n+//                         Err(err) => {\n+//                             if ProcessErrorType::Continue == err.error_type {\n+//                                 continue;\n+//                             } else {\n+//                                 break;\n+//                             }\n+//                         },\n+//                         Ok(res) => pong(in_message.from()),\n+//                     };\n \n-                } else {\n-                    pong(receiver)\n-                }\n-                info!(\"message has been processed: {:?}\", in_message)\n-            }\n-            Err(err) => {\n-                if ProcessErrorType::Continue == err.error_type {\n-                    continue;\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-    Ok(())\n-}\n+//                 } else {\n+//                     pong(receiver)\n+//                 }\n+//                 info!(\"message has been processed: {:?}\", in_message)\n+//             }\n+//             Err(err) => {\n+//                 if ProcessErrorType::Continue == err.error_type {\n+//                     continue;\n+//                 } else {\n+//                     break;\n+//                 }\n+//             }\n+//         }\n+//     }\n+//     Ok(())\n+// }\n \n \n pub fn start_workders<S, T: Debug>(processor: Box<impl Processor<S, T>>) -> AppResult<()>  {\n     println!(\"Server is started...\");\n"
                },
                {
                    "date": 1643651253228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,77 +206,67 @@\n \n \n \n \n-impl Processor<Vec<u8>, Message> for Worker {\n-    fn process(&self, message: Message) -> ProcessResult<Message> {\n-        let orig_message = message.clone();\n-        let message_type = message.message_type;\n-        match message_type {\n-            model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n-            _ => todo!()\n-        };\n-        if message.command.is_some() {\n-            let command = message.command.unwrap();\n-            match command {\n-                Command::Stop => {\n-                    return Err(ProcessError {\n-                        reason: None,\n-                        error_type: ProcessErrorType::Break,\n-                    })\n-                }\n-                Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n-                cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n-            };\n-        } else {\n+// impl Processor<Vec<u8>, Message> for Worker {\n+//     fn process(&self, message: Message) -> ProcessResult<Message> {\n+//         let orig_message = message.clone();\n+//         let message_type = message.message_type;\n+//         match message_type {\n+//             model::MessageType::Request => MessageProcessor::process(self, Box::new(message)),\n+//             _ => todo!()\n+//         };\n+//         if message.command.is_some() {\n+//             let command = message.command.unwrap();\n+//             match command {\n+//                 Command::Stop => {\n+//                     return Err(ProcessError {\n+//                         reason: None,\n+//                         error_type: ProcessErrorType::Break,\n+//                     })\n+//                 }\n+//                 Command::Ping => pong(self.name.clone(), message.from).unwrap(),\n+//                 cmd => error!(\"command.not.implemented: {:?}.\", cmd),\n+//             };\n+//         } else {\n \n-        }\n+//         }\n        \n-        Ok(orig_message)\n-    }\n+//         Ok(orig_message)\n+//     }\n \n-    fn from(&self) -> String {\n-        self.name.clone()\n-    }\n+//     fn from(&self) -> String {\n+//         self.name.clone()\n+//     }\n \n-    fn receive(&self) -> ProcessResult<Message> {\n-        let rcv = match &self.receiver {\n-            Some(rcv1) => rcv1,\n-            None => {\n-                return Err(ProcessError {\n-                    reason: None,\n-                    error_type: ProcessErrorType::Fatal,\n-                })\n-            }\n-        };\n+//     fn receive(&self) -> ProcessResult<Message> {\n+//         let rcv = match &self.receiver {\n+//             Some(rcv1) => rcv1,\n+//             None => {\n+//                 return Err(ProcessError {\n+//                     reason: None,\n+//                     error_type: ProcessErrorType::Fatal,\n+//                 })\n+//             }\n+//         };\n \n-        match rcv.recv_timeout(Duration::from_secs(1)) {\n-            Ok(binary) => {\n-                let message = Self::map(binary)?;\n-                Ok(self.process(message)?)\n-            }\n+//         match rcv.recv_timeout(Duration::from_secs(1)) {\n+//             Ok(binary) => {\n+//                 let message = Self::map(binary)?;\n+//                 Ok(self.process(message)?)\n+//             }\n \n-            Err(_) => {\n-                info!(\"{} is waiting for a message....\", self.from());\n-                Err(ProcessError {\n-                    reason: None,\n-                    error_type: ProcessErrorType::Continue,\n-                })\n-            }\n-        }\n-    }\n+//             Err(_) => {\n+//                 info!(\"{} is waiting for a message....\", self.from());\n+//                 Err(ProcessError {\n+//                     reason: None,\n+//                     error_type: ProcessErrorType::Continue,\n+//                 })\n+//             }\n+//         }\n+//     }\n \n-    fn map(source: Vec<u8>) -> ProcessResult<Message> {\n-        match from_binary::<Message>(source) {\n-            Ok(msg) => Ok(msg),\n-            Err(_) => Err(ProcessError {\n-                reason: Some(\"invalid.data\".to_string()),\n-                error_type: ProcessErrorType::Continue,\n-            }),\n-        }\n-    }\n-}\n-\n+?\n impl SendMessage<Message> for Worker {\n     fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n         let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n         let json = serde_json::to_string(&message).unwrap();\n"
                },
                {
                    "date": 1643651261965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,19 +264,19 @@\n //             }\n //         }\n //     }\n \n-?\n-impl SendMessage<Message> for Worker {\n-    fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n-        let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n-        let json = serde_json::to_string(&message).unwrap();\n-        info!(\"Sending: {} to {}\", json, &destination);\n-        let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-        Ok(())\n-    }\n-}\n \n+// impl SendMessage<Message> for Worker {\n+//     fn send_message_to(message: Message, destination: String) -> ProcessResult<()> {\n+//         let cmd_handler = WORKERS.lock().unwrap().get(&destination).unwrap().clone();        \n+//         let json = serde_json::to_string(&message).unwrap();\n+//         info!(\"Sending: {} to {}\", json, &destination);\n+//         let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+//         Ok(())\n+//     }\n+// }\n+\n fn pong(receiver: String) -> ProcessResult<Box<dyn TResponse>> {\n     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n         Some(handler) => handler.clone(),\n         None => {\n"
                },
                {
                    "date": 1643651269382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,34 +275,34 @@\n //         Ok(())\n //     }\n // }\n \n-fn pong(receiver: String) -> ProcessResult<Box<dyn TResponse>> {\n-    let handler = match WORKERS.lock().unwrap().get(&receiver) {\n-        Some(handler) => handler.clone(),\n-        None => {\n-            let msg = format!(\"Pong command failed. {} not found.\", receiver);\n-            return Err(ProcessError {\n-                error_type: ProcessErrorType::Continue,\n-                reason: Some(\"client.not.found\".to_string()),\n-            });\n-        }\n-    };\n-    let pong = Message {\n-        from: None,\n-        ack: Some(true),\n-        command: None,\n-        payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n-        correlation_id: String::default(),\n-        message_type: MessageType::Response,\n-        status: Some(Status::InProgress),\n-    };\n-    let json = serde_json::to_string(&pong).unwrap();\n-    println!(\"sending pong command: {}\", json);\n-    let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n+// fn pong(receiver: String) -> ProcessResult<Box<dyn TResponse>> {\n+//     let handler = match WORKERS.lock().unwrap().get(&receiver) {\n+//         Some(handler) => handler.clone(),\n+//         None => {\n+//             let msg = format!(\"Pong command failed. {} not found.\", receiver);\n+//             return Err(ProcessError {\n+//                 error_type: ProcessErrorType::Continue,\n+//                 reason: Some(\"client.not.found\".to_string()),\n+//             });\n+//         }\n+//     };\n+//     let pong = Message {\n+//         from: None,\n+//         ack: Some(true),\n+//         command: None,\n+//         payload: Some(\"pong\".to_string().as_bytes().to_vec()),\n+//         correlation_id: String::default(),\n+//         message_type: MessageType::Response,\n+//         status: Some(Status::InProgress),\n+//     };\n+//     let json = serde_json::to_string(&pong).unwrap();\n+//     println!(\"sending pong command: {}\", json);\n+//     let _ = handler.sender.try_send(json.clone().as_bytes().to_vec());\n \n-    Ok(Box::new(pong))\n-}\n+//     Ok(Box::new(pong))\n+// }\n \n #[test]\n fn start_server_test() {\n     let _ok = start_worker(\"alex_is_working\".to_string());\n"
                },
                {
                    "date": 1643651298927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n lazy_static! {\n-    static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n+    static ref WORKERS: Mutex<HashMap<String, CommandHandler<Vec<u8>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };\n }\n"
                },
                {
                    "date": 1643651304160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n lazy_static! {\n-    static ref WORKERS: Mutex<HashMap<String, CommandHandler<Vec<u8>> = {\n+    static ref WORKERS: Mutex<HashMap<String, CommandHandler<Vec<u8>>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };\n }\n"
                },
                {
                    "date": 1643651329210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     };\n }\n \n lazy_static! {\n-    static ref CALLBACK: Mutex<HashMap<String, CommandHandler>> = {\n+    static ref CALLBACK: Mutex<HashMap<String, CommandHandle<Vec<u8>>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n     };\n }\n"
                },
                {
                    "date": 1643651338259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,28 +17,28 @@\n use model::{ProcessError, ProcessResult, Worker, Status, Response, Request};\n \n use crate::model::{Command, Message, ProcessErrorType, MessageType};\n \n-lazy_static! {\n-    static ref WORKERS: Mutex<HashMap<String, CommandHandler<Vec<u8>>> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n-    };\n-}\n+// lazy_static! {\n+//     static ref WORKERS: Mutex<HashMap<String, CommandHandler<Vec<u8>>> = {\n+//         let mut m = HashMap::new();\n+//         Mutex::new(m)\n+//     };\n+// }\n \n-lazy_static! {\n-    static ref CALLBACK: Mutex<HashMap<String, CommandHandle<Vec<u8>>> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n-    };\n-}\n+// lazy_static! {\n+//     static ref CALLBACK: Mutex<HashMap<String, CommandHandle<Vec<u8>>> = {\n+//         let mut m = HashMap::new();\n+//         Mutex::new(m)\n+//     };\n+// }\n \n-lazy_static! {\n-    static ref FROM: Mutex<HashMap<String, String>> = {\n-        let mut m = HashMap::new();\n-        Mutex::new(m)\n-    };\n-}\n+// lazy_static! {\n+//     static ref FROM: Mutex<HashMap<String, String>> = {\n+//         let mut m = HashMap::new();\n+//         Mutex::new(m)\n+//     };\n+// }\n \n pub trait Processor<S, T: Debug> {\n     fn map(source: S) -> ProcessResult<T>;\n     fn process(&self, message: T) -> ProcessResult<T>;\n"
                },
                {
                    "date": 1643651356662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,23 +65,23 @@\n         self.sender.try_send(message);\n     }\n }\n \n-pub fn start_worker(worker_name: String) -> AppResult<()> {\n-    let mut workers = WORKERS.lock().unwrap();\n-    if workers.contains_key(&worker_name) {\n-        let msg = format!(\n-            \"worker with name: {} already has been started.\",\n-            worker_name\n-        );\n-        return Err(AppError::throw(&msg));\n-    }\n-    let (tx, rx) = crossbeam::channel::unbounded();\n-    workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-    let _handler = thread::spawn(move || server_loop(&worker_name, rx));\n+// pub fn start_worker(worker_name: String) -> AppResult<()> {\n+//     let mut workers = WORKERS.lock().unwrap();\n+//     if workers.contains_key(&worker_name) {\n+//         let msg = format!(\n+//             \"worker with name: {} already has been started.\",\n+//             worker_name\n+//         );\n+//         return Err(AppError::throw(&msg));\n+//     }\n+//     let (tx, rx) = crossbeam::channel::unbounded();\n+//     workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n+//     let _handler = thread::spawn(move || server_loop(&worker_name, rx));\n \n-    Ok(())\n-}\n+//     Ok(())\n+// }\n \n pub fn server_loop(\n     registered_name: &str,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1643651372682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,48 +81,48 @@\n \n //     Ok(())\n // }\n \n-pub fn server_loop(\n-    registered_name: &str,\n-    receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-) -> AppResult<()> {\n-    println!(\"Server is started...\");\n+// pub fn server_loop(\n+//     registered_name: &str,\n+//     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+// ) -> AppResult<()> {\n+//     println!(\"Server is started...\");\n \n-    loop {\n-        match receiver.recv_timeout(Duration::from_secs(1)) {\n-            Ok(buffer) => {\n-                let message = match from_binary::<Message>(buffer) {\n-                    Ok(cmd) => cmd,\n-                    Err(_) => continue,\n-                };\n+//     loop {\n+//         match receiver.recv_timeout(Duration::from_secs(1)) {\n+//             Ok(buffer) => {\n+//                 let message = match from_binary::<Message>(buffer) {\n+//                     Ok(cmd) => cmd,\n+//                     Err(_) => continue,\n+//                 };\n \n-                println!(\"message is: {}\", message);\n+//                 println!(\"message is: {}\", message);\n \n-                match message.command {\n-                    Some(cmd) {\n-                        match cmd {\n+//                 match message.command {\n+//                     Some(cmd) {\n+//                         match cmd {\n                             \n-                        Command::Stop => break,\n-                        Command::Ping => {\n-                            println!(\"do pong\");\n-                            pong(registered_name.to_string().clone(), message.from).unwrap()\n-                        }\n-                        _ => break,\n-                        }\n-                    },\n-                    None => continue\n-                }\n-            }\n-            Err(_) => {\n-                println!(\"Hello from the server.....\");\n-                continue;\n-            }\n-        }\n-    }\n+//                         Command::Stop => break,\n+//                         Command::Ping => {\n+//                             println!(\"do pong\");\n+//                             pong(registered_name.to_string().clone(), message.from).unwrap()\n+//                         }\n+//                         _ => break,\n+//                         }\n+//                     },\n+//                     None => continue\n+//                 }\n+//             }\n+//             Err(_) => {\n+//                 println!(\"Hello from the server.....\");\n+//                 continue;\n+//             }\n+//         }\n+//     }\n \n-    Ok(())\n-}\n+//     Ok(())\n+// }\n \n // pub fn run_server<S, Req: Debug + Request, Res: Debug + Response>(server: impl ServerProcessor<S, Req, Res>) -> AppResult<()>  {\n //     println!(\"Server is started...\");\n \n"
                },
                {
                    "date": 1643651389184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,27 +162,27 @@\n //     Ok(())\n // }\n \n \n-pub fn start_workders<S, T: Debug>(processor: Box<impl Processor<S, T>>) -> AppResult<()>  {\n-    println!(\"Server is started...\");\n+// pub fn start_workders<S, T: Debug>(processor: Box<impl Processor<S, T>>) -> AppResult<()>  {\n+//     println!(\"Server is started...\");\n \n-    loop {\n-        match processor.receive() {\n-            Ok(in_message) => {\n-                info!(\"message has been processed: {:?}\", in_message)\n-            }\n-            Err(err) => {\n-                if ProcessErrorType::Continue == err.error_type {\n-                    continue;\n-                } else {\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-    Ok(())\n-}\n+//     loop {\n+//         match processor.receive() {\n+//             Ok(in_message) => {\n+//                 info!(\"message has been processed: {:?}\", in_message)\n+//             }\n+//             Err(err) => {\n+//                 if ProcessErrorType::Continue == err.error_type {\n+//                     continue;\n+//                 } else {\n+//                     break;\n+//                 }\n+//             }\n+//         }\n+//     }\n+//     Ok(())\n+// }\n \n impl Worker {\n     pub fn new(name: String) -> Self {\n         let mut workers = WORKERS.lock().unwrap();\n"
                },
                {
                    "date": 1643651399376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,27 +182,27 @@\n //     }\n //     Ok(())\n // }\n \n-impl Worker {\n-    pub fn new(name: String) -> Self {\n-        let mut workers = WORKERS.lock().unwrap();\n-        if workers.contains_key(&name) {\n-            let msg = format!(\"worker with name: {} already has been started.\", name);\n-            error!(\"failed: {}\", msg);\n-            return Worker {\n-                name: String::default(),\n-                receiver: None,\n-            };\n-        }\n-        let (tx, rx) = crossbeam::channel::unbounded();\n-        workers.insert(name.clone(), CommandHandler { sender: tx });\n-        Worker {\n-            name,\n-            receiver: Some(rx),\n-        }\n-    }\n-}\n+// impl Worker {\n+//     pub fn new(name: String) -> Self {\n+//         let mut workers = WORKERS.lock().unwrap();\n+//         if workers.contains_key(&name) {\n+//             let msg = format!(\"worker with name: {} already has been started.\", name);\n+//             error!(\"failed: {}\", msg);\n+//             return Worker {\n+//                 name: String::default(),\n+//                 receiver: None,\n+//             };\n+//         }\n+//         let (tx, rx) = crossbeam::channel::unbounded();\n+//         workers.insert(name.clone(), CommandHandler { sender: tx });\n+//         Worker {\n+//             name,\n+//             receiver: Some(rx),\n+//         }\n+//     }\n+// }\n \n \n \n \n"
                },
                {
                    "date": 1643651409955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,55 +302,55 @@\n \n //     Ok(Box::new(pong))\n // }\n \n-#[test]\n-fn start_server_test() {\n-    let _ok = start_worker(\"alex_is_working\".to_string());\n-    let cmd_handler = WORKERS\n-        .lock()\n-        .unwrap()\n-        .get(\"alex_is_working\")\n-        .unwrap()\n-        .clone();\n-    sleep(Duration::from_secs(1));\n-    cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n-    sleep(Duration::from_secs(2));\n-    assert!(true);\n-    assert_eq!(1, WORKERS.lock().unwrap().len());\n-}\n+// #[test]\n+// fn start_server_test() {\n+//     let _ok = start_worker(\"alex_is_working\".to_string());\n+//     let cmd_handler = WORKERS\n+//         .lock()\n+//         .unwrap()\n+//         .get(\"alex_is_working\")\n+//         .unwrap()\n+//         .clone();\n+//     sleep(Duration::from_secs(1));\n+//     cmd_handler.sender.try_send(\"xxxxxx\".as_bytes().to_vec());\n+//     sleep(Duration::from_secs(2));\n+//     assert!(true);\n+//     assert_eq!(1, WORKERS.lock().unwrap().len());\n+// }\n \n-#[test]\n-fn ping_pong_test() {\n-    let _ok = start_worker(\"the_server\".to_string());\n-    let _ok = start_worker(\"the_client\".to_string());\n-    let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n-    let ping = Message {\n-        command: Command::Ping,\n-        from: \"the_client\".to_string(),\n-        payload: None,\n-        ack: None,\n-        correlation_id: \"1\".to_string(),\n-    };\n-    let json = serde_json::to_string(&ping).unwrap();\n-    println!(\"Sending: {}\", json);\n-    let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n-    sleep(Duration::from_secs(2));\n-}\n+// #[test]\n+// fn ping_pong_test() {\n+//     let _ok = start_worker(\"the_server\".to_string());\n+//     let _ok = start_worker(\"the_client\".to_string());\n+//     let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n+//     let ping = Message {\n+//         command: Command::Ping,\n+//         from: \"the_client\".to_string(),\n+//         payload: None,\n+//         ack: None,\n+//         correlation_id: \"1\".to_string(),\n+//     };\n+//     let json = serde_json::to_string(&ping).unwrap();\n+//     println!(\"Sending: {}\", json);\n+//     let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+//     sleep(Duration::from_secs(2));\n+// }\n \n-#[test]\n-fn ping_pong_workers_test() {\n-    configure_log4rs();\n-    let worker1 = Worker::new(\"worker1\".to_string());\n-    let worker2 = Worker::new(\"worker2\".to_string());\n-    let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n-    let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n-    let ping = Message {\n-        command: Command::Ping,\n-        from: \"worker1\".to_string(),\n-        payload: None,\n-        ack: None,\n-        correlation_id: \"1\".to_string(),\n-    };\n-    let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n-    sleep(Duration::from_secs(2));\n-}\n+// #[test]\n+// fn ping_pong_workers_test() {\n+//     configure_log4rs();\n+//     let worker1 = Worker::new(\"worker1\".to_string());\n+//     let worker2 = Worker::new(\"worker2\".to_string());\n+//     let _ = thread::spawn(move || start_workders(Box::new(worker1)));\n+//     let _ = thread::spawn(move || start_workders(Box::new(worker2)));\n+//     let ping = Message {\n+//         command: Command::Ping,\n+//         from: \"worker1\".to_string(),\n+//         payload: None,\n+//         ack: None,\n+//         correlation_id: \"1\".to_string(),\n+//     };\n+//     let _ = Worker::send_message_to(ping, \"worker2\".to_string());\n+//     sleep(Duration::from_secs(2));\n+// }\n"
                },
                {
                    "date": 1643651470914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n #[macro_use]\n extern crate lazy_static;\n \n use std::fmt::Debug;\n-use std::ptr::NonNull;\n+\n use std::sync::Mutex;\n use std::thread::sleep;\n use std::time::Duration;\n use std::{collections::HashMap, thread};\n"
                },
                {
                    "date": 1643651884929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \n \n \n #[derive(Debug, Clone)]\n-pub struct CommandHandler<T> {\n+pub struct CommandHandler<T: Send> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n impl <T> CommandHandler<T> {\n"
                },
                {
                    "date": 1643651894125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n pub struct CommandHandler<T: Send> {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n-impl <T> CommandHandler<T> {\n+impl <T: Send> CommandHandler<T> {\n     pub fn send(&self, message: T) {\n         self.sender.try_send(message);\n     }\n }\n"
                },
                {
                    "date": 1643652032532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \n \n \n #[derive(Debug, Clone)]\n-pub struct CommandHandler<T: Send> {\n+pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<T>,\n }\n \n impl <T: Send> CommandHandler<T> {\n"
                },
                {
                    "date": 1643652044470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n \n #[derive(Debug, Clone)]\n pub struct CommandHandler {\n-    sender: crossbeam::channel::Sender<T>,\n+    sender: crossbeam::channel::Sender<Vec<u8>>,\n }\n \n impl <T: Send> CommandHandler<T> {\n     pub fn send(&self, message: T) {\n"
                },
                {
                    "date": 1643652061604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n }\n \n-impl <T: Send> CommandHandler<T> {\n-    pub fn send(&self, message: T) {\n+impl CommandHandler {\n+    pub fn send(&self, message: Vec<u8>) {\n         self.sender.try_send(message);\n     }\n }\n \n"
                },
                {
                    "date": 1643652298371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n pub mod model;\n+pub mod actor;\n \n #[macro_use]\n extern crate lazy_static;\n \n"
                },
                {
                    "date": 1643715688024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n pub mod model;\n-pub mod actor;\n \n+\n #[macro_use]\n extern crate lazy_static;\n \n use std::fmt::Debug;\n@@ -62,9 +62,9 @@\n }\n \n impl CommandHandler {\n     pub fn send(&self, message: Vec<u8>) {\n-        self.sender.try_send(message);\n+        let _ = self.sender.try_send(message);\n     }\n }\n \n // pub fn start_worker(worker_name: String) -> AppResult<()> {\n"
                }
            ],
            "date": 1642081699815,
            "name": "Commit-0",
            "content": "lazy_static! {\n    static ref HASHMAP: Mutex<HashMap<u32, &'static str>> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        Mutex::new(m)\n    };    \n}"
        }
    ]
}