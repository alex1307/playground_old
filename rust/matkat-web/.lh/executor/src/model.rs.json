{
    "sourceFile": "executor/src/model.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 724,
            "patches": [
                {
                    "date": 1642086490668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642086538197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n #[derive(Debug, Clone)]\n pub struct Message {\n-\n+    pub command: Command,\n+    pub payload: Vec<u8>,\n+    pub command_id: String,\n }\n \n pub enum Command {\n     Stop,\n"
                },
                {
                    "date": 1642086762029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub command: Command,\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n \n+#[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Command {\n     Stop,\n     Ping,\n     Status,\n"
                },
                {
                    "date": 1642086773499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+use serde::Serialize;\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub command: Command,\n     pub payload: Vec<u8>,\n"
                },
                {
                    "date": 1642086782132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use serde::Serialize;\n+use serde::{Serialize, Deserialize};\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub command: Command,\n"
                },
                {
                    "date": 1642086804139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,6 +11,6 @@\n pub enum Command {\n     Stop,\n     Ping,\n     Status,\n-    Process\n+    Process,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642086866755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,15 @@\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n \n+pub struct Response {\n+    pub status: String,\n+    pub payload: Vec<u8>,\n+    pub command_id: String,\n+}\n+\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Command {\n     Stop,\n     Ping,\n"
                },
                {
                    "date": 1642087708857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,6 @@\n pub enum Command {\n     Stop,\n     Ping,\n     Status,\n-    Process,\n+    Execute,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642087725064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,5 +19,6 @@\n     Stop,\n     Ping,\n     Status,\n     Execute,\n+    Pause\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642087730703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,6 +19,6 @@\n     Stop,\n     Ping,\n     Status,\n     Execute,\n-    Pause\n+    Pause,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642089253534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,5 +20,12 @@\n     Ping,\n     Status,\n     Execute,\n     Pause,\n+}\n+\n+#[derive(Debug, Clone, Serialize, Deserialize)]\n+pub enum Status {\n+    Ok,\n+    Error,\n+    InProgress,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642089266009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     pub command_id: String,\n }\n \n pub struct Response {\n-    pub status: String,\n+    pub status: Status,\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n \n"
                },
                {
                    "date": 1642090540175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,27 @@\n     Ping,\n     Status,\n     Execute,\n     Pause,\n+    Undefined,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Status {\n     Ok,\n     Error,\n     InProgress,\n+    Undefined,\n+}\n+\n+impl From<String> for Command {\n+    fn from(source: String) -> Self {\n+        match source.to_lowercase().trim() {\n+            \"stop\" => Dictionary::Cambridge,\n+            \"ping\" => Dictionary::Collins,\n+            \"status\" => Dictionary::Oxford,\n+            \"execute\" => Dictionary::Oxford,\n+            \"pause\" => Dictionary::Oxford,\n+            _ => Dictionary::Undefined,\n+        }\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642090586882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,13 +34,13 @@\n \n impl From<String> for Command {\n     fn from(source: String) -> Self {\n         match source.to_lowercase().trim() {\n-            \"stop\" => Dictionary::Cambridge,\n-            \"ping\" => Dictionary::Collins,\n-            \"status\" => Dictionary::Oxford,\n-            \"execute\" => Dictionary::Oxford,\n-            \"pause\" => Dictionary::Oxford,\n-            _ => Dictionary::Undefined,\n+            \"stop\" => Command::Stop,\n+            \"ping\" => Command::Ping,\n+            \"status\" => Command::Status,\n+            \"execute\" => Command::Execute,\n+            \"pause\" => Command::Pause,\n+            _ => Command::Undefined,\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642090666765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,5 +42,16 @@\n             \"pause\" => Command::Pause,\n             _ => Command::Undefined,\n         }\n     }\n+}\n+\n+impl From<String> for Status {\n+    fn from(source: String) -> Self {\n+        match source.to_lowercase().trim() {\n+            \"ok\" => Status::Ok,\n+            \"error\" => Status::Error,\n+            \"inprogress\" => Status::InProgress,\n+            _ => Status::Undefined,\n+        }\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642090686426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n         match source.to_lowercase().trim() {\n             \"ok\" => Status::Ok,\n             \"error\" => Status::Error,\n             \"inprogress\" => Status::InProgress,\n+            \"in_progress\" => Status::InProgress,\n             _ => Status::Undefined,\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642090912124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,5 +54,9 @@\n             \"in_progress\" => Status::InProgress,\n             _ => Status::Undefined,\n         }\n     }\n+}\n+\n+impl From<Vec<u8>> for Command {\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642090919841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,6 +57,8 @@\n     }\n }\n \n impl From<Vec<u8>> for Command {\n-    \n+    fn from(_: Vec<u8>) -> Self {\n+        todo!()\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642090950402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n     }\n }\n \n impl From<Vec<u8>> for Command {\n+    \n     fn from(_: Vec<u8>) -> Self {\n         todo!()\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642092105315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n }\n \n impl From<Vec<u8>> for Command {\n     \n-    fn from(_: Vec<u8>) -> Self {\n+    fn from(source: Vec<u8>) -> Self {\n+        let payload = String::from_utf8(&source);\n         todo!()\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642092111236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,8 @@\n \n impl From<Vec<u8>> for Command {\n     \n     fn from(source: Vec<u8>) -> Self {\n-        let payload = String::from_utf8(&source);\n+        let payload = String::from_utf8(source);\n         todo!()\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642092286283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,11 @@\n \n impl From<Vec<u8>> for Command {\n     \n     fn from(source: Vec<u8>) -> Self {\n-        let payload = String::from_utf8(source);\n-        todo!()\n+        let payload = match String::from_utf8(source) {\n+            Ok(json) => json,\n+            Err(_) => String::default(),\n+        };\n+        \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642142479943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,14 +56,4 @@\n         }\n     }\n }\n \n-impl From<Vec<u8>> for Command {\n-    \n-    fn from(source: Vec<u8>) -> Self {\n-        let payload = match String::from_utf8(source) {\n-            Ok(json) => json,\n-            Err(_) => String::default(),\n-        };\n-        \n-    }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642146842146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n use serde::{Serialize, Deserialize};\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n+    pub from: String,\n     pub command: Command,\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n"
                },
                {
                    "date": 1642146885210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n     pub from: String,\n     pub command: Command,\n     pub payload: Vec<u8>,\n     pub command_id: String,\n+    pub ack: bool,\n }\n \n pub struct Response {\n     pub status: Status,\n"
                },
                {
                    "date": 1642322977982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,13 @@\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n+    pub ack: bool,\n     pub command: Command,\n     pub payload: Vec<u8>,\n     pub command_id: String,\n-    pub ack: bool,\n+    \n }\n \n pub struct Response {\n     pub status: Status,\n"
                },
                {
                    "date": 1642322987718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,9 @@\n     pub from: String,\n     pub ack: bool,\n     pub command: Command,\n     pub payload: Vec<u8>,\n-    pub command_id: String,\n-    \n+    pub command_id: String,    \n }\n \n pub struct Response {\n     pub status: Status,\n"
                },
                {
                    "date": 1642323001140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n     pub command_id: String,    \n }\n \n pub struct Response {\n+    pub from: String,\n     pub status: Status,\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n"
                },
                {
                    "date": 1642695343215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,15 @@\n     pub payload: Vec<u8>,\n     pub command_id: String,    \n }\n \n+impl Display for Message {\n+    fn fmt(&self, f: &mut Formatter) -> FmtResult {\n+        write!(f, \"{}\", to_string_pretty(self).unwrap())\n+    }\n+}\n+\n+\n pub struct Response {\n     pub from: String,\n     pub status: Status,\n     pub payload: Vec<u8>,\n"
                },
                {
                    "date": 1642695362137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+use std::fmt::{Display, Formatter};\n+\n use serde::{Serialize, Deserialize};\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1642695375716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n use std::fmt::{Display, Formatter};\n \n+use common_libs::error::FmtResult;\n use serde::{Serialize, Deserialize};\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1642695382801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n use std::fmt::{Display, Formatter};\n \n use common_libs::error::FmtResult;\n use serde::{Serialize, Deserialize};\n+use serde_json::to_string_pretty;\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n"
                },
                {
                    "date": 1642752412661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,24 @@\n use common_libs::error::FmtResult;\n use serde::{Serialize, Deserialize};\n use serde_json::to_string_pretty;\n \n+\n+pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n+\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n+pub struct ProcessError{\n+    pub reason: String,\n+    pub error_type: ProcessErrorType\n+}\n+\n+pub enum ProcessErrorType{\n+    Continue,\n+    Fatal\n+}\n+\n+#[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n     pub ack: bool,\n     pub command: Command,\n"
                },
                {
                    "date": 1642752425589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n }\n \n pub enum ProcessErrorType{\n     Continue,\n+    Break,\n     Fatal\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1642752430719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     pub reason: String,\n     pub error_type: ProcessErrorType\n }\n \n-pub enum ProcessErrorType{\n+pub enum ProcessErrorTypev{\n     Continue,\n     Break,\n     Fatal\n }\n"
                },
                {
                    "date": 1642752445037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     pub reason: String,\n     pub error_type: ProcessErrorType\n }\n \n-pub enum ProcessErrorTypev{\n+pub enum ProcessErrorType{\n     Continue,\n     Break,\n     Fatal\n }\n"
                },
                {
                    "date": 1642752456238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,46 @@\n use std::fmt::{Display, Formatter};\n \n use common_libs::error::FmtResult;\n-use serde::{Serialize, Deserialize};\n+use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n-\n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n-\n #[derive(Debug, Clone, Serialize, Deserialize)]\n-pub struct ProcessError{\n+pub struct ProcessError {\n     pub reason: String,\n-    pub error_type: ProcessErrorType\n+    pub error_type: ProcessErrorType,\n }\n \n-pub enum ProcessErrorType{\n+pub enum ProcessErrorType {\n     Continue,\n     Break,\n-    Fatal\n+    Fatal,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n     pub ack: bool,\n     pub command: Command,\n     pub payload: Vec<u8>,\n-    pub command_id: String,    \n+    pub command_id: String,\n }\n \n impl Display for Message {\n     fn fmt(&self, f: &mut Formatter) -> FmtResult {\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n     }\n }\n \n-\n pub struct Response {\n     pub from: String,\n     pub status: Status,\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n \n-\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Command {\n     Stop,\n     Ping,\n@@ -85,5 +81,4 @@\n             _ => Status::Undefined,\n         }\n     }\n }\n-\n"
                },
                {
                    "date": 1642752469538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     pub reason: String,\n     pub error_type: ProcessErrorType,\n }\n \n+#[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum ProcessErrorType {\n     Continue,\n     Break,\n     Fatal,\n"
                },
                {
                    "date": 1642752961777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,12 @@\n     Break,\n     Fatal,\n }\n \n+pub struct Worker {\n+    pub name: String\n+}\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n     pub ack: bool,\n"
                },
                {
                    "date": 1642757545447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,12 @@\n pub struct Worker {\n     pub name: String\n }\n \n+\n+\n+\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n     pub ack: bool,\n"
                },
                {
                    "date": 1642757590105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n }\n \n pub struct Worker {\n     pub name: String\n+    pub receiver: crossbeam::channel::Receiver<Vec<u8>>\n }\n \n \n \n"
                },
                {
                    "date": 1642757621545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,18 @@\n     pub error_type: ProcessErrorType,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n+#[derive(PartialEq)]\n pub enum ProcessErrorType {\n     Continue,\n     Break,\n     Fatal,\n }\n \n pub struct Worker {\n-    pub name: String\n-    pub receiver: crossbeam::channel::Receiver<Vec<u8>>\n+    pub name: String,\n+    pub receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n \n \n"
                },
                {
                    "date": 1642759431718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct ProcessError {\n-    pub reason: String,\n+    pub reason: Option<String>,\n     pub error_type: ProcessErrorType,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1642765185304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n }\n \n pub struct Worker {\n     pub name: String,\n-    pub receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+    pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n \n \n \n"
                },
                {
                    "date": 1643031641483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,16 @@\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n \n+pub struct Request {\n+    pub command: Command,\n+    pub from: String,\n+    pub payload: Vec<u8>,\n+    pub params: Vec<String>\n+}\n+\n+\n impl Display for Message {\n     fn fmt(&self, f: &mut Formatter) -> FmtResult {\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n     }\n"
                },
                {
                    "date": 1643031697621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,16 +37,30 @@\n     pub payload: Vec<u8>,\n     pub command_id: String,\n }\n \n+pub struct MessageRRR {\n+    pub from: String,\n+    pub ack: bool,\n+    pub command: Command,\n+    pub payload: Vec<u8>,\n+    pub command_id: String,\n+}\n+\n pub struct Request {\n     pub command: Command,\n     pub from: String,\n     pub payload: Vec<u8>,\n     pub params: Vec<String>\n }\n \n+pub enum MessageType {\n+    request,\n+    response,\n+    \n+}\n \n+\n impl Display for Message {\n     fn fmt(&self, f: &mut Formatter) -> FmtResult {\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n     }\n"
                },
                {
                    "date": 1643031704183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,10 @@\n     pub params: Vec<String>\n }\n \n pub enum MessageType {\n-    request,\n-    response,\n+    Request,\n+    Response,\n     \n }\n \n \n"
                },
                {
                    "date": 1643032108047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     pub from: String,\n     pub ack: bool,\n     pub command: Command,\n     pub payload: Vec<u8>,\n-    pub command_id: String,\n+    pub correlation_id: String,\n }\n \n pub struct MessageRRR {\n     pub from: String,\n@@ -55,9 +55,8 @@\n \n pub enum MessageType {\n     Request,\n     Response,\n-    \n }\n \n \n impl Display for Message {\n"
                },
                {
                    "date": 1643032148090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n pub struct Message {\n     pub from: String,\n     pub ack: bool,\n     pub command: Command,\n-    pub payload: Vec<u8>,\n+    pub payload: Option<Vec<u8>?,\n     pub correlation_id: String,\n }\n \n pub struct MessageRRR {\n"
                },
                {
                    "date": 1643032256088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n-    pub ack: bool,\n+    pub ack: Option<bool>,\n     pub command: Command,\n-    pub payload: Option<Vec<u8>?,\n+    pub payload: Option<Vec<u8>>,\n     pub correlation_id: String,\n }\n \n pub struct MessageRRR {\n"
                },
                {
                    "date": 1643032348997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n     pub ack: Option<bool>,\n-    pub command: Command,\n+    pub command: Option<Command>,\n     pub payload: Option<Vec<u8>>,\n     pub correlation_id: String,\n }\n \n"
                },
                {
                    "date": 1643032358010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,13 @@\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n+    pub correlation_id: String,\n     pub ack: Option<bool>,\n     pub command: Option<Command>,\n     pub payload: Option<Vec<u8>>,\n-    pub correlation_id: String,\n+    \n }\n \n pub struct MessageRRR {\n     pub from: String,\n"
                },
                {
                    "date": 1643033599519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,9 @@\n     pub from: String,\n     pub correlation_id: String,\n     pub ack: Option<bool>,\n     pub command: Option<Command>,\n-    pub payload: Option<Vec<u8>>,\n-    \n+    pub payload: Option<Vec<u8>>,    \n }\n \n pub struct MessageRRR {\n     pub from: String,\n"
                },
                {
                    "date": 1643033627483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,8 @@\n     Ping,\n     Status,\n     Execute,\n     Pause,\n-    Undefined,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Status {\n"
                },
                {
                    "date": 1643034057265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,21 +32,16 @@\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: String,\n     pub correlation_id: String,\n+    pub message_type: MessageType,\n     pub ack: Option<bool>,\n     pub command: Option<Command>,\n     pub payload: Option<Vec<u8>>,    \n }\n \n-pub struct MessageRRR {\n-    pub from: String,\n-    pub ack: bool,\n-    pub command: Command,\n-    pub payload: Vec<u8>,\n-    pub command_id: String,\n-}\n \n+\n pub struct Request {\n     pub command: Command,\n     pub from: String,\n     pub payload: Vec<u8>,\n"
                },
                {
                    "date": 1643034078052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n     pub payload: Vec<u8>,\n     pub params: Vec<String>\n }\n \n+#[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n     Response,\n }\n"
                },
                {
                    "date": 1643034114682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n     pub correlation_id: String,\n     pub message_type: MessageType,\n     pub ack: Option<bool>,\n     pub command: Option<Command>,\n+    pub status: Option<Status>,\n     pub payload: Option<Vec<u8>>,    \n }\n \n \n"
                },
                {
                    "date": 1643034138768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,9 @@\n             \"stop\" => Command::Stop,\n             \"ping\" => Command::Ping,\n             \"status\" => Command::Status,\n             \"execute\" => Command::Execute,\n-            \"pause\" => Command::Pause,\n-            _ => Command::Undefined,\n+            \"pause\" => Command::Pause\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1643034191641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,9 @@\n     Ping,\n     Status,\n     Execute,\n     Pause,\n+    Undefined\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Status {\n@@ -92,9 +93,10 @@\n             \"stop\" => Command::Stop,\n             \"ping\" => Command::Ping,\n             \"status\" => Command::Status,\n             \"execute\" => Command::Execute,\n-            \"pause\" => Command::Pause\n+            \"pause\" => Command::Pause,\n+            _ => Command::Undefined,\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1643034226515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n     Response,\n+    Undefined,\n }\n \n \n impl Display for Message {\n"
                },
                {
                    "date": 1643034345350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,17 @@\n         }\n     }\n }\n \n+impl From<String> for MessageType {\n+    fn from(source: String) -> Self {\n+        match source.to_lowercase().trim() {\n+            \"respsone\" => MessageType::Response,\n+            _ => Command::Request,\n+        }\n+    }\n+}\n+\n impl From<String> for Status {\n     fn from(source: String) -> Self {\n         match source.to_lowercase().trim() {\n             \"ok\" => Status::Ok,\n"
                },
                {
                    "date": 1643034361163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,9 @@\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n-    Response,\n-    Undefined,\n+    Response\n }\n \n \n impl Display for Message {\n@@ -104,9 +103,9 @@\n impl From<String> for MessageType {\n     fn from(source: String) -> Self {\n         match source.to_lowercase().trim() {\n             \"respsone\" => MessageType::Response,\n-            _ => Command::Request,\n+            _ => MessageType::Request,\n         }\n     }\n }\n \n"
                },
                {
                    "date": 1643034377383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,8 +115,8 @@\n             \"ok\" => Status::Ok,\n             \"error\" => Status::Error,\n             \"inprogress\" => Status::InProgress,\n             \"in_progress\" => Status::InProgress,\n-            _ => Status::Undefined,\n+            _ => Status::Error,,\n         }\n     }\n }\n"
                },
                {
                    "date": 1643034421974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,9 @@\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Status {\n     Ok,\n     Error,\n-    InProgress,\n-    Undefined,\n+    InProgress\n }\n \n impl From<String> for Command {\n     fn from(source: String) -> Self {\n@@ -112,11 +111,10 @@\n impl From<String> for Status {\n     fn from(source: String) -> Self {\n         match source.to_lowercase().trim() {\n             \"ok\" => Status::Ok,\n-            \"error\" => Status::Error,\n             \"inprogress\" => Status::InProgress,\n             \"in_progress\" => Status::InProgress,\n-            _ => Status::Error,,\n+            _ => Status::Error,\n         }\n     }\n }\n"
                },
                {
                    "date": 1643034430335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Status {\n     Ok,\n     Error,\n-    InProgress\n+    InProgress,\n }\n \n impl From<String> for Command {\n     fn from(source: String) -> Self {\n"
                },
                {
                    "date": 1643097890625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n-    pub from: String,\n+    pub from: Optin<String>,\n     pub correlation_id: String,\n     pub message_type: MessageType,\n     pub ack: Option<bool>,\n     pub command: Option<Command>,\n"
                },
                {
                    "date": 1643098106966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n-    pub from: Optin<String>,\n+    pub from: Option<String>,\n     pub correlation_id: String,\n     pub message_type: MessageType,\n     pub ack: Option<bool>,\n     pub command: Option<Command>,\n"
                },
                {
                    "date": 1643098899173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n use common_libs::error::FmtResult;\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n+use crate::TRequest;\n+\n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct ProcessError {\n@@ -40,8 +42,11 @@\n     pub payload: Option<Vec<u8>>,    \n }\n \n \n+impl TRequest for Message {\n+    \n+}\n \n pub struct Request {\n     pub command: Command,\n     pub from: String,\n"
                },
                {
                    "date": 1643098913776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,23 @@\n }\n \n \n impl TRequest for Message {\n-    \n+    fn correlation_id(&self) -> String {\n+        self.correlation_id\n+    }\n+\n+    fn from(&self) -> String {\n+        todo!()\n+    }\n+\n+    fn command(&self) -> Command {\n+        todo!()\n+    }\n+\n+    fn payload(&self) -> Option<Vec<u8>> {\n+        todo!()\n+    }\n }\n \n pub struct Request {\n     pub command: Command,\n"
                },
                {
                    "date": 1643098932169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         self.correlation_id\n     }\n \n     fn from(&self) -> String {\n-        todo!()\n+        self.from.unwrap()\n     }\n \n     fn command(&self) -> Command {\n         todo!()\n"
                },
                {
                    "date": 1643098951088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n         self.from.unwrap()\n     }\n \n     fn command(&self) -> Command {\n-        todo!()\n+        self.command.unwrap()\n     }\n \n     fn payload(&self) -> Option<Vec<u8>> {\n         todo!()\n"
                },
                {
                    "date": 1643098960574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         self.command.unwrap()\n     }\n \n     fn payload(&self) -> Option<Vec<u8>> {\n-        todo!()\n+        self.payload.unwrap()\n     }\n }\n \n pub struct Request {\n"
                },
                {
                    "date": 1643098967052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         self.command.unwrap()\n     }\n \n     fn payload(&self) -> Option<Vec<u8>> {\n-        self.payload.unwrap()\n+        self.payload\n     }\n }\n \n pub struct Request {\n"
                },
                {
                    "date": 1643098999242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n use common_libs::error::FmtResult;\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n-use crate::TRequest;\n+use crate::{TRequest, TResponse};\n \n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n@@ -60,8 +60,12 @@\n         self.payload\n     }\n }\n \n+impl TResponse for Message {\n+    \n+}\n+\n pub struct Request {\n     pub command: Command,\n     pub from: String,\n     pub payload: Vec<u8>,\n"
                },
                {
                    "date": 1643099023681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,19 @@\n     }\n }\n \n impl TResponse for Message {\n-    \n+    fn correlation_id(&self) -> String {\n+        self.correlation_id\n+    }\n+\n+    fn status(&self) -> Status {\n+       self.status.unwrap()\n+    }\n+\n+    fn payload(&self) -> Option<Vec<u8>> {\n+        todo!()\n+    }\n }\n \n pub struct Request {\n     pub command: Command,\n"
                },
                {
                    "date": 1643099031858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n        self.status.unwrap()\n     }\n \n     fn payload(&self) -> Option<Vec<u8>> {\n-        todo!()\n+        self.payload\n     }\n }\n \n pub struct Request {\n"
                },
                {
                    "date": 1643099046929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n     pub reason: Option<String>,\n     pub error_type: ProcessErrorType,\n }\n \n-#[derive(Debug, Clone, Serialize, Deserialize)]\n-#[derive(PartialEq)]\n+#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\n pub enum ProcessErrorType {\n     Continue,\n     Break,\n     Fatal,\n@@ -26,24 +25,19 @@\n     pub name: String,\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n \n-\n-\n-\n-\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: Option<String>,\n     pub correlation_id: String,\n     pub message_type: MessageType,\n     pub ack: Option<bool>,\n     pub command: Option<Command>,\n     pub status: Option<Status>,\n-    pub payload: Option<Vec<u8>>,    \n+    pub payload: Option<Vec<u8>>,\n }\n \n-\n impl TRequest for Message {\n     fn correlation_id(&self) -> String {\n         self.correlation_id\n     }\n@@ -66,9 +60,9 @@\n         self.correlation_id\n     }\n \n     fn status(&self) -> Status {\n-       self.status.unwrap()\n+        self.status.unwrap()\n     }\n \n     fn payload(&self) -> Option<Vec<u8>> {\n         self.payload\n@@ -78,18 +72,17 @@\n pub struct Request {\n     pub command: Command,\n     pub from: String,\n     pub payload: Vec<u8>,\n-    pub params: Vec<String>\n+    pub params: Vec<String>,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n-    Response\n+    Response,\n }\n \n-\n impl Display for Message {\n     fn fmt(&self, f: &mut Formatter) -> FmtResult {\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n     }\n@@ -108,9 +101,9 @@\n     Ping,\n     Status,\n     Execute,\n     Pause,\n-    Undefined\n+    Undefined,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Status {\n"
                },
                {
                    "date": 1643386162352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,10 @@\n     pub name: String,\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n \n+\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: Option<String>,\n     pub correlation_id: String,\n@@ -68,14 +70,8 @@\n         self.payload\n     }\n }\n \n-pub struct Request {\n-    pub command: Command,\n-    pub from: String,\n-    pub payload: Vec<u8>,\n-    pub params: Vec<String>,\n-}\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n@@ -87,14 +83,8 @@\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n     }\n }\n \n-pub struct Response {\n-    pub from: String,\n-    pub status: Status,\n-    pub payload: Vec<u8>,\n-    pub command_id: String,\n-}\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Command {\n     Stop,\n"
                },
                {
                    "date": 1643386199767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,21 @@\n     Break,\n     Fatal,\n }\n \n+pub trait TRequest {\n+    fn correlation_id(&self) -> String;\n+    fn from(&self) -> String; \n+    fn command(&self) -> Command;\n+    fn payload(&self) -> Option<Vec<u8>>;    \n+}\n+\n+pub trait TResponse {\n+    fn correlation_id(&self) -> String;\n+    fn status(&self) -> Status;\n+    fn payload(&self) -> Option<Vec<u8>>;\n+}\n+\n pub struct Worker {\n     pub name: String,\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n"
                },
                {
                    "date": 1643386205994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,16 +20,16 @@\n     Break,\n     Fatal,\n }\n \n-pub trait TRequest {\n+pub trait Request {\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String; \n     fn command(&self) -> Command;\n     fn payload(&self) -> Option<Vec<u8>>;    \n }\n \n-pub trait TResponse {\n+pub trait Response {\n     fn correlation_id(&self) -> String;\n     fn status(&self) -> Status;\n     fn payload(&self) -> Option<Vec<u8>>;\n }\n"
                },
                {
                    "date": 1643386213011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     pub status: Option<Status>,\n     pub payload: Option<Vec<u8>>,\n }\n \n-impl TRequest for Message {\n+impl Request for Message {\n     fn correlation_id(&self) -> String {\n         self.correlation_id\n     }\n \n"
                },
                {
                    "date": 1643386222342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         self.payload\n     }\n }\n \n-impl TResponse for Message {\n+impl Response for Message {\n     fn correlation_id(&self) -> String {\n         self.correlation_id\n     }\n \n"
                },
                {
                    "date": 1643386278991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n use common_libs::error::FmtResult;\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n-use crate::{TRequest, TResponse};\n \n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1643387650678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,14 @@\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n \n \n+trait MessageProcessor<Rhs=Self> {\n+    type Output;\n \n+    fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n+}\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: Option<String>,\n     pub correlation_id: String,\n"
                },
                {
                    "date": 1643387705499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,33 @@\n \n     fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n+impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n+    \n+    type Output = Box<dyn TResponse>;\n+\n+    fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n+        \n+        let reply_back_to = mess.from();\n+        \n+        match mess.command() {\n+            Command::Stop => {return Err(ProcessError{\n+                reason: None,\n+                error_type: ProcessErrorType::Break,\n+            });}\n+            Command::Ping => {\n+                pong(reply_back_to)\n+            }\n+            _  => {\n+                return Err(ProcessError{\n+                    reason: None,\n+                    error_type:ProcessErrorType::Continue,\n+                })}\n+        }        \n+    }\n+}\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: Option<String>,\n     pub correlation_id: String,\n"
                },
                {
                    "date": 1643387712030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \n     fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n-impl MessageProcessor<Box<dyn TRequest>> for Box<dyn TResponse> {\n+impl MessageProcessor<Box<dyn Request>> for Box<dyn Response> {\n     \n     type Output = Box<dyn TResponse>;\n \n     fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n"
                },
                {
                    "date": 1643387720575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,11 @@\n }\n \n impl MessageProcessor<Box<dyn Request>> for Box<dyn Response> {\n     \n-    type Output = Box<dyn TResponse>;\n+    type Output = Box<dyn Response>;\n \n-    fn process(self, mess: Box<dyn TRequest>) -> ProcessResult<Box<dyn TResponse>> {\n+    fn process(self, mess: Box<dyn Request>) -> ProcessResult<Box<dyn TResponse>> {\n         \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n"
                },
                {
                    "date": 1643387732067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n impl MessageProcessor<Box<dyn Request>> for Box<dyn Response> {\n     \n     type Output = Box<dyn Response>;\n \n-    fn process(self, mess: Box<dyn Request>) -> ProcessResult<Box<dyn TResponse>> {\n+    fn process(self, mess: Box<dyn Request>) -> ProcessResult<Box<dyn Response>> {\n         \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n"
                },
                {
                    "date": 1643387768700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,13 +44,13 @@\n \n     fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n-impl MessageProcessor<Box<dyn Request>> for Box<dyn Response> {\n+impl MessageProcessor<Vec<u8>> for Box<dyn Response> {\n     \n     type Output = Box<dyn Response>;\n \n-    fn process(self, mess: Box<dyn Request>) -> ProcessResult<Box<dyn Response>> {\n+    fn process(self, mess: Box<dyn V>) -> ProcessResult<Box<dyn Response>> {\n         \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n"
                },
                {
                    "date": 1643387777291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n impl MessageProcessor<Vec<u8>> for Box<dyn Response> {\n     \n     type Output = Box<dyn Response>;\n \n-    fn process(self, mess: Box<dyn V>) -> ProcessResult<Box<dyn Response>> {\n+    fn process(self, mess: Vec<u8>>) -> ProcessResult<Box<dyn Response>> {\n         \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n"
                },
                {
                    "date": 1643387782467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n impl MessageProcessor<Vec<u8>> for Box<dyn Response> {\n     \n     type Output = Box<dyn Response>;\n \n-    fn process(self, mess: Vec<u8>>) -> ProcessResult<Box<dyn Response>> {\n+    fn process(self, mess: Vec<u8>) -> ProcessResult<Box<dyn Response>> {\n         \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n"
                },
                {
                    "date": 1643388070199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,15 @@\n     type Output = Box<dyn Response>;\n \n     fn process(self, mess: Vec<u8>) -> ProcessResult<Box<dyn Response>> {\n         \n+        if mess.is_empty() {\n+            return Err(ProcessError{\n+                reason: \"empty.message\",\n+                error_type: todo!(),\n+            });\n+        }\n+\n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n"
                },
                {
                    "date": 1643388080778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n         \n         if mess.is_empty() {\n             return Err(ProcessError{\n                 reason: \"empty.message\",\n-                error_type: todo!(),\n+                error_type: ProcessErrorType::Continue,\n             });\n         }\n \n         let reply_back_to = mess.from();\n"
                },
                {
                    "date": 1643388117467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,10 @@\n                 error_type: ProcessErrorType::Continue,\n             });\n         }\n \n+        let ack = mess[1..1];\n+\n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n"
                },
                {
                    "date": 1643388683299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use std::fmt::{Display, Formatter};\n \n-use common_libs::error::FmtResult;\n+use common_libs::{error::FmtResult, utils::from_binary};\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n \n@@ -57,9 +57,9 @@\n                 error_type: ProcessErrorType::Continue,\n             });\n         }\n \n-        let ack = mess[1..1];\n+        let request = from_binary::<Box<dyn Request>>(mess)\n \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n"
                },
                {
                    "date": 1643388729857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,10 @@\n                 error_type: ProcessErrorType::Continue,\n             });\n         }\n \n-        let request = from_binary::<Box<dyn Request>>(mess)\n+        let request = from_binary::<Box<dyn Request>>(mess);\n+        \n \n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n"
                },
                {
                    "date": 1643388867613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,21 @@\n             });\n         }\n \n         let request = from_binary::<Box<dyn Request>>(mess);\n-        \n \n+        match request {\n+            Ok(req) => {\n+                \n+            },\n+            Err(err) => {\n+                return Err(ProcessError{\n+                    reason: \"parsing.error\",\n+                    error_type: ProcessErrorType::Continue,\n+                });\n+            }\n+        }\n+\n         let reply_back_to = mess.from();\n         \n         match mess.command() {\n             Command::Stop => {return Err(ProcessError{\n"
                },
                {
                    "date": 1643389048220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,10 @@\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String; \n     fn command(&self) -> Command;\n     fn payload(&self) -> Option<Vec<u8>>;    \n+    fn apply(&self) -> ProcessResult<Response>;\n+\n }\n \n pub trait Response {\n     fn correlation_id(&self) -> String;\n"
                },
                {
                    "date": 1643389061937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String; \n     fn command(&self) -> Command;\n     fn payload(&self) -> Option<Vec<u8>>;    \n-    fn apply(&self) -> ProcessResult<Response>;\n+    fn apply(&self) -> ProcessResult<dyn Response>;\n \n }\n \n pub trait Response {\n"
                },
                {
                    "date": 1643389211637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,13 +63,13 @@\n         let request = from_binary::<Box<dyn Request>>(mess);\n \n         match request {\n             Ok(req) => {\n-                \n+                req.apply()\n             },\n             Err(err) => {\n                 return Err(ProcessError{\n-                    reason: \"parsing.error\",\n+                    reason: err.message,\n                     error_type: ProcessErrorType::Continue,\n                 });\n             }\n         }\n"
                },
                {
                    "date": 1643389239219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,11 @@\n             Ok(req) => {\n                 req.apply()\n             },\n             Err(err) => {\n+                error!();\n                 return Err(ProcessError{\n-                    reason: err.message,\n+                    reason: err.message.clone(),\n                     error_type: ProcessErrorType::Continue,\n                 });\n             }\n         }\n"
                },
                {
                    "date": 1643389250497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n use std::fmt::{Display, Formatter};\n \n use common_libs::{error::FmtResult, utils::from_binary};\n+use log::error;\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n \n"
                },
                {
                    "date": 1643389269383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n             Ok(req) => {\n                 req.apply()\n             },\n             Err(err) => {\n-                error!();\n+                error!(\"failed.to.parse: {}\", err);\n                 return Err(ProcessError{\n                     reason: err.message.clone(),\n                     error_type: ProcessErrorType::Continue,\n                 });\n"
                },
                {
                    "date": 1643389289202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n             },\n             Err(err) => {\n                 error!(\"failed.to.parse: {}\", err);\n                 return Err(ProcessError{\n-                    reason: err.message.clone(),\n+                    reason: None,\n                     error_type: ProcessErrorType::Continue,\n                 });\n             }\n         }\n"
                },
                {
                    "date": 1643389343294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,31 +68,14 @@\n                 req.apply()\n             },\n             Err(err) => {\n                 error!(\"failed.to.parse: {}\", err);\n-                return Err(ProcessError{\n+                Err(ProcessError{\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n-                });\n+                })\n             }\n-        }\n-\n-        let reply_back_to = mess.from();\n-        \n-        match mess.command() {\n-            Command::Stop => {return Err(ProcessError{\n-                reason: None,\n-                error_type: ProcessErrorType::Break,\n-            });}\n-            Command::Ping => {\n-                pong(reply_back_to)\n-            }\n-            _  => {\n-                return Err(ProcessError{\n-                    reason: None,\n-                    error_type:ProcessErrorType::Continue,\n-                })}\n-        }        \n+        }  \n     }\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1643389470875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,15 +41,15 @@\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n \n \n-trait MessageProcessor<Rhs=Self> {\n+trait BinaryProcessor<Rhs=Self> {\n     type Output;\n \n     fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n-impl MessageProcessor<Vec<u8>> for Box<dyn Response> {\n+impl BinaryProcessor<Vec<u8>> for Box<dyn Response> {\n     \n     type Output = Box<dyn Response>;\n \n     fn process(self, mess: Vec<u8>) -> ProcessResult<Box<dyn Response>> {\n"
                },
                {
                    "date": 1643392423434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,14 @@\n         }  \n     }\n }\n \n+pub struct BaseMessage{\n+    pub from: String,\n+    pub payload: Option<Vec<u8>>,\n+}\n+\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: Option<String>,\n     pub correlation_id: String,\n"
                },
                {
                    "date": 1643392490087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n \n pub struct BaseMessage{\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n+    pub commands: u128,\n }\n \n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1643392551249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,13 @@\n     pub payload: Option<Vec<u8>>,\n     pub commands: u128,\n }\n \n+pub enum BaseCommand{\n+    Acknoledge(i128),\n \n+}\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n     pub from: Option<String>,\n     pub correlation_id: String,\n"
                },
                {
                    "date": 1643392588665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,13 +80,16 @@\n \n pub struct BaseMessage{\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n-    pub commands: u128,\n+    pub headers: u128,\n }\n \n pub enum BaseCommand{\n-    Acknoledge(i128),\n+    Acknoledge(u128),\n+    Status(u128),\n+    Acknoledge(u128),\n+    Acknoledge(u128),\n \n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1643392643880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,12 +84,12 @@\n     pub headers: u128,\n }\n \n pub enum BaseCommand{\n-    Acknoledge(u128),\n+    Ack(u128),\n     Status(u128),\n-    Acknoledge(u128),\n-    Acknoledge(u128),\n+    NoAck(u128),\n+    Process(u128),\n \n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1643392707627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,17 +80,15 @@\n \n pub struct BaseMessage{\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n-    pub headers: u128,\n+    pub headers: u32,\n }\n \n pub enum BaseCommand{\n     Ack(u128),\n     Status(u128),\n-    NoAck(u128),\n-    Process(u128),\n-\n+    Process(u128),    \n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1643392727506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,11 @@\n     pub headers: u32,\n }\n \n pub enum BaseCommand{\n-    Ack(u128),\n-    Status(u128),\n-    Process(u128),    \n+    Ack(u16),\n+    Status(u16),\n+    Process(u16),    \n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1643392769245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,11 @@\n     pub headers: u32,\n }\n \n pub enum BaseCommand{\n-    Ack(u16),\n-    Status(u16),\n-    Process(u16),    \n+    Ack(u8),\n+    Status(u8),\n+    Process(u8),    \n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1643392801737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n \n pub struct BaseMessage{\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n+    pub correlation_id: Option<String>\n     pub headers: u32,\n }\n \n pub enum BaseCommand{\n"
                },
                {
                    "date": 1643392967677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,16 +80,16 @@\n \n pub struct BaseMessage{\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n-    pub correlation_id: Option<String>\n+    pub correlation_id: Option<String>,\n     pub headers: u32,\n }\n \n-pub enum BaseCommand{\n-    Ack(u8),\n-    Status(u8),\n-    Process(u8),    \n+pub enum BaseMessageHeader{\n+    Ack,\n+    Status,\n+    Process,    \n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1643392984998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n pub struct BaseMessage{\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n     pub correlation_id: Option<String>,\n-    pub headers: u32,\n+    pub headers: Option<Vec<BaseMessageHeader>>,\n }\n \n pub enum BaseMessageHeader{\n     Ack,\n"
                },
                {
                    "date": 1643393016615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,10 @@\n pub enum BaseMessageHeader{\n     Ack,\n     Status,\n     Process,    \n+    Ping,\n+    Pong\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1643393101513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,10 +86,8 @@\n }\n \n pub enum BaseMessageHeader{\n     Ack,\n-    Status,\n-    Process,    \n     Ping,\n     Pong\n }\n \n"
                },
                {
                    "date": 1643393107438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n \n pub enum BaseMessageHeader{\n     Ack,\n     Ping,\n-    Pong\n+    Pong,\n }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct Message {\n"
                },
                {
                    "date": 1643393162517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n pub struct BaseMessage{\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n     pub correlation_id: Option<String>,\n+    pub sequence: Option<u32>,\n     pub headers: Option<Vec<BaseMessageHeader>>,\n }\n \n pub enum BaseMessageHeader{\n"
                },
                {
                    "date": 1643393202006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n     pub headers: Option<Vec<BaseMessageHeader>>,\n }\n \n pub enum BaseMessageHeader{\n+    NoAck,\n     Ack,\n     Ping,\n     Pong,\n }\n"
                },
                {
                    "date": 1643642022328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,11 @@\n \n \n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n+\n+\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct ProcessError {\n     pub reason: Option<String>,\n     pub error_type: ProcessErrorType,\n@@ -198,4 +201,8 @@\n             _ => Status::Error,\n         }\n     }\n }\n+\n+mod Actor {\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642137631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,6 +203,15 @@\n     }\n }\n \n mod Actor {\n-    \n+\n+    pub struct SystemMessage {\n+        pub from: String,\n+        pub payload: Message,\n+    }\n+\n+    pub trait Message {\n+        pub \n+    }\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642146627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n mod Actor {\n \n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Message,\n+        pub payload: dyn Message,\n     }\n \n     pub trait Message {\n         pub \n"
                },
                {
                    "date": 1643642255244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,15 +203,17 @@\n     }\n }\n \n mod Actor {\n+    use serde_json::Map;\n \n+\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n     }\n \n     pub trait Message {\n-        pub \n+        fn headers() -> Vec<Map<String, String>>\n     }\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642263289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,8 +212,9 @@\n         pub payload: dyn Message,\n     }\n \n     pub trait Message {\n-        fn headers() -> Vec<Map<String, String>>\n+        fn headers() -> Vec<Map<String, String>>;\n+\n     }\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642290921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,8 +213,9 @@\n     }\n \n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n+        fn command() -> Option<String>;\n \n     }\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642322587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,8 +214,9 @@\n \n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n+        fn binary() -> Vec<u8>;\n \n     }\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642331485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n \n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n-        fn binary() -> Vec<u8>;\n+        fn body() -> Vec<u8>;\n \n     }\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642372155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,14 +209,14 @@\n \n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n+        pub correlation_id(): Option<String>\n     }\n \n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n-\n     }\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642377250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,9 @@\n \n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n-        pub correlation_id(): Option<String>\n+        pub correlation_id: Option<String>\n     }\n \n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n"
                },
                {
                    "date": 1643642390495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,8 +203,9 @@\n     }\n }\n \n mod Actor {\n+    \n     use serde_json::Map;\n \n \n     pub struct SystemMessage {\n"
                },
                {
                    "date": 1643642431584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n         }\n     }\n }\n \n-mod Actor {\n+pub mod Actor {\n     \n     use serde_json::Map;\n \n \n"
                },
                {
                    "date": 1643642437536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,8 +206,14 @@\n pub mod Actor {\n     \n     use serde_json::Map;\n \n+    lazy_static! {\n+        static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n+            let mut m = HashMap::new();\n+            Mutex::new(m)\n+        };\n+    }\n \n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n"
                },
                {
                    "date": 1643642443654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,10 @@\n }\n \n pub mod Actor {\n     \n+    use std::sync::Mutex;\n+\n     use serde_json::Map;\n \n     lazy_static! {\n         static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n"
                },
                {
                    "date": 1643642454397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,10 @@\n     use std::sync::Mutex;\n \n     use serde_json::Map;\n \n+    use crate::CommandHandler;\n+\n     lazy_static! {\n         static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n"
                },
                {
                    "date": 1643642462125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n }\n \n pub mod Actor {\n     \n-    use std::sync::Mutex;\n+    use std::{sync::Mutex, collections::HashMap};\n \n     use serde_json::Map;\n \n     use crate::CommandHandler;\n"
                },
                {
                    "date": 1643642471206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n \n     use crate::CommandHandler;\n \n     lazy_static! {\n-        static ref WORKERS: Mutex<HashMap<String, CommandHandler>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643642675435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,11 +205,9 @@\n \n pub mod Actor {\n     \n     use std::{sync::Mutex, collections::HashMap};\n-\n     use serde_json::Map;\n-\n     use crate::CommandHandler;\n \n     lazy_static! {\n         static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n@@ -217,8 +215,11 @@\n             Mutex::new(m)\n         };\n     }\n \n+    \n+\n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n         pub correlation_id: Option<String>\n@@ -229,5 +230,7 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n+\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643642686364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,15 +217,16 @@\n     }\n \n     \n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]\n+    #[derive(Debug, Clone, Serialize, Deserializе)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n         pub correlation_id: Option<String>\n     }\n \n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n"
                },
                {
                    "date": 1643642706363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     }\n }\n \n pub mod Actor {\n-    \n+    use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap};\n     use serde_json::Map;\n     use crate::CommandHandler;\n \n"
                },
                {
                    "date": 1643642718503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n     }\n \n     \n \n-    #[derive(Debug, Clone, Serialize, Deserializе)]\n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n         pub correlation_id: Option<String>\n"
                },
                {
                    "date": 1643642785361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,8 +215,18 @@\n             Mutex::new(m)\n         };\n     }\n \n+    pub enum SystemCommand {\n+        Ping,\n+        Pong,\n+        Ack,\n+        NoAck,\n+        Ok,\n+        Err,\n+        Seq(u32)\n+    }\n+\n     \n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n"
                },
                {
                    "date": 1643642851283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,18 +222,19 @@\n         Ack,\n         NoAck,\n         Ok,\n         Err,\n-        Seq(u32)\n+        Seq(u32),        \n     }\n \n     \n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n-        pub correlation_id: Option<String>\n+        pub correlation_id: Option<String>,\n+        pub command: Option<SystemCommand>,\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub trait Message {\n"
                },
                {
                    "date": 1643642947811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n             Mutex::new(m)\n         };\n     }\n \n-    pub enum SystemCommand {\n+    #[derive(Debug, Clone, Serialize, Deserialize)]    pub enum SystemCommand {\n         Ping,\n         Pong,\n         Ack,\n         NoAck,\n@@ -225,8 +225,10 @@\n         Err,\n         Seq(u32),        \n     }\n \n+\n+\n     \n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n"
                },
                {
                    "date": 1643642962642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,10 @@\n             Mutex::new(m)\n         };\n     }\n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]    pub enum SystemCommand {\n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+    pub enum SystemCommand {\n         Ping,\n         Pong,\n         Ack,\n         NoAck,\n@@ -225,12 +226,8 @@\n         Err,\n         Seq(u32),        \n     }\n \n-\n-\n-    \n-\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n"
                },
                {
                    "date": 1643643033376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,14 +234,8 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]\n-    pub trait Message {\n-        fn headers() -> Vec<Map<String, String>>;\n-        fn command() -> Option<String>;\n-        fn body() -> Vec<u8>;\n-    }\n \n \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643643058395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,13 +229,19 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: dyn Message,\n+        pub payload: Box<dyn Message>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+    pub trait Message {\n+        fn headers() -> Vec<Map<String, String>>;\n+        fn command() -> Option<String>;\n+        fn body() -> Vec<u8>;\n+    }\n \n \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643643081168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,8 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n"
                },
                {
                    "date": 1643643089776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Box<dyn Message>,\n+        pub payload: dyn Message,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643643134124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,7 +240,21 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n+    pub fn start_actor(worker_name: String) -> AppResult<()> {\n+        let mut workers = WORKERS.lock().unwrap();\n+        if workers.contains_key(&worker_name) {\n+            let msg = format!(\n+                \"worker with name: {} already has been started.\",\n+                worker_name\n+            );\n+            return Err(AppError::throw(&msg));\n+        }\n+        let (tx, rx) = crossbeam::channel::unbounded();\n+        workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n+        let _handler = thread::spawn(move || server_loop(&worker_name, rx));\n+    \n+        Ok(())\n+    }\n \n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643643146238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,10 +240,10 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub fn start_actor(worker_name: String) -> AppResult<()> {\n-        let mut workers = WORKERS.lock().unwrap();\n+    pub fn start_actor(actor_name: String) -> AppResult<()> {\n+        let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&worker_name) {\n             let msg = format!(\n                 \"worker with name: {} already has been started.\",\n                 worker_name\n"
                },
                {
                    "date": 1643643167557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,18 +242,18 @@\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n-        if workers.contains_key(&worker_name) {\n+        if workers.contains_key(&actor_name) {\n             let msg = format!(\n                 \"worker with name: {} already has been started.\",\n-                worker_name\n+                actor_name\n             );\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n-        workers.insert(worker_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || server_loop(&worker_name, rx));\n+        workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n+        let _handler = thread::spawn(move || server_loop(&actor_name, rx));\n     \n         Ok(())\n     }\n \n"
                },
                {
                    "date": 1643643189208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,8 +203,9 @@\n     }\n }\n \n pub mod Actor {\n+    use common_libs::error::AppResult;\n     use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap};\n     use serde_json::Map;\n     use crate::CommandHandler;\n"
                },
                {
                    "date": 1643643249281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,5 +257,46 @@\n     \n         Ok(())\n     }\n \n+    pub fn server_loop(\n+        registered_name: &str,\n+        receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+    ) -> AppResult<()> {\n+        println!(\"Server is started...\");\n+    \n+        loop {\n+            match receiver.recv_timeout(Duration::from_secs(1)) {\n+                Ok(buffer) => {\n+                    let message = match from_binary::<Message>(buffer) {\n+                        Ok(cmd) => cmd,\n+                        Err(_) => continue,\n+                    };\n+    \n+                    println!(\"message is: {}\", message);\n+    \n+                    match message.command {\n+                        Some(cmd) {\n+                            match cmd {\n+                                \n+                            Command::Stop => break,\n+                            Command::Ping => {\n+                                println!(\"do pong\");\n+                                pong(registered_name.to_string().clone(), message.from).unwrap()\n+                            }\n+                            _ => break,\n+                            }\n+                        },\n+                        None => continue\n+                    }\n+                }\n+                Err(_) => {\n+                    println!(\"Hello from the server.....\");\n+                    continue;\n+                }\n+            }\n+        }\n+    \n+        Ok(())\n+    }\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643643257584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,9 @@\n     \n         Ok(())\n     }\n \n-    pub fn server_loop(\n+    pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n     ) -> AppResult<()> {\n         println!(\"Server is started...\");\n"
                },
                {
                    "date": 1643643267092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n     ) -> AppResult<()> {\n-        println!(\"Server is started...\");\n+        println!(\"actor is started...\");\n     \n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1643643292024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n     ) -> AppResult<()> {\n-        println!(\"actor is started...\");\n+        info!(\"The actor {} is started...\", );\n     \n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1643643300265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,9 @@\n }\n \n pub mod Actor {\n     use common_libs::error::AppResult;\n+    use log::info;\n     use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap};\n     use serde_json::Map;\n     use crate::CommandHandler;\n"
                },
                {
                    "date": 1643643314761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n     ) -> AppResult<()> {\n-        info!(\"The actor {} is started...\", );\n+        info!(\"The actor {} is being started...\", registered_name);\n     \n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1643643360587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n pub mod Actor {\n     use common_libs::error::AppResult;\n     use log::info;\n     use serde::{Deserialize, Serialize};\n-    use std::{sync::Mutex, collections::HashMap};\n+    use std::{sync::Mutex, collections::HashMap, time::Duration};\n     use serde_json::Map;\n     use crate::CommandHandler;\n \n     lazy_static! {\n"
                },
                {
                    "date": 1643643366162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     }\n }\n \n pub mod Actor {\n-    use common_libs::error::AppResult;\n+    use common_libs::{error::AppResult, utils::from_binary};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap, time::Duration};\n     use serde_json::Map;\n"
                },
                {
                    "date": 1643643383835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n     \n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n-                    let message = match from_binary::<Message>(buffer) {\n+                    let message = match from_binary::<dyn Message>(buffer) {\n                         Ok(cmd) => cmd,\n                         Err(_) => continue,\n                     };\n     \n"
                },
                {
                    "date": 1643643400834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,8 +262,9 @@\n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n     ) -> AppResult<()> {\n+        \n         info!(\"The actor {} is being started...\", registered_name);\n     \n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643643479398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,21 +260,20 @@\n     }\n \n     pub fn run(\n         registered_name: &str,\n-        receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+        receiver: crossbeam::channel::Receiver<SystemMessage>,\n     ) -> AppResult<()> {\n-        \n         info!(\"The actor {} is being started...\", registered_name);\n-    \n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n+                Ok(system_message)    \n                 Ok(buffer) => {\n                     let message = match from_binary::<dyn Message>(buffer) {\n                         Ok(cmd) => cmd,\n                         Err(_) => continue,\n                     };\n-    \n+\n                     println!(\"message is: {}\", message);\n     \n                     match message.command {\n                         Some(cmd) {\n"
                },
                {
                    "date": 1643643580095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n     use serde_json::Map;\n     use crate::CommandHandler;\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643643647537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n     use serde_json::Map;\n     use crate::CommandHandler;\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643643697773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     }\n }\n \n pub mod Actor {\n-    use common_libs::{error::AppResult, utils::from_binary};\n+    use common_libs::{error::{AppResult, AppError}, utils::from_binary};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap, time::Duration};\n     use serde_json::Map;\n"
                },
                {
                    "date": 1643643706798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n pub mod Actor {\n     use common_libs::{error::{AppResult, AppError}, utils::from_binary};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n-    use std::{sync::Mutex, collections::HashMap, time::Duration};\n+    use std::{sync::Mutex, collections::HashMap, time::Duration, thread};\n     use serde_json::Map;\n     use crate::CommandHandler;\n \n     lazy_static! {\n"
                },
                {
                    "date": 1643643713827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || server_loop(&actor_name, rx));\n+        let _handler = thread::spawn(move || run(&actor_name, rx));\n     \n         Ok(())\n     }\n \n"
                },
                {
                    "date": 1643643868828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,15 +265,20 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(system_message)    \n-                Ok(buffer) => {\n-                    let message = match from_binary::<dyn Message>(buffer) {\n+                Ok(system_message) if system_message.command.is_some()  => {\n+\n+                }  ,\n+                Ok(sys_msg) => {\n+                    let message = match from_binary::<dyn Message>(sys_msg.payload.body()) {\n                         Ok(cmd) => cmd,\n                         Err(_) => continue,\n                     };\n \n+                }\n+                Ok(buffer) => {\n+                    \n                     println!(\"message is: {}\", message);\n     \n                     match message.command {\n                         Some(cmd) {\n"
                },
                {
                    "date": 1643644005114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap, time::Duration, thread};\n     use serde_json::Map;\n-    use crate::CommandHandler;\n+    use crate::{CommandHandler, Processor};\n \n     lazy_static! {\n         static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n             let mut m = HashMap::new();\n@@ -266,9 +266,19 @@\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(system_message) if system_message.command.is_some()  => {\n-\n+                    let from = sys_msg.from();\n+                    let command = system_message.command.unwrap();\n+                    match command {\n+                        SystemCommand::Ping => todo!(),\n+                        SystemCommand::Pong => todo!(),\n+                        SystemCommand::Ack => todo!(),\n+                        SystemCommand::NoAck => todo!(),\n+                        SystemCommand::Ok => todo!(),\n+                        SystemCommand::Err => todo!(),\n+                        SystemCommand::Seq(_) => todo!(),\n+                    }\n                 }  ,\n                 Ok(sys_msg) => {\n                     let message = match from_binary::<dyn Message>(sys_msg.payload.body()) {\n                         Ok(cmd) => cmd,\n"
                },
                {
                    "date": 1643644016896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(system_message) if system_message.command.is_some()  => {\n-                    let from = sys_msg.from();\n+                    let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => todo!(),\n                         SystemCommand::Pong => todo!(),\n"
                },
                {
                    "date": 1643644928429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n                 Ok(system_message) if system_message.command.is_some()  => {\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n-                        SystemCommand::Ping => todo!(),\n+                        SystemCommand::Ping => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Pong => todo!(),\n                         SystemCommand::Ack => todo!(),\n                         SystemCommand::NoAck => todo!(),\n                         SystemCommand::Ok => todo!(),\n"
                },
                {
                    "date": 1643644953354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,14 +270,14 @@\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => info!(\"Command {} has been sent from {}\", command, &from),\n-                        SystemCommand::Pong => todo!(),\n-                        SystemCommand::Ack => todo!(),\n-                        SystemCommand::NoAck => todo!(),\n-                        SystemCommand::Ok => todo!(),\n-                        SystemCommand::Err => todo!(),\n-                        SystemCommand::Seq(_) => todo!(),\n+                        SystemCommand::Pong => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::Ack => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::NoAck => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::Ok => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::Err => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::Seq(_) => info!(\"Command {} has been sent from {}\", command, &from),\n                     }\n                 }  ,\n                 Ok(sys_msg) => {\n                     let message = match from_binary::<dyn Message>(sys_msg.payload.body()) {\n"
                },
                {
                    "date": 1643644994921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,37 +275,11 @@\n                         SystemCommand::Ack => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::NoAck => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Ok => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Err => info!(\"Command {} has been sent from {}\", command, &from),\n-                        SystemCommand::Seq(_) => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::Seq(seq) => info!(\"Command {} has been sent from {}\", command, &from),\n                     }\n-                }  ,\n-                Ok(sys_msg) => {\n-                    let message = match from_binary::<dyn Message>(sys_msg.payload.body()) {\n-                        Ok(cmd) => cmd,\n-                        Err(_) => continue,\n-                    };\n-\n                 }\n-                Ok(buffer) => {\n-                    \n-                    println!(\"message is: {}\", message);\n-    \n-                    match message.command {\n-                        Some(cmd) {\n-                            match cmd {\n-                                \n-                            Command::Stop => break,\n-                            Command::Ping => {\n-                                println!(\"do pong\");\n-                                pong(registered_name.to_string().clone(), message.from).unwrap()\n-                            }\n-                            _ => break,\n-                            }\n-                        },\n-                        None => continue\n-                    }\n-                }\n                 Err(_) => {\n                     println!(\"Hello from the server.....\");\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643645069356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,12 +277,16 @@\n                         SystemCommand::Ok => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Err => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Seq(seq) => info!(\"Command {} has been sent from {}\", command, &from),\n                     }\n-                }\n+                },\n                 Err(_) => {\n-                    println!(\"Hello from the server.....\");\n+                    info!(\"Hello from the server.....\");\n                     continue;\n+                },\n+                _ => {\n+                    info!(\"Hello from the server.....\");\n+                    continue;\n                 }\n             }\n         }\n     \n"
                },
                {
                    "date": 1643645099034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n                     info!(\"Hello from the server.....\");\n                     continue;\n                 },\n                 _ => {\n-                    info!(\"Hello from the server.....\");\n+                    info!(\"to be implemented....\");\n                     continue;\n                 }\n             }\n         }\n"
                },
                {
                    "date": 1643646004944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n                         SystemCommand::Seq(seq) => info!(\"Command {} has been sent from {}\", command, &from),\n                     }\n                 },\n                 Err(_) => {\n-                    info!(\"Hello from the server.....\");\n+                    info!(\"the servier is running.....\");\n                     continue;\n                 },\n                 _ => {\n                     info!(\"to be implemented....\");\n"
                },
                {
                    "date": 1643646016129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n                         SystemCommand::Seq(seq) => info!(\"Command {} has been sent from {}\", command, &from),\n                     }\n                 },\n                 Err(_) => {\n-                    info!(\"the servier is running.....\");\n+                    info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 },\n                 _ => {\n                     info!(\"to be implemented....\");\n"
                },
                {
                    "date": 1643646128281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     }\n }\n \n pub mod Actor {\n-    use common_libs::{error::{AppResult, AppError}, utils::from_binary};\n+    use common_libs::{error::{AppResult, AppError}};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap, time::Duration, thread};\n     use serde_json::Map;\n"
                },
                {
                    "date": 1643646138223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n     }\n }\n \n pub mod Actor {\n-    use common_libs::{error::{AppResult, AppError}};\n+    use common_libs::error::{AppResult, AppError};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use std::{sync::Mutex, collections::HashMap, time::Duration, thread};\n     use serde_json::Map;\n"
                },
                {
                    "date": 1643646272411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,12 +254,13 @@\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n         let _handler = thread::spawn(move || run(&actor_name, rx));\n-    \n         Ok(())\n     }\n \n+    pub fn send_message<T: Message>(message: SystemMessage)\n+\n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<SystemMessage>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643646319505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,11 +229,11 @@\n         Seq(u32),        \n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n-    pub struct SystemMessage {\n+    pub struct SystemMessage<T> {\n         pub from: String,\n-        pub payload: dyn Message,\n+        pub payload: dyn Message<T>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n@@ -257,9 +257,9 @@\n         let _handler = thread::spawn(move || run(&actor_name, rx));\n         Ok(())\n     }\n \n-    pub fn send_message<T: Message>(message: SystemMessage)\n+    pub fn send_message<T: Message>(message: )\n \n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<SystemMessage>,\n"
                },
                {
                    "date": 1643646329348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage<T> {\n         pub from: String,\n-        pub payload: dyn Message<T>,\n+        pub payload: dyn Message,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643646334443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n         Seq(u32),        \n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n-    pub struct SystemMessage<T> {\n+    pub struct SystemMessage {\n         pub from: String,\n         pub payload: dyn Message,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n"
                },
                {
                    "date": 1643646441867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,9 @@\n         let _handler = thread::spawn(move || run(&actor_name, rx));\n         Ok(())\n     }\n \n-    pub fn send_message<T: Message>(message: )\n+    pub fn exchange_command(from: String, command: SystemCommand)\n \n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<SystemMessage>,\n"
                },
                {
                    "date": 1643646463454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,10 +257,12 @@\n         let _handler = thread::spawn(move || run(&actor_name, rx));\n         Ok(())\n     }\n \n-    pub fn exchange_command(from: String, command: SystemCommand)\n+    pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n \n+    }\n+\n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<SystemMessage>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643646655723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,9 +258,13 @@\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n-\n+        let mut actors = ACTORS.lock().unwrap();\n+        let destination = actors.get(to);\n+        if destination.is_some() {\n+            let handler = destination.unwrap::<Sender<SystemCommand>>();\n+        }\n     }\n \n     pub fn run(\n         registered_name: &str,\n"
                },
                {
                    "date": 1643646664831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n         let mut actors = ACTORS.lock().unwrap();\n         let destination = actors.get(to);\n         if destination.is_some() {\n-            let handler = destination.unwrap::<Sender<SystemCommand>>();\n+            let handler = destination.unwrap::<CommandHandler<SystemCommand>>();\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643646693481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n         let mut actors = ACTORS.lock().unwrap();\n         let destination = actors.get(to);\n         if destination.is_some() {\n-            let handler = destination.unwrap::<CommandHandler<SystemCommand>>();\n+            let handler = destination.unwrap::<CommandHandler<SystemMessage>>();\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643646772743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,8 +236,10 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n+    struct SystemMessageHandler;\n+\n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n"
                },
                {
                    "date": 1643646791714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,8 +237,11 @@\n         pub command: Option<SystemCommand>,\n     }\n \n     struct SystemMessageHandler;\n+    impl CommandHandler<SystemMessage> for SystemMessageHandler {\n+        \n+    }\n \n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n"
                },
                {
                    "date": 1643646815025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,13 +236,10 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n-    struct SystemMessageHandler;\n-    impl CommandHandler<SystemMessage> for SystemMessageHandler {\n-        \n-    }\n \n+\n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n"
                },
                {
                    "date": 1643646831459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n     use serde_json::Map;\n     use crate::{CommandHandler, Processor};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<CommandMessage>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643646848291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n     use serde_json::Map;\n     use crate::{CommandHandler, Processor};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<CommandMessage>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643646862229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n         let mut actors = ACTORS.lock().unwrap();\n         let destination = actors.get(to);\n         if destination.is_some() {\n-            let handler = destination.unwrap::<CommandHandler<SystemMessage>>();\n+            let handler = destination.unwrap();\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643646893229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,8 +264,11 @@\n         let mut actors = ACTORS.lock().unwrap();\n         let destination = actors.get(to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n+            let system_message = SystemMessage {\n+                \n+            }\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643646917151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,12 @@\n         let destination = actors.get(to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n-                \n+                from,\n+                payload: None,\n+                correlation_id: todo!(),\n+                command: todo!(),\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1643646931936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: dyn Message,\n+        pub payload: Option<dyn Message>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643646946653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n                 from,\n                 payload: None,\n-                correlation_id: todo!(),\n+                correlation_id: None,\n                 command: todo!(),\n             }\n         }\n     }\n"
                },
                {
                    "date": 1643646951754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n             let system_message = SystemMessage {\n                 from,\n                 payload: None,\n                 correlation_id: None,\n-                command: todo!(),\n+                command: command,\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1643646964791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,10 +268,10 @@\n             let system_message = SystemMessage {\n                 from,\n                 payload: None,\n                 correlation_id: None,\n-                command: command,\n-            }\n+                command,\n+            };\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643646972880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,8 +270,10 @@\n                 payload: None,\n                 correlation_id: None,\n                 command,\n             };\n+\n+            \n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643647128091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                 correlation_id: None,\n                 command,\n             };\n \n-            \n+            handler\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643647153112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                 correlation_id: None,\n                 command,\n             };\n \n-            handler\n+            handler.send(system_message);\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643647167998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,8 @@\n     fn apply(&self) -> ProcessResult<dyn Response>;\n \n }\n \n-pub trait Response {\n-    fn correlation_id(&self) -> String;\n-    fn status(&self) -> Status;\n-    fn payload(&self) -> Option<Vec<u8>>;\n-}\n-\n pub struct Worker {\n     pub name: String,\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n"
                },
                {
                    "date": 1643647173508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,14 @@\n     fn apply(&self) -> ProcessResult<dyn Response>;\n \n }\n \n+pub trait Response {\n+    fn correlation_id(&self) -> String;\n+    fn status(&self) -> Status;\n+    fn payload(&self) -> Option<Vec<u8>>;\n+}\n+\n pub struct Worker {\n     pub name: String,\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n"
                },
                {
                    "date": 1643647632516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,9 @@\n                 correlation_id: None,\n                 command,\n             };\n \n-            handler.send(system_message);\n+            let _ = handler.send(system_message);\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643647762622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,12 @@\n                 Ok(system_message) if system_message.command.is_some()  => {\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n-                        SystemCommand::Ping => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::Ping => {\n+                            info!(\"Command {} has been sent from {}\", command, &from);\n+                            exchange_command(registered_name.to_string(), from.clone(), SystemCommand::Pong);\n+                        },\n                         SystemCommand::Pong => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Ack => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::NoAck => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Ok => info!(\"Command {} has been sent from {}\", command, &from),\n"
                },
                {
                    "date": 1643651103623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,9 +291,10 @@\n                             info!(\"Command {} has been sent from {}\", command, &from);\n                             exchange_command(registered_name.to_string(), from.clone(), SystemCommand::Pong);\n                         },\n                         SystemCommand::Pong => info!(\"Command {} has been sent from {}\", command, &from),\n-                        SystemCommand::Ack => info!(\"Command {} has been sent from {}\", command, &from),\n+                        SystemCommand::Ack => {info!(\"Command {} has been sent from {}\", command, &from);\n+                    exchange_command(registered_name.to_string(), from.clone(), SystemCommand::Seq(123))},\n                         SystemCommand::NoAck => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Ok => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Err => info!(\"Command {} has been sent from {}\", command, &from),\n                         SystemCommand::Seq(seq) => info!(\"Command {} has been sent from {}\", command, &from),\n"
                },
                {
                    "date": 1643651112944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,10 @@\n use log::error;\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n-\n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n-\n-\n-\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct ProcessError {\n     pub reason: Option<String>,\n     pub error_type: ProcessErrorType,\n@@ -25,13 +21,12 @@\n }\n \n pub trait Request {\n     fn correlation_id(&self) -> String;\n-    fn from(&self) -> String; \n+    fn from(&self) -> String;\n     fn command(&self) -> Command;\n-    fn payload(&self) -> Option<Vec<u8>>;    \n+    fn payload(&self) -> Option<Vec<u8>>;\n     fn apply(&self) -> ProcessResult<dyn Response>;\n-\n }\n \n pub trait Response {\n     fn correlation_id(&self) -> String;\n@@ -43,54 +38,49 @@\n     pub name: String,\n     pub receiver: Option<crossbeam::channel::Receiver<Vec<u8>>>,\n }\n \n-\n-trait BinaryProcessor<Rhs=Self> {\n+trait BinaryProcessor<Rhs = Self> {\n     type Output;\n \n     fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n impl BinaryProcessor<Vec<u8>> for Box<dyn Response> {\n-    \n     type Output = Box<dyn Response>;\n \n     fn process(self, mess: Vec<u8>) -> ProcessResult<Box<dyn Response>> {\n-        \n         if mess.is_empty() {\n-            return Err(ProcessError{\n+            return Err(ProcessError {\n                 reason: \"empty.message\",\n                 error_type: ProcessErrorType::Continue,\n             });\n         }\n \n         let request = from_binary::<Box<dyn Request>>(mess);\n \n         match request {\n-            Ok(req) => {\n-                req.apply()\n-            },\n+            Ok(req) => req.apply(),\n             Err(err) => {\n                 error!(\"failed.to.parse: {}\", err);\n-                Err(ProcessError{\n+                Err(ProcessError {\n                     reason: None,\n                     error_type: ProcessErrorType::Continue,\n                 })\n             }\n-        }  \n+        }\n     }\n }\n \n-pub struct BaseMessage{\n+pub struct BaseMessage {\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n     pub correlation_id: Option<String>,\n     pub sequence: Option<u32>,\n     pub headers: Option<Vec<BaseMessageHeader>>,\n }\n \n-pub enum BaseMessageHeader{\n+pub enum BaseMessageHeader {\n     NoAck,\n     Ack,\n     Ping,\n     Pong,\n@@ -138,9 +128,8 @@\n         self.payload\n     }\n }\n \n-\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n     Response,\n@@ -151,9 +140,8 @@\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n     }\n }\n \n-\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum Command {\n     Stop,\n     Ping,\n@@ -203,14 +191,14 @@\n     }\n }\n \n pub mod Actor {\n-    use common_libs::error::{AppResult, AppError};\n+    use crate::{CommandHandler, Processor};\n+    use common_libs::error::{AppError, AppResult};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n-    use std::{sync::Mutex, collections::HashMap, time::Duration, thread};\n     use serde_json::Map;\n-    use crate::{CommandHandler, Processor};\n+    use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n \n     lazy_static! {\n         static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>>> = {\n             let mut m = HashMap::new();\n@@ -225,9 +213,9 @@\n         Ack,\n         NoAck,\n         Ok,\n         Err,\n-        Seq(u32),        \n+        Seq(u32),\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n@@ -236,10 +224,8 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n-\n-\n     pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n@@ -247,12 +233,9 @@\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n-            let msg = format!(\n-                \"worker with name: {} already has been started.\",\n-                actor_name\n-            );\n+            let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n@@ -282,36 +265,55 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(system_message) if system_message.command.is_some()  => {\n+                Ok(system_message) if system_message.command.is_some() => {\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n                             info!(\"Command {} has been sent from {}\", command, &from);\n-                            exchange_command(registered_name.to_string(), from.clone(), SystemCommand::Pong);\n-                        },\n-                        SystemCommand::Pong => info!(\"Command {} has been sent from {}\", command, &from),\n-                        SystemCommand::Ack => {info!(\"Command {} has been sent from {}\", command, &from);\n-                    exchange_command(registered_name.to_string(), from.clone(), SystemCommand::Seq(123))},\n-                        SystemCommand::NoAck => info!(\"Command {} has been sent from {}\", command, &from),\n-                        SystemCommand::Ok => info!(\"Command {} has been sent from {}\", command, &from),\n-                        SystemCommand::Err => info!(\"Command {} has been sent from {}\", command, &from),\n-                        SystemCommand::Seq(seq) => info!(\"Command {} has been sent from {}\", command, &from),\n+                            exchange_command(\n+                                registered_name.to_string(),\n+                                from.clone(),\n+                                SystemCommand::Pong,\n+                            );\n+                        }\n+                        SystemCommand::Pong => {\n+                            info!(\"Command {} has been sent from {}\", command, &from)\n+                        }\n+                        SystemCommand::Ack => {\n+                            info!(\"Command {} has been sent from {}\", command, &from);\n+                            exchange_command(\n+                                registered_name.to_string(),\n+                                from.clone(),\n+                                SystemCommand::Seq(123),\n+                            );\n\\ No newline at end of file\n+                        }\n+                        SystemCommand::NoAck => {\n+                            info!(\"Command {} has been sent from {}\", command, &from)\n+                        }\n+                        SystemCommand::Ok => {\n+                            info!(\"Command {} has been sent from {}\", command, &from)\n+                        }\n+                        SystemCommand::Err => {\n+                            info!(\"Command {} has been sent from {}\", command, &from)\n+                        }\n+                        SystemCommand::Seq(seq) => {\n+                            info!(\"Command {} has been sent from {}\", command, &from)\n+                        }\n                     }\n-                },\n+                }\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n-                },\n+                }\n                 _ => {\n                     info!(\"to be implemented....\");\n                     continue;\n                 }\n             }\n         }\n-    \n+\n         Ok(())\n     }\n-\n-}\n+}\n"
                },
                {
                    "date": 1643651483979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,5 +315,5 @@\n         }\n \n         Ok(())\n     }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1643651499028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n     fn payload(&self) -> Option<Vec<u8>>;\n-    fn apply(&self) -> ProcessResult<dyn Response>;\n+    fn apply(&self) -> ProcessResult<Box<dyn Response>>;\n }\n \n pub trait Response {\n     fn correlation_id(&self) -> String;\n"
                },
                {
                    "date": 1643651523118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, Box<CommandHandler<SystemMessage>>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643651568686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, Box<CommandHandler<SystemMessage>>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<dyn Message>,\n+        pub payload: Option<dyn Message + Send>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651577387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<dyn Message + Send>,\n+        pub payload: Option<dyn Message>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651663818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<dyn Message>,\n+        pub payload: Option<Box<dyn Message>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651693515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n     use common_libs::error::{AppError, AppResult};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n+    use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n         static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>>> = {\n             let mut m = HashMap::new();\n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Box<dyn Message>>,\n+        pub payload: Option<Arc<dyn Message>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651699075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Arc<dyn Message>>,\n+        pub payload: Option<Arc<Message>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651705753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Arc<Message>>,\n+        pub payload: Option<Arc<dyn Message>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651724519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n     use common_libs::error::{AppError, AppResult};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n+    use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration, rc::Rc};\n \n     lazy_static! {\n         static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>>> = {\n             let mut m = HashMap::new();\n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Arc<dyn Message>>,\n+        pub payload: Option<Rc<dyn Message>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651753679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,12 +196,12 @@\n     use common_libs::error::{AppError, AppResult};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration, rc::Rc};\n+    use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Box<dyn SystemMessage>>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Rc<dyn Message>>,\n+        pub payload: Option<Arc<dyn Message>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651762271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Box<dyn SystemMessage>>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Arc<dyn SystemMessage>>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643651792832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Arc<dyn Message>>,\n+        pub payload: Option<dyn Message>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643651819912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Arc<dyn SystemMessage>>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Arc<SystemMessage>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643651866407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Arc<SystemMessage>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643651872803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643651913780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643651919411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643651998596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<SystemMessage>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643652004356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643652098705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler<Vec<u8>>> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643652109086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n \n     lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler> = {\n+        static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n             let mut m = HashMap::new();\n             Mutex::new(m)\n         };\n     }\n"
                },
                {
                    "date": 1643652130404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<dyn Message>,\n+        pub payload: Option<Vec<vec<u8>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643652137560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Vec<vec<u8>,\n+        pub payload: Option<Vec<<u8>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643652143965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n-        pub payload: Option<Vec<<u8>>,\n+        pub payload: Option<Vec<u8>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n"
                },
                {
                    "date": 1643652186367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,33 +44,33 @@\n \n     fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n-impl BinaryProcessor<Vec<u8>> for Box<dyn Response> {\n-    type Output = Box<dyn Response>;\n+// impl BinaryProcessor<Vec<u8>> for Box<dyn Response> {\n+//     type Output = Box<dyn Response>;\n \n-    fn process(self, mess: Vec<u8>) -> ProcessResult<Box<dyn Response>> {\n-        if mess.is_empty() {\n-            return Err(ProcessError {\n-                reason: \"empty.message\",\n-                error_type: ProcessErrorType::Continue,\n-            });\n-        }\n+//     fn process(self, mess: Vec<u8>) -> ProcessResult<Box<dyn Response>> {\n+//         if mess.is_empty() {\n+//             return Err(ProcessError {\n+//                 reason: \"empty.message\",\n+//                 error_type: ProcessErrorType::Continue,\n+//             });\n+//         }\n \n-        let request = from_binary::<Box<dyn Request>>(mess);\n+//         let request = from_binary::<Box<dyn Request>>(mess);\n \n-        match request {\n-            Ok(req) => req.apply(),\n-            Err(err) => {\n-                error!(\"failed.to.parse: {}\", err);\n-                Err(ProcessError {\n-                    reason: None,\n-                    error_type: ProcessErrorType::Continue,\n-                })\n-            }\n-        }\n-    }\n-}\n+//         match request {\n+//             Ok(req) => req.apply(),\n+//             Err(err) => {\n+//                 error!(\"failed.to.parse: {}\", err);\n+//                 Err(ProcessError {\n+//                     reason: None,\n+//                     error_type: ProcessErrorType::Continue,\n+//                 })\n+//             }\n+//         }\n+//     }\n+// }\n \n pub struct BaseMessage {\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n"
                },
                {
                    "date": 1643652196437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n     fn payload(&self) -> Option<Vec<u8>>;\n-    fn apply(&self) -> ProcessResult<Box<dyn Response>>;\n+    // fn apply(&self) -> ProcessResult<Box<dyn Response>>;\n }\n \n pub trait Response {\n     fn correlation_id(&self) -> String;\n"
                },
                {
                    "date": 1643652218375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n     }\n }\n \n pub mod Actor {\n-    use crate::{CommandHandler, Processor};\n+    use crate::CommandHandler;\n     use common_libs::error::{AppError, AppResult};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n"
                },
                {
                    "date": 1643652227582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n     use common_libs::error::{AppError, AppResult};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{collections::HashMap, sync::{Mutex, Arc}, thread, time::Duration};\n+    use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n \n     lazy_static! {\n         static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n             let mut m = HashMap::new();\n"
                },
                {
                    "date": 1643652271447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,39 +96,39 @@\n     pub status: Option<Status>,\n     pub payload: Option<Vec<u8>>,\n }\n \n-impl Request for Message {\n-    fn correlation_id(&self) -> String {\n-        self.correlation_id\n-    }\n+// impl Request for Message {\n+//     fn correlation_id(&self) -> String {\n+//         self.correlation_id\n+//     }\n \n-    fn from(&self) -> String {\n-        self.from.unwrap()\n-    }\n+//     fn from(&self) -> String {\n+//         self.from.unwrap()\n+//     }\n \n-    fn command(&self) -> Command {\n-        self.command.unwrap()\n-    }\n+//     fn command(&self) -> Command {\n+//         self.command.unwrap()\n+//     }\n \n-    fn payload(&self) -> Option<Vec<u8>> {\n-        self.payload\n-    }\n-}\n+//     fn payload(&self) -> Option<Vec<u8>> {\n+//         self.payload\n+//     }\n+// }\n \n-impl Response for Message {\n-    fn correlation_id(&self) -> String {\n-        self.correlation_id\n-    }\n+// impl Response for Message {\n+//     fn correlation_id(&self) -> String {\n+//         self.correlation_id\n+//     }\n \n-    fn status(&self) -> Status {\n-        self.status.unwrap()\n-    }\n+//     fn status(&self) -> Status {\n+//         self.status.unwrap()\n+//     }\n \n-    fn payload(&self) -> Option<Vec<u8>> {\n-        self.payload\n-    }\n-}\n+//     fn payload(&self) -> Option<Vec<u8>> {\n+//         self.payload\n+//     }\n+// }\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n"
                },
                {
                    "date": 1643652334115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,9 @@\n     }\n \n     pub fn run(\n         registered_name: &str,\n-        receiver: crossbeam::channel::Receiver<SystemMessage>,\n+        receiver: crossbeam::channel::Receiver<Vec<u8>,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643652362355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,14 +260,14 @@\n     }\n \n     pub fn run(\n         registered_name: &str,\n-        receiver: crossbeam::channel::Receiver<Vec<u8>,\n+        receiver: crossbeam::channel::Receiver<Vec<u8>>,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(system_message) if system_message.command.is_some() => {\n+                Ok(system_message) if system_message != vec![] {\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652374774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(system_message) if system_message != vec![] {\n+                Ok(system_message) !system_message.is_empty() {\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652380845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(system_message) !system_message.is_empty() {\n+                Ok(system_message) if !system_message.is_empty() => {\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652386240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(system_message) if !system_message.is_empty() => {\n+                Ok(system_message) {\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652420899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,9 @@\n }\n \n pub mod Actor {\n     use crate::CommandHandler;\n-    use common_libs::error::{AppError, AppResult};\n+    use common_libs::{error::{AppError, AppResult}, utils::from_binary};\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n@@ -265,9 +265,10 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(system_message) {\n+                Ok(binary) {\n+                    let system_message = from_binary<SystemMessage>(binary);\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652430422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(binary) {\n-                    let system_message = from_binary<SystemMessage>(binary);\n+                    let system_message = from_binary:<SystemMessage>(binary);\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652443064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,10 +265,10 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(binary) {\n-                    let system_message = from_binary:<SystemMessage>(binary);\n+                Ok(binary) => {\n+                    let system_message = from_binary::<SystemMessage>(binary);\n                     let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652473385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,11 @@\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(binary) => {\n                     let system_message = from_binary::<SystemMessage>(binary);\n-                    let from = system_message.from();\n+                    if system_message.is_ok() {\n+\n+                        let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n                             info!(\"Command {} has been sent from {}\", command, &from);\n@@ -302,8 +304,11 @@\n                         SystemCommand::Seq(seq) => {\n                             info!(\"Command {} has been sent from {}\", command, &from)\n                         }\n                     }\n+\n+                    }\n+                    \n                 }\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n"
                },
                {
                    "date": 1643652493405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,11 +266,11 @@\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(binary) => {\n-                    let system_message = from_binary::<SystemMessage>(binary);\n-                    if system_message.is_ok() {\n-\n+                    let res = from_binary::<SystemMessage>(binary);\n+                    if res.is_ok() {\n+                        let system_message = res.unwrap();\n                         let from = system_message.from();\n                     let command = system_message.command.unwrap();\n                     match command {\n                         SystemCommand::Ping => {\n"
                },
                {
                    "date": 1643652501050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,12 @@\n }\n \n pub mod Actor {\n     use crate::CommandHandler;\n-    use common_libs::{error::{AppError, AppResult}, utils::from_binary};\n+    use common_libs::{\n+        error::{AppError, AppResult},\n+        utils::from_binary,\n+    };\n     use log::info;\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n@@ -270,45 +273,43 @@\n                     let res = from_binary::<SystemMessage>(binary);\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from();\n-                    let command = system_message.command.unwrap();\n-                    match command {\n-                        SystemCommand::Ping => {\n-                            info!(\"Command {} has been sent from {}\", command, &from);\n-                            exchange_command(\n-                                registered_name.to_string(),\n-                                from.clone(),\n-                                SystemCommand::Pong,\n-                            );\n+                        let command = system_message.command.unwrap();\n+                        match command {\n+                            SystemCommand::Ping => {\n+                                info!(\"Command {} has been sent from {}\", command, &from);\n+                                exchange_command(\n+                                    registered_name.to_string(),\n+                                    from.clone(),\n+                                    SystemCommand::Pong,\n+                                );\n+                            }\n+                            SystemCommand::Pong => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Ack => {\n+                                info!(\"Command {} has been sent from {}\", command, &from);\n+                                exchange_command(\n+                                    registered_name.to_string(),\n+                                    from.clone(),\n+                                    SystemCommand::Seq(123),\n+                                );\n+                            }\n+                            SystemCommand::NoAck => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Ok => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Err => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Seq(seq) => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n                         }\n-                        SystemCommand::Pong => {\n-                            info!(\"Command {} has been sent from {}\", command, &from)\n-                        }\n-                        SystemCommand::Ack => {\n-                            info!(\"Command {} has been sent from {}\", command, &from);\n-                            exchange_command(\n-                                registered_name.to_string(),\n-                                from.clone(),\n-                                SystemCommand::Seq(123),\n-                            );\n-                        }\n-                        SystemCommand::NoAck => {\n-                            info!(\"Command {} has been sent from {}\", command, &from)\n-                        }\n-                        SystemCommand::Ok => {\n-                            info!(\"Command {} has been sent from {}\", command, &from)\n-                        }\n-                        SystemCommand::Err => {\n-                            info!(\"Command {} has been sent from {}\", command, &from)\n-                        }\n-                        SystemCommand::Seq(seq) => {\n-                            info!(\"Command {} has been sent from {}\", command, &from)\n-                        }\n                     }\n-\n-                    }\n-                    \n                 }\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n"
                },
                {
                    "date": 1643652518710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,9 @@\n                                 info!(\"Command {} has been sent from {}\", command, &from)\n                             }\n                         }\n                     }\n-                }\n+                }}\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643652525228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,10 @@\n                                 info!(\"Command {} has been sent from {}\", command, &from)\n                             }\n                         }\n                     }\n-                }}\n+                }\n+            }\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643652576877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,11 +307,13 @@\n                             SystemCommand::Seq(seq) => {\n                                 info!(\"Command {} has been sent from {}\", command, &from)\n                             }\n                         }\n+                    } else {\n+                        error!(\"invalid.message from: {}\", from);\n                     }\n                 }\n-            }\n+            \n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643652587403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n-    use log::info;\n+    use log::{info, error};\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n \n"
                },
                {
                    "date": 1643652593552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n                         }\n                     } else {\n                         error!(\"invalid.message from: {}\", from);\n                     }\n-                }\n+                },\n             \n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n"
                },
                {
                    "date": 1643652602550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,18 +310,12 @@\n                         }\n                     } else {\n                         error!(\"invalid.message from: {}\", from);\n                     }\n-                },\n-            \n-                Err(_) => {\n+                },rr(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n-                _ => {\n-                    info!(\"to be implemented....\");\n-                    continue;\n-                }\n             }\n         }\n \n         Ok(())\n"
                },
                {
                    "date": 1643652653878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,16 +250,11 @@\n         let mut actors = ACTORS.lock().unwrap();\n         let destination = actors.get(to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n-            let system_message = SystemMessage {\n-                from,\n-                payload: None,\n-                correlation_id: None,\n-                command,\n-            };\n+            \n \n-            let _ = handler.send(system_message);\n+            let _ = handler.send(vec![]);\n         }\n     }\n \n     pub fn run(\n@@ -310,9 +305,10 @@\n                         }\n                     } else {\n                         error!(\"invalid.message from: {}\", from);\n                     }\n-                },rr(_) => {\n+                }\n+                Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n             }\n"
                },
                {
                    "date": 1643652754119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,10 +250,17 @@\n         let mut actors = ACTORS.lock().unwrap();\n         let destination = actors.get(to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n-            \n+            let system_message = SystemMessage {\n+                from,\n+                payload: None,\n+                correlation_id: None,\n+                command,\n+            };\n \n+            let result = serde_json::to_string(&system_message);   \n+\n             let _ = handler.send(vec![]);\n         }\n     }\n \n"
                },
                {
                    "date": 1643652843170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,9 +258,9 @@\n                 command,\n             };\n \n             let result = serde_json::to_string(&system_message);   \n-\n+            Vec::from(result.unwrap().as_bytes());\n             let _ = handler.send(vec![]);\n         }\n     }\n \n"
                },
                {
                    "date": 1643652854989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,10 +258,10 @@\n                 command,\n             };\n \n             let result = serde_json::to_string(&system_message);   \n-            Vec::from(result.unwrap().as_bytes());\n-            let _ = handler.send(vec![]);\n+            let binary = Vec::from(result.unwrap().as_bytes());\n+            let _ = handler.send(binary);\n         }\n     }\n \n     pub fn run(\n"
                },
                {
                    "date": 1643652882139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n         let destination = actors.get(to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n-                from,\n+                from: from.clone(),\n                 payload: None,\n                 correlation_id: None,\n                 command,\n             };\n"
                },
                {
                    "date": 1643652892522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: None,\n                 correlation_id: None,\n-                command,\n+                command: command.clone(),\n             };\n \n             let result = serde_json::to_string(&system_message);   \n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643652906692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n         let mut actors = ACTORS.lock().unwrap();\n-        let destination = actors.get(to);\n+        let destination = actors.get(&to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n                 from: from.clone(),\n"
                },
                {
                    "date": 1643652941992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: None,\n                 correlation_id: None,\n-                command: command.clone(),\n+                command: Some(command.clone()),\n             };\n \n             let result = serde_json::to_string(&system_message);   \n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643653016473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,9 +274,9 @@\n                 Ok(binary) => {\n                     let res = from_binary::<SystemMessage>(binary);\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n-                        let from = system_message.from();\n+                        let from = system_message.from;\n                         let command = system_message.command.unwrap();\n                         match command {\n                             SystemCommand::Ping => {\n                                 info!(\"Command {} has been sent from {}\", command, &from);\n"
                },
                {
                    "date": 1643653069578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,10 +270,10 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(binary) => {\n-                    let res = from_binary::<SystemMessage>(binary);\n+                Ok(bin) => {\n+                    let res = from_binary::<SystemMessage>(bin);\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n"
                },
                {
                    "date": 1643653130582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,41 +276,9 @@\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n-                        match command {\n-                            SystemCommand::Ping => {\n-                                info!(\"Command {} has been sent from {}\", command, &from);\n-                                exchange_command(\n-                                    registered_name.to_string(),\n-                                    from.clone(),\n-                                    SystemCommand::Pong,\n-                                );\n-                            }\n-                            SystemCommand::Pong => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n-                            }\n-                            SystemCommand::Ack => {\n-                                info!(\"Command {} has been sent from {}\", command, &from);\n-                                exchange_command(\n-                                    registered_name.to_string(),\n-                                    from.clone(),\n-                                    SystemCommand::Seq(123),\n-                                );\n-                            }\n-                            SystemCommand::NoAck => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n-                            }\n-                            SystemCommand::Ok => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n-                            }\n-                            SystemCommand::Err => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n-                            }\n-                            SystemCommand::Seq(seq) => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n-                            }\n-                        }\n+                        \n                     } else {\n                         error!(\"invalid.message from: {}\", from);\n                     }\n                 }\n"
                },
                {
                    "date": 1643653151584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,11 +278,11 @@\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n                         \n                     } else {\n-                        error!(\"invalid.message from: {}\", from);\n+                        error!(\"invalid.message from: {}\", from)\n                     }\n-                }\n+                },\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643653161454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,9 +278,9 @@\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n                         \n                     } else {\n-                        error!(\"invalid.message from: {}\", from)\n+                        error!(\"invalid.message from: {}\", from);\n                     }\n                 },\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n"
                },
                {
                    "date": 1643653185358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,19 +270,9 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(bin) => {\n-                    let res = from_binary::<SystemMessage>(bin);\n-                    if res.is_ok() {\n-                        let system_message = res.unwrap();\n-                        let from = system_message.from;\n-                        let command = system_message.command.unwrap();\n-                        \n-                    } else {\n-                        error!(\"invalid.message from: {}\", from);\n-                    }\n-                },\n+                Ok(bin) => info!(\"xxxx\"),\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643653241326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(bin) => info!(\"xxxx\"),\n+                Ok(bin) => break,\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643653271055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,52 @@\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(bin) => break,\n+                Ok(bin) => {\n+                    let res = from_binary::<SystemMessage>(bin);\n+                    if res.is_ok() {\n+                        let system_message = res.unwrap();\n+                        let from = system_message.from;\n+                        let command = system_message.command.unwrap();\n+                        match command {\n+                            SystemCommand::Ping => {\n+                                info!(\"Command {} has been sent from {}\", command, &from);\n+                                exchange_command(\n+                                    registered_name.to_string(),\n+                                    from.clone(),\n+                                    SystemCommand::Pong,\n+                                );\n+                            }\n+                            SystemCommand::Pong => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Ack => {\n+                                info!(\"Command {} has been sent from {}\", command, &from);\n+                                exchange_command(\n+                                    registered_name.to_string(),\n+                                    from.clone(),\n+                                    SystemCommand::Seq(123),\n+                                );\n+                            }\n+                            SystemCommand::NoAck => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Ok => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Err => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                            SystemCommand::Seq(seq) => {\n+                                info!(\"Command {} has been sent from {}\", command, &from)\n+                            }\n+                        }\n+                    } else {\n+                        error!(\"invalid.message from: {}\", from);\n+                        break;\n+                    }\n+                }\n                 Err(_) => {\n                     info!(\"the servier {} is running.....\", &registered_name);\n                     continue;\n                 }\n"
                },
                {
                    "date": 1643653305089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n                                 info!(\"Command {} has been sent from {}\", command, &from)\n                             }\n                         }\n                     } else {\n-                        error!(\"invalid.message from: {}\", from);\n+                        error!(\"invalid.message from: {}\", &from);\n                         break;\n                     }\n                 }\n                 Err(_) => {\n"
                },
                {
                    "date": 1643653331856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n                                 info!(\"Command {} has been sent from {}\", command, &from)\n                             }\n                         }\n                     } else {\n-                        error!(\"invalid.message from: {}\", &from);\n+                        error!(\"invalid.message\");\n                         break;\n                     }\n                 }\n                 Err(_) => {\n"
                },
                {
                    "date": 1643655816845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,9 +278,9 @@\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n                         match command {\n                             SystemCommand::Ping => {\n-                                info!(\"Command {} has been sent from {}\", command, &from);\n+                                info!(\"Command {?} has been sent from {}\", command, &from);\n                                 exchange_command(\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Pong,\n"
                },
                {
                    "date": 1643655822139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,9 +278,9 @@\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n                         match command {\n                             SystemCommand::Ping => {\n-                                info!(\"Command {?} has been sent from {}\", command, &from);\n+                                info!(\"Command {:?} has been sent from {}\", command, &from);\n                                 exchange_command(\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Pong,\n"
                },
                {
                    "date": 1643655834412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,12 +286,12 @@\n                                     SystemCommand::Pong,\n                                 );\n                             }\n                             SystemCommand::Pong => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Ack => {\n-                                info!(\"Command {} has been sent from {}\", command, &from);\n+                                info!(\"Command {:?} has been sent from {}\", command, &from);\n                                 exchange_command(\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Seq(123),\n"
                },
                {
                    "date": 1643655843803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,18 +297,18 @@\n                                     SystemCommand::Seq(123),\n                                 );\n                             }\n                             SystemCommand::NoAck => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Err => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Seq(seq) => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643655852502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n                             SystemCommand::NoAck => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Ok => {\n-                                info!(\"Command {} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Err => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n"
                },
                {
                    "date": 1643655872428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n                             SystemCommand::Err => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Seq(seq) => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {} with seq: {}\", command, &from, seq)\n                             }\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643702158997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n         }\n     }\n }\n \n-pub mod Actor {\n+pub mod actor {\n     use crate::CommandHandler;\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n"
                },
                {
                    "date": 1643702177492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,9 +246,9 @@\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n-        let mut actors = ACTORS.lock().unwrap();\n+        let actors = ACTORS.lock().unwrap();\n         let destination = actors.get(&to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n"
                },
                {
                    "date": 1643702209387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,4 +324,9 @@\n \n         Ok(())\n     }\n }\n+\n+#[cfg(test)]\n+mod actor_unit_test {\n+    \n+}\n"
                },
                {
                    "date": 1643702266320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,6 +327,11 @@\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n-    \n+\n+    #[test]\n+    fn ping_pong_test() {\n+        \n+    }\n+\n }\n"
                },
                {
                    "date": 1643702363568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n-    use log::{info, error};\n+    use log::{error, info};\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n \n@@ -257,9 +257,9 @@\n                 correlation_id: None,\n                 command: Some(command.clone()),\n             };\n \n-            let result = serde_json::to_string(&system_message);   \n+            let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n             let _ = handler.send(binary);\n         }\n     }\n@@ -306,9 +306,12 @@\n                             SystemCommand::Err => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Seq(seq) => {\n-                                info!(\"Command {:?} has been sent from {} with seq: {}\", command, &from, seq)\n+                                info!(\n+                                    \"Command {:?} has been sent from {} with seq: {}\",\n+                                    command, &from, seq\n+                                )\n                             }\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n@@ -330,8 +333,21 @@\n mod actor_unit_test {\n \n     #[test]\n     fn ping_pong_test() {\n-        \n+        let _ok = start_actor(\"silvester\");\n+        let _ok = start_actor(\"arnold\");\n+        let _ok = start_worker(\"the_client\".to_string());\n+        let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n+        let ping = Message {\n+            command: Command::Ping,\n+            from: \"the_client\".to_string(),\n+            payload: None,\n+            ack: None,\n+            correlation_id: \"1\".to_string(),\n+        };\n+        let json = serde_json::to_string(&ping).unwrap();\n+        println!(\"Sending: {}\", json);\n+        let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+        sleep(Duration::from_secs(2));\n     }\n-\n }\n"
                },
                {
                    "date": 1643702378206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,10 +335,10 @@\n     #[test]\n     fn ping_pong_test() {\n         let _ok = start_actor(\"silvester\");\n         let _ok = start_actor(\"arnold\");\n-        let _ok = start_worker(\"the_client\".to_string());\n-        let cmd_handler = WORKERS.lock().unwrap().get(\"the_server\").unwrap().clone();\n+        \n+        let cmd_handler = ACTORS.lock().unwrap().get(\"the_server\").unwrap().clone();\n         let ping = Message {\n             command: Command::Ping,\n             from: \"the_client\".to_string(),\n             payload: None,\n"
                },
                {
                    "date": 1643702414708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,8 +128,15 @@\n //         self.payload\n //     }\n // }\n \n+lazy_static! {\n+    static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n+        let mut m = HashMap::new();\n+        Mutex::new(m)\n+    };\n+}\n+\n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub enum MessageType {\n     Request,\n     Response,\n@@ -201,15 +208,10 @@\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n \n-    lazy_static! {\n-        static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n-            let mut m = HashMap::new();\n-            Mutex::new(m)\n-        };\n-    }\n \n+\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n         Ping,\n         Pong,\n"
                },
                {
                    "date": 1643702425079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n use log::error;\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n+use crate::CommandHandler;\n+\n pub type ProcessResult<T> = std::result::Result<T, ProcessError>;\n \n #[derive(Debug, Clone, Serialize, Deserialize)]\n pub struct ProcessError {\n"
                },
                {
                    "date": 1643702430878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::fmt::{Display, Formatter};\n+use std::{fmt::{Display, Formatter}, collections::HashMap};\n \n use common_libs::{error::FmtResult, utils::from_binary};\n use log::error;\n use serde::{Deserialize, Serialize};\n"
                },
                {
                    "date": 1643702436439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::{fmt::{Display, Formatter}, collections::HashMap};\n+use std::{fmt::{Display, Formatter}, collections::HashMap, sync::Mutex};\n \n use common_libs::{error::FmtResult, utils::from_binary};\n use log::error;\n use serde::{Deserialize, Serialize};\n"
                },
                {
                    "date": 1643702453388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n     };\n     use log::{error, info};\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{collections::HashMap, sync::Mutex, thread, time::Duration};\n+    use std::{thread, time::Duration};\n \n \n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n"
                },
                {
                    "date": 1643702485769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,10 +210,12 @@\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{thread, time::Duration};\n \n+    use super::ACTORS;\n \n \n+\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n         Ping,\n         Pong,\n"
                },
                {
                    "date": 1643702509662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,11 @@\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n+    use crate::model::ACTORS;\n \n+\n     #[test]\n     fn ping_pong_test() {\n         let _ok = start_actor(\"silvester\");\n         let _ok = start_actor(\"arnold\");\n"
                },
                {
                    "date": 1643702516227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n-    use crate::model::ACTORS;\n+    use crate::model::{ACTORS, actor::start_actor};\n \n \n     #[test]\n     fn ping_pong_test() {\n"
                },
                {
                    "date": 1643702532517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,10 +341,10 @@\n \n \n     #[test]\n     fn ping_pong_test() {\n-        let _ok = start_actor(\"silvester\");\n-        let _ok = start_actor(\"arnold\");\n+        let _ok = start_actor(\"silvester\".to_string());\n+        let _ok = start_actor(\"arnold\".to_string());\n         \n         let cmd_handler = ACTORS.lock().unwrap().get(\"the_server\").unwrap().clone();\n         let ping = Message {\n             command: Command::Ping,\n"
                },
                {
                    "date": 1643702555095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,8 +336,9 @@\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n+    \n     use crate::model::{ACTORS, actor::start_actor};\n \n \n     #[test]\n"
                },
                {
                    "date": 1643702599971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,25 +336,20 @@\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n-    \n-    use crate::model::{ACTORS, actor::start_actor};\n \n+    use crate::model::{ACTORS, actor::{start_actor, exchange_command}};\n \n+\n     #[test]\n     fn ping_pong_test() {\n+        let arnold = \"arnold\".to_string();\n         let _ok = start_actor(\"silvester\".to_string());\n         let _ok = start_actor(\"arnold\".to_string());\n         \n         let cmd_handler = ACTORS.lock().unwrap().get(\"the_server\").unwrap().clone();\n-        let ping = Message {\n-            command: Command::Ping,\n-            from: \"the_client\".to_string(),\n-            payload: None,\n-            ack: None,\n-            correlation_id: \"1\".to_string(),\n-        };\n+        exchange_command(\"from\", to, command)\n         let json = serde_json::to_string(&ping).unwrap();\n         println!(\"Sending: {}\", json);\n         let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n         sleep(Duration::from_secs(2));\n"
                },
                {
                    "date": 1643707153737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,13 +343,14 @@\n \n     #[test]\n     fn ping_pong_test() {\n         let arnold = \"arnold\".to_string();\n-        let _ok = start_actor(\"silvester\".to_string());\n-        let _ok = start_actor(\"arnold\".to_string());\n+        let silvester = \"silvester\".to_string();\n+        let _ok = start_actor(silvester);\n+        let _ok = start_actor(arnold);\n         \n-        let cmd_handler = ACTORS.lock().unwrap().get(\"the_server\").unwrap().clone();\n-        exchange_command(\"from\", to, command)\n+        let cmd_handler = ACTORS.lock().unwrap().get(silvester).unwrap().clone();\n+        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping)\n         let json = serde_json::to_string(&ping).unwrap();\n         println!(\"Sending: {}\", json);\n         let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n         sleep(Duration::from_secs(2));\n"
                },
                {
                    "date": 1643707168359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,10 +347,10 @@\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester);\n         let _ok = start_actor(arnold);\n         \n-        let cmd_handler = ACTORS.lock().unwrap().get(silvester).unwrap().clone();\n-        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping)\n+        let cmd_handler = ACTORS.lock().unwrap().get(&silvester).unwrap().clone();\n+        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);\n         let json = serde_json::to_string(&ping).unwrap();\n         println!(\"Sending: {}\", json);\n         let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n         sleep(Duration::from_secs(2));\n"
                },
                {
                    "date": 1643707195560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,8 +337,10 @@\n \n #[cfg(test)]\n mod actor_unit_test {\n \n+    use std::time::Duration;\n+\n     use crate::model::{ACTORS, actor::{start_actor, exchange_command}};\n \n \n     #[test]\n@@ -348,11 +350,8 @@\n         let _ok = start_actor(silvester);\n         let _ok = start_actor(arnold);\n         \n         let cmd_handler = ACTORS.lock().unwrap().get(&silvester).unwrap().clone();\n-        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);\n-        let json = serde_json::to_string(&ping).unwrap();\n-        println!(\"Sending: {}\", json);\n-        let _ = cmd_handler.sender.try_send(json.as_bytes().to_vec());\n+        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);        \n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643707203195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,9 +337,9 @@\n \n #[cfg(test)]\n mod actor_unit_test {\n \n-    use std::time::Duration;\n+    use std::{time::Duration, thread::sleep};\n \n     use crate::model::{ACTORS, actor::{start_actor, exchange_command}};\n \n \n"
                },
                {
                    "date": 1643707214529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -348,10 +348,8 @@\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester);\n         let _ok = start_actor(arnold);\n-        \n-        let cmd_handler = ACTORS.lock().unwrap().get(&silvester).unwrap().clone();\n         exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);        \n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643707223478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,10 +346,10 @@\n     #[test]\n     fn ping_pong_test() {\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n-        let _ok = start_actor(silvester);\n-        let _ok = start_actor(arnold);\n+        let _ok = start_actor(silvester.clone());\n+        let _ok = start_actor(arnold.clone());\n         exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);        \n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643707253842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,8 +344,9 @@\n \n \n     #[test]\n     fn ping_pong_test() {\n+        configure_log4rs();\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester.clone());\n         let _ok = start_actor(arnold.clone());\n"
                },
                {
                    "date": 1643707266337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,11 +339,13 @@\n mod actor_unit_test {\n \n     use std::{time::Duration, thread::sleep};\n \n-    use crate::model::{ACTORS, actor::{start_actor, exchange_command}};\n+    use common_libs::configure_log4rs;\n \n+    use crate::model::{actor::{start_actor, exchange_command}};\n \n+\n     #[test]\n     fn ping_pong_test() {\n         configure_log4rs();\n         let arnold = \"arnold\".to_string();\n"
                },
                {
                    "date": 1643707928956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,9 @@\n-use std::{fmt::{Display, Formatter}, collections::HashMap, sync::Mutex};\n+use std::{\n+    collections::HashMap,\n+    fmt::{Display, Formatter},\n+    sync::Mutex,\n+};\n \n use common_libs::{error::FmtResult, utils::from_binary};\n use log::error;\n use serde::{Deserialize, Serialize};\n@@ -212,10 +216,8 @@\n     use std::{thread, time::Duration};\n \n     use super::ACTORS;\n \n-\n-\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n         Ping,\n         Pong,\n@@ -284,28 +286,40 @@\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n                         match command {\n                             SystemCommand::Ping => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from);\n+                                info!(\n+                                    \"{} -> Command {:?} has been sent from {}\",\n+                                    &registered_name, command, &from\n+                                );\n                                 exchange_command(\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Pong,\n                                 );\n                             }\n                             SystemCommand::Pong => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from)\n+                                info!(\n+                                    \"{} -> Command {:?} has been sent from {}\",\n+                                    &registered_name, command, &from\n+                                )\n                             }\n                             SystemCommand::Ack => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from);\n+                                info!(\n+                                    \"{} -> Command {:?} has been sent from {}\",\n+                                    &registered_name, command, &from\n+                                );\n                                 exchange_command(\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Seq(123),\n                                 );\n                             }\n                             SystemCommand::NoAck => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from)\n+                                info!(\n+                                    \"{} -> Command {:?} has been sent from {}\",\n+                                    &registered_name, command, &from\n+                                )\n                             }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n@@ -337,22 +351,21 @@\n \n #[cfg(test)]\n mod actor_unit_test {\n \n-    use std::{time::Duration, thread::sleep};\n+    use std::{thread::sleep, time::Duration};\n \n     use common_libs::configure_log4rs;\n \n-    use crate::model::{actor::{start_actor, exchange_command}};\n+    use crate::model::actor::{exchange_command, start_actor};\n \n-\n     #[test]\n     fn ping_pong_test() {\n         configure_log4rs();\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester.clone());\n         let _ok = start_actor(arnold.clone());\n-        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);        \n+        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);\n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643707988663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,7 +365,8 @@\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester.clone());\n         let _ok = start_actor(arnold.clone());\n         exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);\n+        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ack);\n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643708006955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,9 +364,9 @@\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester.clone());\n         let _ok = start_actor(arnold.clone());\n-        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ping);\n-        exchange_command(silvester, arnold, crate::model::actor::SystemCommand::Ack);\n+        exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::Ping);\n+        exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::Ack);\n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643708093165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,8 +222,9 @@\n         Ping,\n         Pong,\n         Ack,\n         NoAck,\n+        HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n     }\n"
                },
                {
                    "date": 1643708129707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,8 +320,11 @@\n                                     \"{} -> Command {:?} has been sent from {}\",\n                                     &registered_name, command, &from\n                                 )\n                             }\n+                            SystemCommand::HealthCheck => {\n+                                info!(\"Command {:?} has been sent from {}\", command, &from)\n+                            }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n                             SystemCommand::Err => {\n"
                },
                {
                    "date": 1643708150290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n                                     &registered_name, command, &from\n                                 )\n                             }\n                             SystemCommand::HealthCheck => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from)\n+                                info!(\"{} -> Command {:?} has been sent from {}\", &registered_name,command, &from)\n                             }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n"
                },
                {
                    "date": 1643708169530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,14 @@\n                                     &registered_name, command, &from\n                                 )\n                             }\n                             SystemCommand::HealthCheck => {\n-                                info!(\"{} -> Command {:?} has been sent from {}\", &registered_name,command, &from)\n+                                info!(\"{} -> Command {:?} has been sent from {}\", &registered_name,command, &from);\n+                                exchange_command(\n+                                    registered_name.to_string(),\n+                                    from.clone(),\n+                                    SystemCommand::Ok,\n+                                );\n                             }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from)\n                             }\n"
                },
                {
                    "date": 1643708186846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,7 +375,8 @@\n         let _ok = start_actor(silvester.clone());\n         let _ok = start_actor(arnold.clone());\n         exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::Ping);\n         exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::Ack);\n+        exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::HealthCheck);\n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643708440609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,12 +329,14 @@\n                                     SystemCommand::Ok,\n                                 );\n                             }\n                             SystemCommand::Ok => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {}\", command, &from);\n+                                continue;\n                             }\n                             SystemCommand::Err => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from)\n+                                info!(\"Command {:?} has been sent from {}\", command, &from);\n+                                continue;\n                             }\n                             SystemCommand::Seq(seq) => {\n                                 info!(\n                                     \"Command {:?} has been sent from {} with seq: {}\",\n"
                },
                {
                    "date": 1643708449027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,8 +327,9 @@\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Ok,\n                                 );\n+                                continue;\n                             }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from);\n                                 continue;\n"
                },
                {
                    "date": 1643708463408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,9 +301,10 @@\n                             SystemCommand::Pong => {\n                                 info!(\n                                     \"{} -> Command {:?} has been sent from {}\",\n                                     &registered_name, command, &from\n-                                )\n+                                );\n+                                continue;\n                             }\n                             SystemCommand::Ack => {\n                                 info!(\n                                     \"{} -> Command {:?} has been sent from {}\",\n"
                },
                {
                    "date": 1643708473303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,8 +296,9 @@\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Pong,\n                                 );\n+                                continue;\n                             }\n                             SystemCommand::Pong => {\n                                 info!(\n                                     \"{} -> Command {:?} has been sent from {}\",\n"
                },
                {
                    "date": 1643718186000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,8 +216,9 @@\n     use std::{thread, time::Duration};\n \n     use super::ACTORS;\n \n+    \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n         Ping,\n         Pong,\n@@ -242,8 +243,12 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n+    pub trait MessageHandler {\n+        fn<S>(message: Vec<u8>) -> ProcessResult<S>;\n+    }\n+\n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n@@ -346,8 +351,13 @@\n                                     command, &from, seq\n                                 )\n                             }\n                         }\n+\n+                        if system_message.payload.is_some() {\n+\n+                        }\n+\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n                     }\n"
                },
                {
                    "date": 1643718192580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandler {\n+    pub trait MessageHandler<S> {\n         fn<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643718198271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n         fn body() -> Vec<u8>;\n     }\n \n     pub trait MessageHandler<S> {\n-        fn<S>(message: Vec<u8>) -> ProcessResult<S>;\n+        fn(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643718221693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandler<S> {\n+    pub trait <S> MessageHandler<S> {\n         fn(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643718234867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait <S> MessageHandler<S> {\n+    pub trait MessageHandler<S> {\n         fn(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643718240954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n         fn body() -> Vec<u8>;\n     }\n \n     pub trait MessageHandler<S> {\n-        fn(message: Vec<u8>) -> ProcessResult<S>;\n+        fn handle(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643718247382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n     use serde::{Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{thread, time::Duration};\n \n-    use super::ACTORS;\n+    use super::{ACTORS, ProcessResult};\n \n     \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n"
                },
                {
                    "date": 1643718260264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,10 +243,10 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandler<S> {\n-        fn handle(message: Vec<u8>) -> ProcessResult<S>;\n+    pub trait MessageHandler {\n+        fn <S> handle(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643718270563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,10 +243,10 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandler {\n-        fn <S> handle(message: Vec<u8>) -> ProcessResult<S>;\n+    pub trait MessageHandle {\n+        fn handle(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643718278236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n         fn body() -> Vec<u8>;\n     }\n \n     pub trait MessageHandle {\n-        fn handle(message: Vec<u8>) -> ProcessResult<S>;\n+        fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643718332793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandle {\n+    pub trait MessageHandler {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643718716493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,10 @@\n         fn body() -> Vec<u8>;\n     }\n \n     pub trait MessageHandler {\n-        fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n+        type Output;\n+        fn handle(message: Vec<u8>) -> ProcessResult<Self::Output>;\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643718773114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         type Output;\n         fn handle(message: Vec<u8>) -> ProcessResult<Self::Output>;\n     }\n \n-    pub fn start_actor(actor_name: String) -> AppResult<()> {\n+    pub fn start_actor(actor_name: String, handler: impl MessageHandler) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1643718797382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,8 +281,9 @@\n \n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+        handler: impl MessageHandler\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643718828419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n                             }\n                         }\n \n                         if system_message.payload.is_some() {\n-\n+                                let result = handler\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643718892060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,10 @@\n                             }\n                         }\n \n                         if system_message.payload.is_some() {\n-                                let result = handler\n+                            let binary = system_message.payload.unwrap();\n+                            let result = handler.handle(binary);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643718932192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,10 +244,9 @@\n         fn body() -> Vec<u8>;\n     }\n \n     pub trait MessageHandler {\n-        type Output;\n-        fn handle(message: Vec<u8>) -> ProcessResult<Self::Output>;\n+        fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     pub fn start_actor(actor_name: String, handler: impl MessageHandler) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643718961230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handler.handle(binary);\n+                            let result = MessageHandler::handle<T>(binary);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643718973621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = MessageHandler::handle<T>(binary);\n+                            let result = MessageHandler::handle<T>(binary).unwrap();\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643719061499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,10 +279,9 @@\n     }\n \n     pub fn run(\n         registered_name: &str,\n-        receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        handler: impl MessageHandler\n+        receiver: crossbeam::channel::Receiver<Vec<u8>>\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643719078543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n     pub trait MessageHandler {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n-    pub fn start_actor(actor_name: String, handler: impl MessageHandler) -> AppResult<()> {\n+    pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1643719664840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,8 +371,10 @@\n         }\n \n         Ok(())\n     }\n+\n+    fn handle(bin: Vec<u8>>)\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n"
                },
                {
                    "date": 1643719691461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,9 +372,11 @@\n \n         Ok(())\n     }\n \n-    fn handle(bin: Vec<u8>>)\n+    fn handle<S: Message>(bin: Vec<u8>>) -> ProcessResult<S>{\n+        \n+    }\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n"
                },
                {
                    "date": 1643719724905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,9 +373,9 @@\n         Ok(())\n     }\n \n     fn handle<S: Message>(bin: Vec<u8>>) -> ProcessResult<S>{\n-        \n+\n     }\n }\n \n #[cfg(test)]\n"
                },
                {
                    "date": 1643719750493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,9 +373,9 @@\n         Ok(())\n     }\n \n     fn handle<S: Message>(bin: Vec<u8>>) -> ProcessResult<S>{\n-\n+        Ok()\n     }\n }\n \n #[cfg(test)]\n"
                },
                {
                    "date": 1643719788821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,9 +372,10 @@\n \n         Ok(())\n     }\n \n-    fn handle<S: Message>(bin: Vec<u8>>) -> ProcessResult<S>{\n+    fn handle<Req: Message, Res: Message>(bin: Vec<u8>>) -> ProcessResult<S>{\n+        \n         Ok()\n     }\n }\n \n"
                },
                {
                    "date": 1643719811775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,9 +373,9 @@\n         Ok(())\n     }\n \n     fn handle<Req: Message, Res: Message>(bin: Vec<u8>>) -> ProcessResult<S>{\n-        \n+        let req = from_binary<Req>(bin);\n         Ok()\n     }\n }\n \n"
                },
                {
                    "date": 1643719836180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,9 +372,9 @@\n \n         Ok(())\n     }\n \n-    fn handle<Req: Message, Res: Message>(bin: Vec<u8>>) -> ProcessResult<S>{\n+    fn handle<Req: Message, Res: Message>(bin: Vec<u8>>) -> ProcessResult<Res>{\n         let req = from_binary<Req>(bin);\n         Ok()\n     }\n }\n"
                },
                {
                    "date": 1643719852219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,12 +372,8 @@\n \n         Ok(())\n     }\n \n-    fn handle<Req: Message, Res: Message>(bin: Vec<u8>>) -> ProcessResult<Res>{\n-        let req = from_binary<Req>(bin);\n-        Ok()\n-    }\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n"
                },
                {
                    "date": 1643719905368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,8 +247,12 @@\n     pub trait MessageHandler {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n+    fn handle_message<Req, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n+\n+    }\n+\n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n"
                },
                {
                    "date": 1643719940632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     fn handle_message<Req, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n-\n+        let req = from_binary<Req>(binary);\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643719948551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     fn handle_message<Req, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n-        let req = from_binary<Req>(binary);\n+        let req = from_binary<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643719967799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n     pub trait MessageHandler {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n-    fn handle_message<Req, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n+    fn handle_message<Req: Size + Deserialize, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n         let req = from_binary<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643719974033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n     pub trait MessageHandler {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n-    fn handle_message<Req: Size + Deserialize, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n+    fn handle_message<Req: Sized + Deserialize, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n         let req = from_binary<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643719982576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n     use log::{error, info};\n-    use serde::{Deserialize, Serialize};\n+    use serde::{Deserialize, Serialize, de::DeserializeOwned};\n     use serde_json::Map;\n     use std::{thread, time::Duration};\n \n     use super::{ACTORS, ProcessResult};\n@@ -247,9 +247,9 @@\n     pub trait MessageHandler {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n-    fn handle_message<Req: Sized + Deserialize, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n+    fn handle_message<Req: Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n         let req = from_binary<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643719997012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n     pub trait MessageHandler {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n-    fn handle_message<Req: Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n         let req = from_binary<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643720010449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n-        let req = from_binary<Req>(binary).unwrap();\n+        let req = from_binary::<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643720684915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandler {\n+    pub trait MessageHandler<Res = RHS> {\n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n"
                },
                {
                    "date": 1643720706790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,10 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandler<Res = RHS> {\n+    pub trait MessageHandler<Rhs = Sefl> {\n+        type \n         fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n"
                },
                {
                    "date": 1643720730825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,11 +243,11 @@\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n-    pub trait MessageHandler<Rhs = Sefl> {\n-        type \n-        fn handle<S>(message: Vec<u8>) -> ProcessResult<S>;\n+    pub trait MessageHandler<Rhs = Self> {\n+        type Output\n+        fn handle(message: Vec<u8>) -> ProcessResult<S>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n"
                },
                {
                    "date": 1643720744506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,9 @@\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output\n-        fn handle(message: Vec<u8>) -> ProcessResult<S>;\n+        fn handle(message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n"
                },
                {
                    "date": 1643720757327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n         fn body() -> Vec<u8>;\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n-        type Output\n+        type Output;\n         fn handle(message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n"
                },
                {
                    "date": 1643720785980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         type Output;\n         fn handle(message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n-    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>) -> ProcessResult<Res> {\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: MessageHandler) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643720817669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,12 +245,12 @@\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n-        fn handle(message: Rhs) -> ProcessResult<Self::Output>;\n+        fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n-    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: MessageHandler) -> ProcessResult<Res> {\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643720869782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         type Output;\n         fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n-    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: MessageHandler<Req>) -> ProcessResult<Res> {\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643720887576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,8 +250,9 @@\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n+        let res = handler.handle(req);\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643720892875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,8 +251,9 @@\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n         let res = handler.handle(req);\n+        res\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643720997194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,9 @@\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n-        fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n+        fn handle(self, message: Rhs) -> Self::Output;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n"
                },
                {
                    "date": 1643721019943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n-        let res = handler.handle(req);\n+        let res: MessageHandler::Output = handler.handle(req);\n         res\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643721028895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n-        let res: MessageHandler::Output = handler.handle(req);\n+        let res: Res = handler.handle(req);\n         res\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n"
                },
                {
                    "date": 1643721043626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n         let res: Res = handler.handle(req);\n-        res\n+        Ok(res)\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643721072415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         type Output;\n         fn handle(self, message: Rhs) -> Self::Output;\n     }\n \n-    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req>) -> ProcessResult<Res> {\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n         let res: Res = handler.handle(req);\n         Ok(res)\n     }\n"
                },
                {
                    "date": 1643721148460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,9 @@\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n-        fn handle(self, message: Rhs) -> Self::Output;\n+        fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n"
                },
                {
                    "date": 1643721157758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,10 +250,9 @@\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n-        let res: Res = handler.handle(req);\n-        Ok(res)\n+        andler.handle(req)\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643721165815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n-        andler.handle(req)\n+        handler.handle(req)\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n"
                },
                {
                    "date": 1643721197044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -360,9 +360,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = MessageHandler::handle<T>(binary).unwrap();\n+                            let result = handle_message<Message, Message>;\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721209080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -360,9 +360,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message<Message, Message>;\n+                            let result = handle_message::<Message, Message>(binary);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721268861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,10 @@\n     }\n \n     pub fn run(\n         registered_name: &str,\n-        receiver: crossbeam::channel::Receiver<Vec<u8>>\n+        receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643721293954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<Message, Message>(binary);\n+                            let result = handle_message::<Message, Message>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721316380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<Message, Message>(binary, message_handler);\n+                            let result = handle_message::<dyn Messagesage, Message>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721324158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<dyn Messagesage, Message>(binary, message_handler);\n+                            let result = handle_message::<dyn Messagesage, dyn Message>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721341009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<dyn Messagesage, dyn Message>(binary, message_handler);\n+                            let result = handle_message::<impl Messagesage, impl Message>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721352142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<impl Messagesage, impl Message>(binary, message_handler);\n+                            let result = handle_message::<impl Messagesage, Box<dyn Message>>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721370145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<impl Messagesage, Box<dyn Message>>(binary, message_handler);\n+                            let result = handle_message::<Box<dyn Message>, Box<dyn Message>>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721389581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<Box<dyn Message>, Box<dyn Message>>(binary, message_handler);\n+                            let result = handle_message::<dyn Messagesage, dyn Message>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721404713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<dyn Messagesage, dyn Message>(binary, message_handler);\n+                            let result = handle_message::<dyn Message, dyn Message>(binary, message_handler);\n                         }\n \n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721444822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n         type Output;\n         fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n-    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> ProcessResult<Res> {\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req, Output = Res>) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n"
                },
                {
                    "date": 1643721494612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,10 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n-    pub trait Message {\n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+        pub trait Message {\n         fn headers() -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n"
                },
                {
                    "date": 1643721506630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n         pub trait Message {\n-        fn headers() -> Vec<Map<String, String>>;\n+        fn headers(self) -> Vec<Map<String, String>>;\n         fn command() -> Option<String>;\n         fn body() -> Vec<u8>;\n     }\n \n"
                },
                {
                    "date": 1643721562681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,11 +239,11 @@\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n         pub trait Message {\n-        fn headers(self) -> Vec<Map<String, String>>;\n-        fn command() -> Option<String>;\n-        fn body() -> Vec<u8>;\n+        fn headers(&self) -> Vec<Map<String, String>>;\n+        fn command(&self) -> Option<String>;\n+        fn body(&self) -> Vec<u8>;\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n"
                },
                {
                    "date": 1643721620595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]\n+    \n         pub trait Message {\n         fn headers(&self) -> Vec<Map<String, String>>;\n         fn command(&self) -> Option<String>;\n         fn body(&self) -> Vec<u8>;\n"
                },
                {
                    "date": 1643721627001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,15 +210,14 @@\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n     use log::{error, info};\n-    use serde::{Deserialize, Serialize, de::DeserializeOwned};\n+    use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{thread, time::Duration};\n \n-    use super::{ACTORS, ProcessResult};\n+    use super::{ProcessResult, ACTORS};\n \n-    \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n         Ping,\n         Pong,\n@@ -237,10 +236,9 @@\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n     }\n \n-    \n-        pub trait Message {\n+    pub trait Message {\n         fn headers(&self) -> Vec<Map<String, String>>;\n         fn command(&self) -> Option<String>;\n         fn body(&self) -> Vec<u8>;\n     }\n@@ -249,9 +247,12 @@\n         type Output;\n         fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n-    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(binary: Vec<u8>, handler: impl MessageHandler<Req, Output = Res>) -> ProcessResult<Res> {\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n+        binary: Vec<u8>,\n+        handler: impl MessageHandler<Req, Output = Res>,\n+    ) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n@@ -287,9 +288,9 @@\n \n     pub fn run(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n@@ -336,9 +337,12 @@\n                                     &registered_name, command, &from\n                                 )\n                             }\n                             SystemCommand::HealthCheck => {\n-                                info!(\"{} -> Command {:?} has been sent from {}\", &registered_name,command, &from);\n+                                info!(\n+                                    \"{} -> Command {:?} has been sent from {}\",\n+                                    &registered_name, command, &from\n+                                );\n                                 exchange_command(\n                                     registered_name.to_string(),\n                                     from.clone(),\n                                     SystemCommand::Ok,\n@@ -362,11 +366,11 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result = handle_message::<dyn Message, dyn Message>(binary, message_handler);\n+                            let result =\n+                                handle_message::<dyn Message, dyn Message>(binary, message_handler);\n                         }\n-\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n                     }\n@@ -379,9 +383,8 @@\n         }\n \n         Ok(())\n     }\n-\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n@@ -398,10 +401,22 @@\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester.clone());\n         let _ok = start_actor(arnold.clone());\n-        exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::Ping);\n-        exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::Ack);\n-        exchange_command(silvester.clone(), arnold.clone(), crate::model::actor::SystemCommand::HealthCheck);\n+        exchange_command(\n+            silvester.clone(),\n+            arnold.clone(),\n+            crate::model::actor::SystemCommand::Ping,\n+        );\n+        exchange_command(\n+            silvester.clone(),\n+            arnold.clone(),\n+            crate::model::actor::SystemCommand::Ack,\n+        );\n+        exchange_command(\n+            silvester.clone(),\n+            arnold.clone(),\n+            crate::model::actor::SystemCommand::HealthCheck,\n+        );\n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643721659731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn run(\n+    pub fn run<Req, Res>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643721675595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn run<Req, Res>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643721688981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result =\n-                                handle_message::<dyn Message, dyn Message>(binary, message_handler);\n+                                handle_message::<Req, Res>(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643721743341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result =\n-                                handle_message::<Req, Res>(binary, message_handler);\n+                                handle_message::<dyn Req, Res>(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643721753136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result =\n-                                handle_message::<dyn Req, Res>(binary, message_handler);\n+                                handle_message::<dyn Req, impl Res>(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643721762761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result =\n-                                handle_message::<dyn Req, impl Res>(binary, message_handler);\n+                                handle_message::<dyn Req, Res>(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643721808531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result =\n-                                handle_message::<dyn Req, Res>(binary, message_handler);\n+                                handle_message::<Req, Res>(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643721847050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result =\n-                                handle_message::<Req, Res>(binary, message_handler);\n+                                handle_message::(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643721855217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result =\n-                                handle_message::(binary, message_handler);\n+                                handle_message::<Req, Res>(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643721981412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,9 +366,9 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result =\n+                            let result: ProcessResult<Res> =\n                                 handle_message::<Req, Res>(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n"
                },
                {
                    "date": 1643721989449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let result: ProcessResult<Res> =\n-                                handle_message::<Req, Res>(binary, message_handler);\n+                                handle_message(binary, message_handler);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643722257840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,10 +366,16 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let result: ProcessResult<Res> =\n-                                handle_message(binary, message_handler);\n+                            let response: ProcessResult<Res> =\n+                                match handle_message(binary, message_handler){\n+                                    Ok(res) => res,\n+                                    Err(err) => {\n+                                        error!(\"failure.to.process.message: {}\", err)\n+                                        continue;\n+                                    },\n+                                }\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643722263644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n                             let response: ProcessResult<Res> =\n                                 match handle_message(binary, message_handler){\n                                     Ok(res) => res,\n                                     Err(err) => {\n-                                        error!(\"failure.to.process.message: {}\", err)\n+                                        error!(\"failure.to.process.message: {}\", err);\n                                         continue;\n                                     },\n                                 }\n                         }\n"
                },
                {
                    "date": 1643722268822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n                             let response: ProcessResult<Res> =\n                                 match handle_message(binary, message_handler){\n                                     Ok(res) => res,\n                                     Err(err) => {\n-                                        error!(\"failure.to.process.message: {}\", err);\n+                                        error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     },\n                                 }\n                         }\n"
                },
                {
                    "date": 1643722282062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,9 +373,9 @@\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     },\n-                                }\n+                                };\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643722291382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,9 @@\n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let response: ProcessResult<Res> =\n                                 match handle_message(binary, message_handler){\n-                                    Ok(res) => res,\n+                                    Ok(res:Res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     },\n"
                },
                {
                    "date": 1643722306410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,11 +366,11 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let response: ProcessResult<Res> =\n+                            let response: Res =\n                                 match handle_message(binary, message_handler){\n-                                    Ok(res:Res) => res,\n+                                    Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     },\n"
                },
                {
                    "date": 1643722387880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,9 +374,10 @@\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     },\n                                 };\n-                        }\n+                            let json = serde_json::to_string(&response)    \n+                        }   \n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n                     }\n"
                },
                {
                    "date": 1643722393490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,9 +374,9 @@\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     },\n                                 };\n-                            let json = serde_json::to_string(&response)    \n+                            let json = serde_json::to_string(&response).unwrap();\n                         }   \n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643722417119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res:?Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643722423205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res:?Sized + Serialize>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643723066149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,9 +387,8 @@\n                     continue;\n                 }\n             }\n         }\n-\n         Ok(())\n     }\n }\n \n"
                },
                {
                    "date": 1643723110543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,8 +285,26 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n+    pub fn exchange_message(from: String, to: String, message: String) {\n+        let actors = ACTORS.lock().unwrap();\n+        let destination = actors.get(&to);\n+        if destination.is_some() {\n+            let handler = destination.unwrap();\n+            let system_message = SystemMessage {\n+                from: from.clone(),\n+                payload: None,\n+                correlation_id: None,\n+                command: Some(command.clone()),\n+            };\n+\n+            let result = serde_json::to_string(&system_message);\n+            let binary = Vec::from(result.unwrap().as_bytes());\n+            let _ = handler.send(binary);\n+        }\n+    }\n+\n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n"
                },
                {
                    "date": 1643723145710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: None,\n                 correlation_id: None,\n-                command: Some(command.clone()),\n+                command: None,\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643724124587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,9 +292,9 @@\n         if destination.is_some() {\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n                 from: from.clone(),\n-                payload: None,\n+                payload: Some(Vec::from(message.bytes())),\n                 correlation_id: None,\n                 command: None,\n             };\n \n"
                },
                {
                    "date": 1643724160074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,9 +292,9 @@\n         if destination.is_some() {\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n                 from: from.clone(),\n-                payload: Some(Vec::from(message.bytes())),\n+                payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id: None,\n                 command: None,\n             };\n \n"
                },
                {
                    "date": 1643724186652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id: None,\n-                command: None,\n+                command: Some(Seq(11)),\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643724196041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id: None,\n-                command: Some(Seq(11)),\n+                command: Some(SystemCommand::Seq(11)),\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643724208357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id: None,\n-                command: Some(SystemCommand::Seq(11)),\n+                command: Some(SystemCommand::Ok),\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643724239720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,17 +285,17 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn exchange_message(from: String, to: String, message: String) {\n+    pub fn exchange_message(from: String, to: String, message: String, correlation_id: String) {\n         let actors = ACTORS.lock().unwrap();\n         let destination = actors.get(&to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n-                correlation_id: None,\n+                correlation_id: Some(correlation_id),\n                 command: Some(SystemCommand::Ok),\n             };\n \n             let result = serde_json::to_string(&system_message);\n"
                },
                {
                    "date": 1643724344538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n+    pub fn run<Req: ?Sized + DeserializeOwned + Message, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643724417760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned + Message, Res: Sized + Serialize>(\n+    pub fn run<Req: ?Sized + DeserializeOwned , Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n@@ -393,8 +393,9 @@\n                                         continue;\n                                     },\n                                 };\n                             let json = serde_json::to_string(&response).unwrap();\n+                            exchange_message(from, to, json, r)\n                         }   \n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643724423149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned , Res: Sized + Serialize + Message>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643724459161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,9 +393,10 @@\n                                         continue;\n                                     },\n                                 };\n                             let json = serde_json::to_string(&response).unwrap();\n-                            exchange_message(from, to, json, r)\n+                            exchange_message(registered_name.to_string(),\n+                            from.clone(), json, response)\n                         }   \n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643724518928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,8 +317,9 @@\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from;\n                         let command = system_message.command.unwrap();\n+                        let correlation_id = system_message.correlation_id;\n                         match command {\n                             SystemCommand::Ping => {\n                                 info!(\n                                     \"{} -> Command {:?} has been sent from {}\",\n@@ -394,9 +395,9 @@\n                                     },\n                                 };\n                             let json = serde_json::to_string(&response).unwrap();\n                             exchange_message(registered_name.to_string(),\n-                            from.clone(), json, response)\n+                            from.clone(), json, response.);\n                         }   \n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643724528008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,9 +395,9 @@\n                                     },\n                                 };\n                             let json = serde_json::to_string(&response).unwrap();\n                             exchange_message(registered_name.to_string(),\n-                            from.clone(), json, response.);\n+                            from.clone(), json, correlation_id);\n                         }   \n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643724551128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,9 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn exchange_message(from: String, to: String, message: String, correlation_id: String) {\n+    pub fn exchange_message(from: String, to: String, message: String, correlation_id: Option<String>) {\n         let actors = ACTORS.lock().unwrap();\n         let destination = actors.get(&to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n"
                },
                {
                    "date": 1643724559098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n             let handler = destination.unwrap();\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n-                correlation_id: Some(correlation_id),\n+                correlation_id,\n                 command: Some(SystemCommand::Ok),\n             };\n \n             let result = serde_json::to_string(&system_message);\n"
                },
                {
                    "date": 1643724741266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor(actor_name: String) -> AppResult<()> {\n+    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1643725107340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,10 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String) -> AppResult<()> {\n+    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1643725125268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,17 +256,17 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || run(&actor_name, rx));\n+        let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643729071506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,16 +257,16 @@\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> AppResult<()> {\n-        let mut workers = ACTORS.lock().unwrap();\n-        if workers.contains_key(&actor_name) {\n-            let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n-            return Err(AppError::throw(&msg));\n-        }\n-        let (tx, rx) = crossbeam::channel::unbounded();\n-        workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n+        // let mut workers = ACTORS.lock().unwrap();\n+        // if workers.contains_key(&actor_name) {\n+        //     let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n+        //     return Err(AppError::throw(&msg));\n+        // }\n+        // let (tx, rx) = crossbeam::channel::unbounded();\n+        // workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n+        // let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643729342194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643729362420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,9 +387,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let response: Res =\n-                                match handle_message(binary, message_handler){\n+                                match handle_message(binary, message_handler.clone()){\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n"
                },
                {
                    "date": 1643729381407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,10 +255,9 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>) -> AppResult<()> {\n+    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String) -> AppResult<()> {\n         // let mut workers = ACTORS.lock().unwrap();\n         // if workers.contains_key(&actor_name) {\n         //     let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n         //     return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1643729409107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(actor_name: String) -> AppResult<()> {\n+    pub fn start_actor(actor_name: String) -> AppResult<()> {\n         // let mut workers = ACTORS.lock().unwrap();\n         // if workers.contains_key(&actor_name) {\n         //     let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n         //     return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1643729538465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor(actor_name: String) -> AppResult<()> {\n+    pub fn start_actor(_actor_name: String) -> AppResult<()> {\n         // let mut workers = ACTORS.lock().unwrap();\n         // if workers.contains_key(&actor_name) {\n         //     let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n         //     return Err(AppError::throw(&msg));\n"
                },
                {
                    "date": 1643730598196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,8 +303,12 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n+    pub struct WordList {\n+        words: Vec<String>\n+    }\n+\n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n"
                },
                {
                    "date": 1643730622108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,10 +303,10 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub struct WordList {\n-        words: Vec<String>\n+    #[derive(Debug, Clone, Serialize, Deserialize)]    pub struct WordList {\n+        pub words: Vec<String>\n     }\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n"
                },
                {
                    "date": 1643730629163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,10 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]    pub struct WordList {\n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+    pub struct WordList {\n         pub words: Vec<String>\n     }\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n"
                },
                {
                    "date": 1643732124769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,8 +308,13 @@\n     pub struct WordList {\n         pub words: Vec<String>\n     }\n \n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+    struct WordListHander{\n+\n+    }\n+\n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n"
                },
                {
                    "date": 1643732161526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,8 +313,12 @@\n     struct WordListHander{\n \n     }\n \n+    impl MessageHandler<WordList> for WordListHander{\n+        \n+    }\n+\n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n"
                },
                {
                    "date": 1643732178885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,10 +314,14 @@\n \n     }\n \n     impl MessageHandler<WordList> for WordListHander{\n-        \n+        type Output;\n+\n+        fn handle(self, message: WordList) -> ProcessResult<Self::Output> {\n+        todo!()\n     }\n+    }\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1643732184650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n \n     }\n \n     impl MessageHandler<WordList> for WordListHander{\n-        type Output;\n+        type WordList;\n \n         fn handle(self, message: WordList) -> ProcessResult<Self::Output> {\n         todo!()\n     }\n"
                },
                {
                    "date": 1643732189937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,10 @@\n \n     impl MessageHandler<WordList> for WordListHander{\n         type WordList;\n \n-        fn handle(self, message: WordList) -> ProcessResult<Self::Output> {\n+        fn handle(self, message: WordList) -> ProcessResult<Self::        type WordList;\n+        > {\n         todo!()\n     }\n     }\n \n"
                },
                {
                    "date": 1643732196599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n \n     impl MessageHandler<WordList> for WordListHander{\n         type WordList;\n \n-        fn handle(self, message: WordList) -> ProcessResult<Self::        type WordList;\n+        fn handle(self, message: WordList) -> ProcessResult<WordList>;\n         > {\n         todo!()\n     }\n     }\n"
                },
                {
                    "date": 1643732204731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,10 +316,9 @@\n \n     impl MessageHandler<WordList> for WordListHander{\n         type WordList;\n \n-        fn handle(self, message: WordList) -> ProcessResult<WordList>;\n-        > {\n+        fn handle(self, message: WordList) -> ProcessResult<WordList>{\n         todo!()\n     }\n     }\n \n"
                },
                {
                    "date": 1643732231483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,14 +314,14 @@\n \n     }\n \n     impl MessageHandler<WordList> for WordListHander{\n-        type WordList;\n+        type Output =  <WordList>;\n \n         fn handle(self, message: WordList) -> ProcessResult<WordList>{\n         todo!()\n+        }\n     }\n-    }\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1643732317428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n \n     impl MessageHandler<WordList> for WordListHander{\n         type Output =  <WordList>;\n \n-        fn handle(self, message: WordList) -> ProcessResult<WordList>{\n+        fn handle(self, message: WordList) -> ProcessResult<Self::WordList>{\n         todo!()\n         }\n     }\n \n"
                },
                {
                    "date": 1643732325588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n \n     impl MessageHandler<WordList> for WordListHander{\n         type Output =  <WordList>;\n \n-        fn handle(self, message: WordList) -> ProcessResult<Self::WordList>{\n+        fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n         todo!()\n         }\n     }\n \n"
                },
                {
                    "date": 1643732376184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,13 @@\n     impl MessageHandler<WordList> for WordListHander{\n         type Output =  <WordList>;\n \n         fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n-        todo!()\n+        \n+            Ok(WordList{\n+                words: vec![]\n+            })\n+            \n         }\n     }\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n"
                },
                {
                    "date": 1643732408993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n     struct WordListHander{\n \n     }\n \n-    impl MessageHandler<WordList> for WordListHander{\n+    impl MessageHandler for WordListHander{\n         type Output =  <WordList>;\n \n         fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n         \n"
                },
                {
                    "date": 1643732453856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,10 +313,10 @@\n     struct WordListHander{\n \n     }\n \n-    impl MessageHandler for WordListHander{\n-        type Output =  <WordList>;\n+    impl MessageHandle for WordListHander{\n+        type Output =  WordList;\n \n         fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n         \n             Ok(WordList{\n"
                },
                {
                    "date": 1643732462350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n     struct WordListHander{\n \n     }\n \n-    impl MessageHandle for WordListHander{\n+    impl MessageHandler for WordListHander{\n         type Output =  WordList;\n \n         fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n         \n"
                },
                {
                    "date": 1643732470547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n \n     impl MessageHandler for WordListHander{\n         type Output =  WordList;\n \n-        fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n+        fn handle(self, message: WordListHander) -> ProcessResult<Self::Output>{\n         \n             Ok(WordList{\n                 words: vec![]\n             })\n"
                },
                {
                    "date": 1643732879084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -407,10 +407,12 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n+                            let req = from_binary::<Req>(binary).unwrap();\n+                            let result = message_handler.handle(req);\n                             let response: Res =\n-                                match handle_message(binary, message_handler.clone()){\n+                                match result{\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n"
                },
                {
                    "date": 1643732890224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n@@ -410,9 +410,9 @@\n                             let binary = system_message.payload.unwrap();\n                             let req = from_binary::<Req>(binary).unwrap();\n                             let result = message_handler.handle(req);\n                             let response: Res =\n-                                match result{\n+                                match result {\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n"
                },
                {
                    "date": 1643732927420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res>,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n@@ -408,11 +408,11 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let req = from_binary::<Req>(binary).unwrap();\n-                            let result = message_handler.handle(req);\n+                            let result = message_handler.clone().handle(req);\n                             let response: Res =\n-                                match result {\n+                                match handle_message(binary, message_handler.clone()){\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n"
                },
                {
                    "date": 1643732970699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,12 +313,12 @@\n     struct WordListHander{\n \n     }\n \n-    impl MessageHandler for WordListHander{\n+    impl MessageHandle for WordListHander{\n         type Output =  WordList;\n \n-        fn handle(self, message: WordListHander) -> ProcessResult<Self::Output>{\n+        fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n         \n             Ok(WordList{\n                 words: vec![]\n             })\n@@ -407,10 +407,8 @@\n                         }\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let req = from_binary::<Req>(binary).unwrap();\n-                            let result = message_handler.clone().handle(req);\n                             let response: Res =\n                                 match handle_message(binary, message_handler.clone()){\n                                     Ok(res) => res,\n                                     Err(err) => {\n"
                },
                {
                    "date": 1643733014678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n     struct WordListHander{\n \n     }\n \n-    impl MessageHandle for WordListHander{\n+    impl MessageHandler for WordListHander{\n         type Output =  WordList;\n \n         fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n         \n"
                },
                {
                    "date": 1643733034367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n \n     impl MessageHandler for WordListHander{\n         type Output =  WordList;\n \n-        fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n+        fn handle(self, message: WordListHander) -> ProcessResult<Self::Output>{\n         \n             Ok(WordList{\n                 words: vec![]\n             })\n"
                },
                {
                    "date": 1643733067988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n     struct WordListHander{\n \n     }\n \n-    impl MessageHandler for WordListHander{\n+    impl MessageHandler for WordList{\n         type Output =  WordList;\n \n         fn handle(self, message: WordListHander) -> ProcessResult<Self::Output>{\n         \n"
                },
                {
                    "date": 1643733076408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n \n     impl MessageHandler for WordList{\n         type Output =  WordList;\n \n-        fn handle(self, message: WordListHander) -> ProcessResult<Self::Output>{\n+        fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n         \n             Ok(WordList{\n                 words: vec![]\n             })\n"
                },
                {
                    "date": 1643733082306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n \n     impl MessageHandler for WordList{\n         type Output =  WordList;\n \n-        fn handle(self, message: WordList) -> ProcessResult<Self::Output>{\n+        fn handle(self, _message: WordList) -> ProcessResult<Self::Output>{\n         \n             Ok(WordList{\n                 words: vec![]\n             })\n"
                },
                {
                    "date": 1643733151935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,16 +256,19 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor(_actor_name: String) -> AppResult<()> {\n-        // let mut workers = ACTORS.lock().unwrap();\n-        // if workers.contains_key(&actor_name) {\n-        //     let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n-        //     return Err(AppError::throw(&msg));\n-        // }\n-        // let (tx, rx) = crossbeam::channel::unbounded();\n-        // workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        // let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n+        let mut workers = ACTORS.lock().unwrap();\n+        let wlh = WordListHander{\n+            \n+        };\n+        if workers.contains_key(&actor_name) {\n+            let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n+            return Err(AppError::throw(&msg));\n+        }\n+        let (tx, rx) = crossbeam::channel::unbounded();\n+        workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n+        let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643733168736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n+        let _handler = thread::spawn(move || run(&actor_name, rx, wlh));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643733179871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || run(&actor_name, rx, wlh));\n+        let _handler = thread::spawn(move || run(&_actor_name, rx, wlh));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643733264962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,20 +255,20 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor(_actor_name: String) -> AppResult<()> {\n+    pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n-        let wlh = WordListHander{\n-            \n+        let wlh = WordList{\n+            words: vec![]\n         };\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || run(&_actor_name, rx, wlh));\n+        let _handler = thread::spawn(move || run(&actor_name, rx, wlh));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643733308814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n             \n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + Message>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n     ) -> AppResult<()> {\n"
                },
                {
                    "date": 1643733538397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,10 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor(actor_name: String) -> AppResult<()> {\n+    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733554341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n@@ -267,9 +267,9 @@\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || run(&actor_name, rx, wlh));\n+        let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643733607120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone) -> AppResult<()> {\n+        message_handler: dyn MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733650499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: dyn MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733662851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone>) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req> + dyn MessageHandler<Req, Output = Res> + Clone>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733670910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req> + dyn MessageHandler<Req, Output = Res> + Clone>) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733700790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + std::marker::Send) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733762893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + std::marker::Send) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + std::marker::Send + 'static) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733773409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + std::marker::Send + 'static) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + std::marker::Send) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643733956994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + std::marker::Send) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + FnOnce) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734006723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + FnOnce) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Fn) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734034299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Fn) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Fn() -> ()) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734535461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Fn() -> ()) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Send + sync) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734542612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Send + sync) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Send + Sync) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734580258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Send + Sync) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734606101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req> + dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734623448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req> + dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734632522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req, Output = Res>  + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734689481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req, Output = Res>  + Send + Sync>) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n@@ -332,9 +332,9 @@\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n+        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone>,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643734707123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,9 +332,9 @@\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone>,\n+        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Send + Sync>,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643734737788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734772208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Send + Sync>) -> AppResult<()> {\n+        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n@@ -332,9 +332,9 @@\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Send + Sync>,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643734792066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: Box<dyn MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734798835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req, Output = Res> + Clone + Send + Sync>) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req, Output = Res> + Clone + Send + Sync) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734808257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req, Output = Res> + Clone + Send + Sync) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req, Output = Res> + Send + Sync) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734821458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n         handler.handle(req)\n     }\n \n     pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req, Output = Res> + Send + Sync) -> AppResult<()> {\n+        message_handler: impl MessageHandler<Req, Output = Res> + Clone + Send + Sync) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643734831985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,9 +332,9 @@\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone,\n+        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone  + Send + Sync,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1643738994129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,10 +255,9 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String,\n-        message_handler: impl MessageHandler<Req, Output = Res> + Clone + Send + Sync) -> AppResult<()> {\n+    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643739007630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n             return Err(AppError::throw(&msg));\n         }\n         let (tx, rx) = crossbeam::channel::unbounded();\n         workers.insert(actor_name.clone(), CommandHandler { sender: tx });\n-        let _handler = thread::spawn(move || run(&actor_name, rx, message_handler));\n+        let _handler = thread::spawn(move || run(&actor_name, rx, wlh));\n         Ok(())\n     }\n \n     pub fn exchange_command(from: String, to: String, command: SystemCommand) {\n"
                },
                {
                    "date": 1643739068144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n     impl MessageHandler for WordList{\n         type Output =  WordList;\n \n         fn handle(self, _message: WordList) -> ProcessResult<Self::Output>{\n-        \n+            info!(\"message is being handled....\");\n             Ok(WordList{\n                 words: vec![]\n             })\n             \n"
                },
                {
                    "date": 1643739095410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n         let req = from_binary::<Req>(binary).unwrap();\n         handler.handle(req)\n     }\n \n-    pub fn start_actor<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(actor_name: String) -> AppResult<()> {\n+    pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n         let wlh = WordList{\n             words: vec![]\n         };\n"
                },
                {
                    "date": 1643739170898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,8 +446,10 @@\n     use common_libs::configure_log4rs;\n \n     use crate::model::actor::{exchange_command, start_actor};\n \n+    use super::actor::WordList;\n+\n     #[test]\n     fn ping_pong_test() {\n         configure_log4rs();\n         let arnold = \"arnold\".to_string();\n@@ -469,6 +471,11 @@\n             arnold.clone(),\n             crate::model::actor::SystemCommand::HealthCheck,\n         );\n         sleep(Duration::from_secs(2));\n+\n+        let words = WordList{\n+            words: vec![\"alex\"];\n+        }\n+\n     }\n }\n"
                },
                {
                    "date": 1643739180764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -473,9 +473,9 @@\n         );\n         sleep(Duration::from_secs(2));\n \n         let words = WordList{\n-            words: vec![\"alex\"];\n-        }\n+            words: vec![\"alex\".to_string()]\n+        };\n \n     }\n }\n"
                },
                {
                    "date": 1643739226038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,7 +475,9 @@\n \n         let words = WordList{\n             words: vec![\"alex\".to_string()]\n         };\n+        let json = serde_json::to_string(&response).unwrap();\n+        let payload = Some(Vec::from(json_serde::))\n \n     }\n }\n"
                },
                {
                    "date": 1643739231257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,9 +475,9 @@\n \n         let words = WordList{\n             words: vec![\"alex\".to_string()]\n         };\n-        let json = serde_json::to_string(&response).unwrap();\n+        let json = serde_json::to_string(&words).unwrap();\n         let payload = Some(Vec::from(json_serde::))\n \n     }\n }\n"
                },
                {
                    "date": 1643739244694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,8 +476,8 @@\n         let words = WordList{\n             words: vec![\"alex\".to_string()]\n         };\n         let json = serde_json::to_string(&words).unwrap();\n-        let payload = Some(Vec::from(json_serde::))\n+        let payload = Some(Vec::from(json.as_bytes()))\n \n     }\n }\n"
                },
                {
                    "date": 1643739306497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,8 +476,10 @@\n         let words = WordList{\n             words: vec![\"alex\".to_string()]\n         };\n         let json = serde_json::to_string(&words).unwrap();\n-        let payload = Some(Vec::from(json.as_bytes()))\n+        let payload = Some(Vec::from(json.as_bytes()));\n+        exchange_message(silvester.clone(),\n+        arnold.clone(), json, Some(\"123\".to_string()))\n \n     }\n }\n"
                },
                {
                    "date": 1643739314901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,9 +446,9 @@\n     use common_libs::configure_log4rs;\n \n     use crate::model::actor::{exchange_command, start_actor};\n \n-    use super::actor::WordList;\n+    use super::actor::{WordList, exchange_message};\n \n     #[test]\n     fn ping_pong_test() {\n         configure_log4rs();\n@@ -478,8 +478,8 @@\n         };\n         let json = serde_json::to_string(&words).unwrap();\n         let payload = Some(Vec::from(json.as_bytes()));\n         exchange_message(silvester.clone(),\n-        arnold.clone(), json, Some(\"123\".to_string()))\n+        arnold.clone(), json, Some(\"123\".to_string()));\n \n     }\n }\n"
                },
                {
                    "date": 1643739324165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,9 +476,8 @@\n         let words = WordList{\n             words: vec![\"alex\".to_string()]\n         };\n         let json = serde_json::to_string(&words).unwrap();\n-        let payload = Some(Vec::from(json.as_bytes()));\n         exchange_message(silvester.clone(),\n         arnold.clone(), json, Some(\"123\".to_string()));\n \n     }\n"
                },
                {
                    "date": 1643739331583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,11 +257,9 @@\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n-        let wlh = WordList{\n-            words: vec![]\n-        };\n+        let wlh = WordList { words: vec![] };\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n         }\n@@ -288,9 +286,14 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    pub fn exchange_message(from: String, to: String, message: String, correlation_id: Option<String>) {\n+    pub fn exchange_message(\n+        from: String,\n+        to: String,\n+        message: String,\n+        correlation_id: Option<String>,\n+    ) {\n         let actors = ACTORS.lock().unwrap();\n         let destination = actors.get(&to);\n         if destination.is_some() {\n             let handler = destination.unwrap();\n@@ -308,32 +311,31 @@\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct WordList {\n-        pub words: Vec<String>\n+        pub words: Vec<String>,\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n-    struct WordListHander{\n+    struct WordListHander {}\n \n-    }\n+    impl MessageHandler for WordList {\n+        type Output = WordList;\n \n-    impl MessageHandler for WordList{\n-        type Output =  WordList;\n-\n-        fn handle(self, _message: WordList) -> ProcessResult<Self::Output>{\n+        fn handle(self, _message: WordList) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            Ok(WordList{\n-                words: vec![]\n-            })\n-            \n+            Ok(WordList { words: vec![] })\n         }\n     }\n \n     pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n-        message_handler: impl MessageHandler<Req> + MessageHandler<Req, Output = Res> + Clone  + Send + Sync,\n+        message_handler: impl MessageHandler<Req>\n+            + MessageHandler<Req, Output = Res>\n+            + Clone\n+            + Send\n+            + Sync,\n     ) -> AppResult<()> {\n         info!(\"The actor {} is being started...\", registered_name);\n         loop {\n             match receiver.recv_timeout(Duration::from_secs(1)) {\n@@ -411,19 +413,23 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let response: Res =\n-                                match handle_message(binary, message_handler.clone()){\n+                                match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n-                                    },\n+                                    }\n                                 };\n                             let json = serde_json::to_string(&response).unwrap();\n-                            exchange_message(registered_name.to_string(),\n-                            from.clone(), json, correlation_id);\n-                        }   \n+                            exchange_message(\n+                                registered_name.to_string(),\n+                                from.clone(),\n+                                json,\n+                                correlation_id,\n+                            );\n+                        }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n                     }\n@@ -446,9 +452,9 @@\n     use common_libs::configure_log4rs;\n \n     use crate::model::actor::{exchange_command, start_actor};\n \n-    use super::actor::{WordList, exchange_message};\n+    use super::actor::{exchange_message, WordList};\n \n     #[test]\n     fn ping_pong_test() {\n         configure_log4rs();\n@@ -472,13 +478,16 @@\n             crate::model::actor::SystemCommand::HealthCheck,\n         );\n         sleep(Duration::from_secs(2));\n \n-        let words = WordList{\n-            words: vec![\"alex\".to_string()]\n+        let words = WordList {\n+            words: vec![\"alex\".to_string()],\n         };\n         let json = serde_json::to_string(&words).unwrap();\n-        exchange_message(silvester.clone(),\n-        arnold.clone(), json, Some(\"123\".to_string()));\n-\n+        exchange_message(\n+            silvester.clone(),\n+            arnold.clone(),\n+            json,\n+            Some(\"123\".to_string()),\n+        );\n     }\n }\n"
                },
                {
                    "date": 1643739336980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -488,6 +488,8 @@\n             arnold.clone(),\n             json,\n             Some(\"123\".to_string()),\n         );\n+\n+        sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643739408333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n                                     command, &from, seq\n                                 )\n                             }\n                         }\n-\n+                        info!(\"processing msg payload...\");\n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let response: Res =\n                                 match handle_message(binary, message_handler.clone()) {\n"
                },
                {
                    "date": 1643739448048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,8 +305,9 @@\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n+            info!(\"sending message: {:?}\", result.unwrap());\n             let _ = handler.send(binary);\n         }\n     }\n \n"
                },
                {
                    "date": 1643739461209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n-            info!(\"sending message: {:?}\", result.unwrap());\n+            info!(\"sending message: {:?}\", system_message);\n             let _ = handler.send(binary);\n         }\n     }\n \n"
                },
                {
                    "date": 1643739502542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,9 +397,8 @@\n                                 continue;\n                             }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from);\n-                                continue;\n                             }\n                             SystemCommand::Err => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from);\n                                 continue;\n"
                },
                {
                    "date": 1643739617590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,8 +397,9 @@\n                                 continue;\n                             }\n                             SystemCommand::Ok => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from);\n+                                continue;\n                             }\n                             SystemCommand::Err => {\n                                 info!(\"Command {:?} has been sent from {}\", command, &from);\n                                 continue;\n"
                },
                {
                    "date": 1643739635699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id,\n-                command: Some(SystemCommand::Ok),\n+                command: Some(SystemCommand::Seq(1234)),\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643739689940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n             let system_message = SystemMessage {\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id,\n-                command: Some(SystemCommand::Seq(1234)),\n+                command: None,\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643739796207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,9 +344,11 @@\n                     let res = from_binary::<SystemMessage>(bin);\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from;\n-                        let command = system_message.command.unwrap();\n+                        let command = if system_message.is_some {\n+                            system_message.command.unwrap()\n+                        };\n                         let correlation_id = system_message.correlation_id;\n                         match command {\n                             SystemCommand::Ping => {\n                                 info!(\n"
                },
                {
                    "date": 1643739830805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,11 +344,9 @@\n                     let res = from_binary::<SystemMessage>(bin);\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from;\n-                        let command = if system_message.is_some {\n-                            system_message.command.unwrap()\n-                        };\n+                        let command = system_message.command.unwrap();\n                         let correlation_id = system_message.correlation_id;\n                         match command {\n                             SystemCommand::Ping => {\n                                 info!(\n"
                },
                {
                    "date": 1643739872597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,74 +344,81 @@\n                     let res = from_binary::<SystemMessage>(bin);\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from;\n-                        let command = system_message.command.unwrap();\n+                        \n                         let correlation_id = system_message.correlation_id;\n-                        match command {\n-                            SystemCommand::Ping => {\n-                                info!(\n-                                    \"{} -> Command {:?} has been sent from {}\",\n-                                    &registered_name, command, &from\n-                                );\n-                                exchange_command(\n-                                    registered_name.to_string(),\n-                                    from.clone(),\n-                                    SystemCommand::Pong,\n-                                );\n-                                continue;\n+                        \n+                        if system_message.command.is_some() {\n+                            let command = system_message.command.unwrap();\n+\n+                            match command {\n+                                SystemCommand::Ping => {\n+                                    info!(\n+                                        \"{} -> Command {:?} has been sent from {}\",\n+                                        &registered_name, command, &from\n+                                    );\n+                                    exchange_command(\n+                                        registered_name.to_string(),\n+                                        from.clone(),\n+                                        SystemCommand::Pong,\n+                                    );\n+                                    continue;\n+                                }\n+                                SystemCommand::Pong => {\n+                                    info!(\n+                                        \"{} -> Command {:?} has been sent from {}\",\n+                                        &registered_name, command, &from\n+                                    );\n+                                    continue;\n+                                }\n+                                SystemCommand::Ack => {\n+                                    info!(\n+                                        \"{} -> Command {:?} has been sent from {}\",\n+                                        &registered_name, command, &from\n+                                    );\n+                                    exchange_command(\n+                                        registered_name.to_string(),\n+                                        from.clone(),\n+                                        SystemCommand::Seq(123),\n+                                    );\n+                                }\n+                                SystemCommand::NoAck => {\n+                                    info!(\n+                                        \"{} -> Command {:?} has been sent from {}\",\n+                                        &registered_name, command, &from\n+                                    )\n+                                }\n+                                SystemCommand::HealthCheck => {\n+                                    info!(\n+                                        \"{} -> Command {:?} has been sent from {}\",\n+                                        &registered_name, command, &from\n+                                    );\n+                                    exchange_command(\n+                                        registered_name.to_string(),\n+                                        from.clone(),\n+                                        SystemCommand::Ok,\n+                                    );\n+                                    continue;\n+                                }\n+                                SystemCommand::Ok => {\n+                                    info!(\"Command {:?} has been sent from {}\", command, &from);\n+                                    continue;\n+                                }\n+                                SystemCommand::Err => {\n+                                    info!(\"Command {:?} has been sent from {}\", command, &from);\n+                                    continue;\n+                                }\n+                                SystemCommand::Seq(seq) => {\n+                                    info!(\n+                                        \"Command {:?} has been sent from {} with seq: {}\",\n+                                        command, &from, seq\n+                                    )\n+                                }\n                             }\n-                            SystemCommand::Pong => {\n-                                info!(\n-                                    \"{} -> Command {:?} has been sent from {}\",\n-                                    &registered_name, command, &from\n-                                );\n-                                continue;\n-                            }\n-                            SystemCommand::Ack => {\n-                                info!(\n-                                    \"{} -> Command {:?} has been sent from {}\",\n-                                    &registered_name, command, &from\n-                                );\n-                                exchange_command(\n-                                    registered_name.to_string(),\n-                                    from.clone(),\n-                                    SystemCommand::Seq(123),\n-                                );\n-                            }\n-                            SystemCommand::NoAck => {\n-                                info!(\n-                                    \"{} -> Command {:?} has been sent from {}\",\n-                                    &registered_name, command, &from\n-                                )\n-                            }\n-                            SystemCommand::HealthCheck => {\n-                                info!(\n-                                    \"{} -> Command {:?} has been sent from {}\",\n-                                    &registered_name, command, &from\n-                                );\n-                                exchange_command(\n-                                    registered_name.to_string(),\n-                                    from.clone(),\n-                                    SystemCommand::Ok,\n-                                );\n-                                continue;\n-                            }\n-                            SystemCommand::Ok => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from);\n-                                continue;\n-                            }\n-                            SystemCommand::Err => {\n-                                info!(\"Command {:?} has been sent from {}\", command, &from);\n-                                continue;\n-                            }\n-                            SystemCommand::Seq(seq) => {\n-                                info!(\n-                                    \"Command {:?} has been sent from {} with seq: {}\",\n-                                    command, &from, seq\n-                                )\n-                            }\n                         }\n+\n+                        \n                         info!(\"processing msg payload...\");\n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let response: Res =\n"
                },
                {
                    "date": 1643739879763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,9 +416,8 @@\n                                 }\n                             }\n                         }\n \n-                        \n                         info!(\"processing msg payload...\");\n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let response: Res =\n"
                },
                {
                    "date": 1643739943767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -428,14 +428,14 @@\n                                         continue;\n                                     }\n                                 };\n                             let json = serde_json::to_string(&response).unwrap();\n-                            exchange_message(\n-                                registered_name.to_string(),\n-                                from.clone(),\n-                                json,\n-                                correlation_id,\n-                            );\n+                            // exchange_message(\n+                            //     registered_name.to_string(),\n+                            //     from.clone(),\n+                            //     json,\n+                            //     correlation_id,\n+                            // );\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643815818320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,8 +226,9 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n+        Response(Vec<u8>>)\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n"
                },
                {
                    "date": 1643815824335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n-        Response(Vec<u8>>)\n+        Response(Vec<u8>)\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n"
                },
                {
                    "date": 1643815943438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,8 +414,18 @@\n                                         \"Command {:?} has been sent from {} with seq: {}\",\n                                         command, &from, seq\n                                     )\n                                 }\n+                                SystemCommand::Response(binary) => {\n+                                    let message = from_binary::<Res>(binary);\n+                                    match handle_message(binary, message_handler.clone()) {\n+                                    Ok(res) => res,\n+                                    Err(err) => {\n+                                        error!(\"failure.to.process.message: {:?}\", err);\n+                                        continue;\n+                                    }\n+                                };\n+                                },\n                             }\n                         }\n \n                         info!(\"processing msg payload...\");\n"
                },
                {
                    "date": 1643818095183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n             Ok(WordList { words: vec![] })\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + for<'de> model::_::_serde::Deserialize<'de>>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req>\n             + MessageHandler<Req, Output = Res>\n"
                },
                {
                    "date": 1643818109522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n             Ok(WordList { words: vec![] })\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + for<'de> model::_::_serde::Deserialize<'de>>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + DeserializeOwned>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req>\n             + MessageHandler<Req, Output = Res>\n"
                },
                {
                    "date": 1643818138450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,9 +415,9 @@\n                                         command, &from, seq\n                                     )\n                                 }\n                                 SystemCommand::Response(binary) => {\n-                                    let message = from_binary::<Res>(binary);\n+                                    let message = from_binary::<Res>(binary.clone());\n                                     match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n"
                },
                {
                    "date": 1643818160058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,9 +415,8 @@\n                                         command, &from, seq\n                                     )\n                                 }\n                                 SystemCommand::Response(binary) => {\n-                                    let message = from_binary::<Res>(binary.clone());\n                                     match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n"
                },
                {
                    "date": 1643822593647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,10 +225,9 @@\n         NoAck,\n         HealthCheck,\n         Ok,\n         Err,\n-        Seq(u32),\n-        Response(Vec<u8>)\n+        Seq(u32)\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n@@ -414,17 +413,8 @@\n                                         \"Command {:?} has been sent from {} with seq: {}\",\n                                         command, &from, seq\n                                     )\n                                 }\n-                                SystemCommand::Response(binary) => {\n-                                    match handle_message(binary, message_handler.clone()) {\n-                                    Ok(res) => res,\n-                                    Err(err) => {\n-                                        error!(\"failure.to.process.message: {:?}\", err);\n-                                        continue;\n-                                    }\n-                                };\n-                                },\n                             }\n                         }\n \n                         info!(\"processing msg payload...\");\n"
                },
                {
                    "date": 1643822637176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,8 +228,10 @@\n         Err,\n         Seq(u32)\n     }\n \n+    pub enum MessageType{}\n+\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: Option<Vec<u8>>,\n"
                },
                {
                    "date": 1643822658967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,12 @@\n         Err,\n         Seq(u32)\n     }\n \n-    pub enum MessageType{}\n+    pub enum MessageType{\n+        Request,\n+        Response\n+    }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n"
                },
                {
                    "date": 1643822675895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,8 +233,14 @@\n         Request,\n         Response\n     }\n \n+impl Default for MessageType {\n+    fn default() -> Self {\n+        Self::Request\n+    }\n+}\n+\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: Option<Vec<u8>>,\n"
                },
                {
                    "date": 1643822694181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,9 @@\n         pub from: String,\n         pub payload: Option<Vec<u8>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n+        pub message_type: MessageType\n     }\n \n     pub trait Message {\n         fn headers(&self) -> Vec<Map<String, String>>;\n"
                },
                {
                    "date": 1643822730644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,9 +228,10 @@\n         Err,\n         Seq(u32)\n     }\n \n-    pub enum MessageType{\n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+        pub enum MessageType{\n         Request,\n         Response\n     }\n \n"
                },
                {
                    "date": 1643822779697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,10 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n         pub enum MessageType{\n         Request,\n-        Response\n+        Response,\n+        Command,\n     }\n \n impl Default for MessageType {\n     fn default() -> Self {\n@@ -291,8 +292,9 @@\n                 from: from.clone(),\n                 payload: None,\n                 correlation_id: None,\n                 command: Some(command.clone()),\n+                message_type: MessageType::Request\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643822790111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,31 +225,31 @@\n         NoAck,\n         HealthCheck,\n         Ok,\n         Err,\n-        Seq(u32)\n+        Seq(u32),\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n-        pub enum MessageType{\n+    pub enum MessageType {\n         Request,\n         Response,\n         Command,\n     }\n \n-impl Default for MessageType {\n-    fn default() -> Self {\n-        Self::Request\n+    impl Default for MessageType {\n+        fn default() -> Self {\n+            Self::Request\n+        }\n     }\n-}\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct SystemMessage {\n         pub from: String,\n         pub payload: Option<Vec<u8>>,\n         pub correlation_id: Option<String>,\n         pub command: Option<SystemCommand>,\n-        pub message_type: MessageType\n+        pub message_type: MessageType,\n     }\n \n     pub trait Message {\n         fn headers(&self) -> Vec<Map<String, String>>;\n@@ -292,9 +292,9 @@\n                 from: from.clone(),\n                 payload: None,\n                 correlation_id: None,\n                 command: Some(command.clone()),\n-                message_type: MessageType::Request\n+                message_type: MessageType::Request,\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n@@ -359,11 +359,11 @@\n                     let res = from_binary::<SystemMessage>(bin);\n                     if res.is_ok() {\n                         let system_message = res.unwrap();\n                         let from = system_message.from;\n-                        \n+\n                         let correlation_id = system_message.correlation_id;\n-                        \n+\n                         if system_message.command.is_some() {\n                             let command = system_message.command.unwrap();\n \n                             match command {\n"
                },
                {
                    "date": 1643822806545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,8 +316,9 @@\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id,\n                 command: None,\n+                message_type: MessageType::Request\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643822817352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,9 +292,9 @@\n                 from: from.clone(),\n                 payload: None,\n                 correlation_id: None,\n                 command: Some(command.clone()),\n-                message_type: MessageType::Request,\n+                message_type: MessageType::Command,\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n@@ -316,9 +316,9 @@\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id,\n                 command: None,\n-                message_type: MessageType::Request\n+                message_type: MessageType::Request,\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643822852068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,8 +306,9 @@\n         from: String,\n         to: String,\n         message: String,\n         correlation_id: Option<String>,\n+        message_type: MessageType\n     ) {\n         let actors = ACTORS.lock().unwrap();\n         let destination = actors.get(&to);\n         if destination.is_some() {\n"
                },
                {
                    "date": 1643822863809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n                 from: from.clone(),\n                 payload: Some(Vec::from(message.as_bytes())),\n                 correlation_id,\n                 command: None,\n-                message_type: MessageType::Request,\n+                message_type,\n             };\n \n             let result = serde_json::to_string(&system_message);\n             let binary = Vec::from(result.unwrap().as_bytes());\n"
                },
                {
                    "date": 1643822886477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,9 +476,9 @@\n     use common_libs::configure_log4rs;\n \n     use crate::model::actor::{exchange_command, start_actor};\n \n-    use super::actor::{exchange_message, WordList};\n+    use super::{actor::{exchange_message, WordList}, MessageType};\n \n     #[test]\n     fn ping_pong_test() {\n         configure_log4rs();\n@@ -510,9 +510,10 @@\n         exchange_message(\n             silvester.clone(),\n             arnold.clone(),\n             json,\n-            Some(\"123\".to_string()),\n+            Some(\"123\".to_string(),\n+            MessageType::Request),\n         );\n \n         sleep(Duration::from_secs(2));\n     }\n"
                },
                {
                    "date": 1643822901332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -511,9 +511,9 @@\n             silvester.clone(),\n             arnold.clone(),\n             json,\n             Some(\"123\".to_string(),\n-            MessageType::Request),\n+            MessageType::Request,\n         );\n \n         sleep(Duration::from_secs(2));\n     }\n"
                },
                {
                    "date": 1643822907966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -511,10 +511,9 @@\n             silvester.clone(),\n             arnold.clone(),\n             json,\n             Some(\"123\".to_string(),\n-            MessageType::Request,\n-        );\n+            MessageType::Request);\n \n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643822928557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -510,9 +510,9 @@\n         exchange_message(\n             silvester.clone(),\n             arnold.clone(),\n             json,\n-            Some(\"123\".to_string(),\n+            Some(\"123\".to_string()),\n             MessageType::Request);\n \n         sleep(Duration::from_secs(2));\n     }\n"
                },
                {
                    "date": 1643822978533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,13 +141,8 @@\n         Mutex::new(m)\n     };\n }\n \n-#[derive(Debug, Clone, Serialize, Deserialize)]\n-pub enum MessageType {\n-    Request,\n-    Response,\n-}\n \n impl Display for Message {\n     fn fmt(&self, f: &mut Formatter) -> FmtResult {\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n"
                },
                {
                    "date": 1643823037089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,15 @@\n     pub reason: Option<String>,\n     pub error_type: ProcessErrorType,\n }\n \n+#[derive(Debug, Clone, Serialize, Deserialize)]\n+pub enum MessageType {\n+    Request,\n+    Response,\n+    Command,\n+}\n+\n #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\n pub enum ProcessErrorType {\n     Continue,\n     Break,\n@@ -223,15 +230,10 @@\n         Err,\n         Seq(u32),\n     }\n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]\n-    pub enum MessageType {\n-        Request,\n-        Response,\n-        Command,\n-    }\n \n+\n     impl Default for MessageType {\n         fn default() -> Self {\n             Self::Request\n         }\n"
                },
                {
                    "date": 1643823047939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{thread, time::Duration};\n \n-    use super::{ProcessResult, ACTORS};\n+    use super::{ProcessResult, ACTORS, MessageType};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n         Ping,\n"
                },
                {
                    "date": 1643823122492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,9 +441,11 @@\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     }\n                                 };\n+                                \n                             let json = serde_json::to_string(&response).unwrap();\n+                            \n                             // exchange_message(\n                             //     registered_name.to_string(),\n                             //     from.clone(),\n                             //     json,\n"
                },
                {
                    "date": 1643823201991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,8 +253,12 @@\n         fn command(&self) -> Option<String>;\n         fn body(&self) -> Vec<u8>;\n     }\n \n+    pub trait Reply {\n+        fn reply(&self) -> bool;\n+    }\n+\n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n         fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n"
                },
                {
                    "date": 1643823219264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -345,9 +345,9 @@\n             Ok(WordList { words: vec![] })\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + DeserializeOwned>(\n+    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + DeserializeOwned + Reply>(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req>\n             + MessageHandler<Req, Output = Res>\n"
                },
                {
                    "date": 1643823246094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,11 +445,14 @@\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     }\n                                 };\n+                                if response.reply() {\n+                                    let json = serde_json::to_string(&response).unwrap();\n+                                }\n                                 \n-                            let json = serde_json::to_string(&response).unwrap();\n                             \n+                            \n                             // exchange_message(\n                             //     registered_name.to_string(),\n                             //     from.clone(),\n                             //     json,\n"
                },
                {
                    "date": 1643823254938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,18 +447,19 @@\n                                     }\n                                 };\n                                 if response.reply() {\n                                     let json = serde_json::to_string(&response).unwrap();\n-                                }\n-                                \n-                            \n-                            \n-                            // exchange_message(\n+                                    // exchange_message(\n                             //     registered_name.to_string(),\n                             //     from.clone(),\n                             //     json,\n                             //     correlation_id,\n                             // );\n+                                }\n+                                \n+                            \n+                            \n+                            \n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643823260646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,14 +447,14 @@\n                                     }\n                                 };\n                                 if response.reply() {\n                                     let json = serde_json::to_string(&response).unwrap();\n-                                    // exchange_message(\n-                            //     registered_name.to_string(),\n-                            //     from.clone(),\n-                            //     json,\n-                            //     correlation_id,\n-                            // );\n+                                    exchange_message(\n+                                registered_name.to_string(),\n+                                from.clone(),\n+                                json,\n+                                correlation_id,\n+                            );\n                                 }\n                                 \n                             \n                             \n"
                },
                {
                    "date": 1643823280246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,14 +447,13 @@\n                                     }\n                                 };\n                                 if response.reply() {\n                                     let json = serde_json::to_string(&response).unwrap();\n-                                    exchange_message(\n-                                registered_name.to_string(),\n-                                from.clone(),\n-                                json,\n-                                correlation_id,\n-                            );\n+                                    exchange_message(registered_name.to_string(),\n+                                        from.clone(),\n+                                        json,\n+                                        correlation_id,\n+                                    );\n                                 }\n                                 \n                             \n                             \n"
                },
                {
                    "date": 1643823321916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,8 +255,9 @@\n     }\n \n     pub trait Reply {\n         fn reply(&self) -> bool;\n+        fn message_type(&) -> MessageType;\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n"
                },
                {
                    "date": 1643823346391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n     }\n \n     pub trait Reply {\n         fn reply(&self) -> bool;\n-        fn message_type(&) -> MessageType;\n+        fn message_type(&self) -> MessageType;\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n@@ -452,8 +452,9 @@\n                                     exchange_message(registered_name.to_string(),\n                                         from.clone(),\n                                         json,\n                                         correlation_id,\n+                                        response.message_type()\n                                     );\n                                 }\n                                 \n                             \n"
                },
                {
                    "date": 1643823372136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,8 @@\n         Mutex::new(m)\n     };\n }\n \n-\n impl Display for Message {\n     fn fmt(&self, f: &mut Formatter) -> FmtResult {\n         write!(f, \"{}\", to_string_pretty(self).unwrap())\n     }\n@@ -216,9 +215,9 @@\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{thread, time::Duration};\n \n-    use super::{ProcessResult, ACTORS, MessageType};\n+    use super::{MessageType, ProcessResult, ACTORS};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub enum SystemCommand {\n         Ping,\n@@ -230,10 +229,8 @@\n         Err,\n         Seq(u32),\n     }\n \n-\n-\n     impl Default for MessageType {\n         fn default() -> Self {\n             Self::Request\n         }\n@@ -308,9 +305,9 @@\n         from: String,\n         to: String,\n         message: String,\n         correlation_id: Option<String>,\n-        message_type: MessageType\n+        message_type: MessageType,\n     ) {\n         let actors = ACTORS.lock().unwrap();\n         let destination = actors.get(&to);\n         if destination.is_some() {\n@@ -346,9 +343,12 @@\n             Ok(WordList { words: vec![] })\n         }\n     }\n \n-    pub fn run<Req: ?Sized + DeserializeOwned, Res: Sized + Serialize + DeserializeOwned + Reply>(\n+    pub fn run<\n+        Req: ?Sized + DeserializeOwned,\n+        Res: Sized + Serialize + DeserializeOwned + Reply,\n+    >(\n         registered_name: &str,\n         receiver: crossbeam::channel::Receiver<Vec<u8>>,\n         message_handler: impl MessageHandler<Req>\n             + MessageHandler<Req, Output = Res>\n@@ -446,21 +446,18 @@\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     }\n                                 };\n-                                if response.reply() {\n-                                    let json = serde_json::to_string(&response).unwrap();\n-                                    exchange_message(registered_name.to_string(),\n-                                        from.clone(),\n-                                        json,\n-                                        correlation_id,\n-                                        response.message_type()\n-                                    );\n-                                }\n-                                \n-                            \n-                            \n-                            \n+                            if response.reply() {\n+                                let json = serde_json::to_string(&response).unwrap();\n+                                exchange_message(\n+                                    registered_name.to_string(),\n+                                    from.clone(),\n+                                    json,\n+                                    correlation_id,\n+                                    response.message_type(),\n+                                );\n+                            }\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n@@ -484,9 +481,12 @@\n     use common_libs::configure_log4rs;\n \n     use crate::model::actor::{exchange_command, start_actor};\n \n-    use super::{actor::{exchange_message, WordList}, MessageType};\n+    use super::{\n+        actor::{exchange_message, WordList},\n+        MessageType,\n+    };\n \n     #[test]\n     fn ping_pong_test() {\n         configure_log4rs();\n@@ -519,9 +519,10 @@\n             silvester.clone(),\n             arnold.clone(),\n             json,\n             Some(\"123\".to_string()),\n-            MessageType::Request);\n+            MessageType::Request,\n+        );\n \n         sleep(Duration::from_secs(2));\n     }\n }\n"
                },
                {
                    "date": 1643823412266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -331,8 +331,12 @@\n     pub struct WordList {\n         pub words: Vec<String>,\n     }\n \n+    impl Reply for WordList {\n+        \n+    }\n+\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n     impl MessageHandler for WordList {\n"
                },
                {
                    "date": 1643823419298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -332,11 +332,17 @@\n         pub words: Vec<String>,\n     }\n \n     impl Reply for WordList {\n-        \n+        fn reply(&self) -> bool {\n+        todo!()\n     }\n \n+        fn message_type(&self) -> MessageType {\n+        todo!()\n+    }\n+    }\n+\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n     impl MessageHandler for WordList {\n"
                },
                {
                    "date": 1643823434578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,11 +337,11 @@\n         todo!()\n     }\n \n         fn message_type(&self) -> MessageType {\n-        todo!()\n+            MessageType::Request\n+         }\n     }\n-    }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n"
                },
                {
                    "date": 1643823441950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,9 +333,9 @@\n     }\n \n     impl Reply for WordList {\n         fn reply(&self) -> bool {\n-        todo!()\n+        false\n     }\n \n         fn message_type(&self) -> MessageType {\n             MessageType::Request\n"
                },
                {
                    "date": 1643823448142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,14 +333,14 @@\n     }\n \n     impl Reply for WordList {\n         fn reply(&self) -> bool {\n-        false\n-    }\n+            false\n+        }\n \n         fn message_type(&self) -> MessageType {\n             MessageType::Request\n-         }\n+        }\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n"
                },
                {
                    "date": 1643823585754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,40 +109,9 @@\n     pub status: Option<Status>,\n     pub payload: Option<Vec<u8>>,\n }\n \n-// impl Request for Message {\n-//     fn correlation_id(&self) -> String {\n-//         self.correlation_id\n-//     }\n \n-//     fn from(&self) -> String {\n-//         self.from.unwrap()\n-//     }\n-\n-//     fn command(&self) -> Command {\n-//         self.command.unwrap()\n-//     }\n-\n-//     fn payload(&self) -> Option<Vec<u8>> {\n-//         self.payload\n-//     }\n-// }\n-\n-// impl Response for Message {\n-//     fn correlation_id(&self) -> String {\n-//         self.correlation_id\n-//     }\n-\n-//     fn status(&self) -> Status {\n-//         self.status.unwrap()\n-//     }\n-\n-//     fn payload(&self) -> Option<Vec<u8>> {\n-//         self.payload\n-//     }\n-// }\n-\n lazy_static! {\n     static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n         let mut m = HashMap::new();\n         Mutex::new(m)\n"
                },
                {
                    "date": 1643823606505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,34 +57,8 @@\n \n     fn process(self, rhs: Rhs) -> ProcessResult<Self::Output>;\n }\n \n-// impl BinaryProcessor<Vec<u8>> for Box<dyn Response> {\n-//     type Output = Box<dyn Response>;\n-\n-//     fn process(self, mess: Vec<u8>) -> ProcessResult<Box<dyn Response>> {\n-//         if mess.is_empty() {\n-//             return Err(ProcessError {\n-//                 reason: \"empty.message\",\n-//                 error_type: ProcessErrorType::Continue,\n-//             });\n-//         }\n-\n-//         let request = from_binary::<Box<dyn Request>>(mess);\n-\n-//         match request {\n-//             Ok(req) => req.apply(),\n-//             Err(err) => {\n-//                 error!(\"failed.to.parse: {}\", err);\n-//                 Err(ProcessError {\n-//                     reason: None,\n-//                     error_type: ProcessErrorType::Continue,\n-//                 })\n-//             }\n-//         }\n-//     }\n-// }\n-\n pub struct BaseMessage {\n     pub from: String,\n     pub payload: Option<Vec<u8>>,\n     pub correlation_id: Option<String>,\n"
                },
                {
                    "date": 1643823614341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n     fmt::{Display, Formatter},\n     sync::Mutex,\n };\n \n-use common_libs::{error::FmtResult, utils::from_binary};\n+use common_libs::{error::FmtResult};\n use log::error;\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n"
                },
                {
                    "date": 1643823619909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n     sync::Mutex,\n };\n \n use common_libs::{error::FmtResult};\n-use log::error;\n+\n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n use crate::CommandHandler;\n"
                },
                {
                    "date": 1643823640836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,8 @@\n     fn correlation_id(&self) -> String;\n     fn from(&self) -> String;\n     fn command(&self) -> Command;\n     fn payload(&self) -> Option<Vec<u8>>;\n-    // fn apply(&self) -> ProcessResult<Box<dyn Response>>;\n }\n \n pub trait Response {\n     fn correlation_id(&self) -> String;\n@@ -86,9 +85,9 @@\n \n \n lazy_static! {\n     static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n-        let mut m = HashMap::new();\n+        let m = HashMap::new();\n         Mutex::new(m)\n     };\n }\n \n"
                },
                {
                    "date": 1643823656916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n     fmt::{Display, Formatter},\n     sync::Mutex,\n };\n \n-use common_libs::{error::FmtResult};\n+use common_libs::error::FmtResult;\n \n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n@@ -82,9 +82,8 @@\n     pub status: Option<Status>,\n     pub payload: Option<Vec<u8>>,\n }\n \n-\n lazy_static! {\n     static ref ACTORS: Mutex<HashMap<String, CommandHandler>> = {\n         let m = HashMap::new();\n         Mutex::new(m)\n"
                },
                {
                    "date": 1643873534203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n     };\n     use log::{error, info};\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{thread, time::Duration};\n+    use std::{thread, time::Duration, ops::ControlFlow};\n \n     use super::{MessageType, ProcessResult, ACTORS};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n@@ -320,71 +320,10 @@\n \n                         if system_message.command.is_some() {\n                             let command = system_message.command.unwrap();\n \n-                            match command {\n-                                SystemCommand::Ping => {\n-                                    info!(\n-                                        \"{} -> Command {:?} has been sent from {}\",\n-                                        &registered_name, command, &from\n-                                    );\n-                                    exchange_command(\n-                                        registered_name.to_string(),\n-                                        from.clone(),\n-                                        SystemCommand::Pong,\n-                                    );\n-                                    continue;\n-                                }\n-                                SystemCommand::Pong => {\n-                                    info!(\n-                                        \"{} -> Command {:?} has been sent from {}\",\n-                                        &registered_name, command, &from\n-                                    );\n-                                    continue;\n-                                }\n-                                SystemCommand::Ack => {\n-                                    info!(\n-                                        \"{} -> Command {:?} has been sent from {}\",\n-                                        &registered_name, command, &from\n-                                    );\n-                                    exchange_command(\n-                                        registered_name.to_string(),\n-                                        from.clone(),\n-                                        SystemCommand::Seq(123),\n-                                    );\n-                                }\n-                                SystemCommand::NoAck => {\n-                                    info!(\n-                                        \"{} -> Command {:?} has been sent from {}\",\n-                                        &registered_name, command, &from\n-                                    )\n-                                }\n-                                SystemCommand::HealthCheck => {\n-                                    info!(\n-                                        \"{} -> Command {:?} has been sent from {}\",\n-                                        &registered_name, command, &from\n-                                    );\n-                                    exchange_command(\n-                                        registered_name.to_string(),\n-                                        from.clone(),\n-                                        SystemCommand::Ok,\n-                                    );\n-                                    continue;\n-                                }\n-                                SystemCommand::Ok => {\n-                                    info!(\"Command {:?} has been sent from {}\", command, &from);\n-                                    continue;\n-                                }\n-                                SystemCommand::Err => {\n-                                    info!(\"Command {:?} has been sent from {}\", command, &from);\n-                                    continue;\n-                                }\n-                                SystemCommand::Seq(seq) => {\n-                                    info!(\n-                                        \"Command {:?} has been sent from {} with seq: {}\",\n-                                        command, &from, seq\n-                                    )\n-                                }\n+                            if let ControlFlow::Break(_) = process_command(command, registered_name, &from) {\n+                                continue;\n                             }\n                         }\n \n                         info!(\"processing msg payload...\");\n@@ -421,8 +360,76 @@\n             }\n         }\n         Ok(())\n     }\n+\n+    fn process_command(command: SystemCommand, registered_name: &str, from: &String) -> ControlFlow<()> {\n+        match command {\n+            SystemCommand::Ping => {\n+                *info!(\n+                    \"{} -> Command {:?} has been sent from {}\",\n+                    &registered_name, command, &from\n+                );\n+                exchange_command(\n+                    registered_name.to_string(),\n+                    from.clone(),\n+                    SystemCommand::Pong,\n+                );\n+                return ControlFlow::Break(());\n+            }\n+            SystemCommand::Pong => {\n+                *info!(\n+                    \"{} -> Command {:?} has been sent from {}\",\n+                    &registered_name, command, &from\n+                );\n+                return ControlFlow::Break(());\n+            }\n+            SystemCommand::Ack => {\n+                *info!(\n+                    \"{} -> Command {:?} has been sent from {}\",\n+                    &registered_name, command, &from\n+                );\n+                exchange_command(\n+                    registered_name.to_string(),\n+                    from.clone(),\n+                    SystemCommand::Seq(123),\n+                );\n+            }\n+            SystemCommand::NoAck => {\n+                *info!(\n+                    \"{} -> Command {:?} has been sent from {}\",\n+                    &registered_name, command, &from\n+                )\n+            }\n+            SystemCommand::HealthCheck => {\n+                *info!(\n+                    \"{} -> Command {:?} has been sent from {}\",\n+                    &registered_name, command, &from\n+                );\n+                exchange_command(\n+                    registered_name.to_string(),\n+                    from.clone(),\n+                    SystemCommand::Ok,\n+                );\n+                return ControlFlow::Break(());\n+            }\n+            SystemCommand::Ok => {\n+                *info!(\"Command {:?} has been sent from {}\", command, &from);\n+                return ControlFlow::Break(());\n+            }\n+            SystemCommand::Err => {\n+                *info!(\"Command {:?} has been sent from {}\", command, &from);\n+                return ControlFlow::Break(());\n+            }\n+            SystemCommand::Seq(seq) => {\n+                *info!(\n+                    \"Command {:?} has been sent from {} with seq: {}\",\n+                    command, &from, seq\n+                )\n+            }\n+        }\n+        ControlFlow::Continue(())\n+    }\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n"
                },
                {
                    "date": 1643873563447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,9 +364,9 @@\n \n     fn process_command(command: SystemCommand, registered_name: &str, from: &String) -> ControlFlow<()> {\n         match command {\n             SystemCommand::Ping => {\n-                *info!(\n+                info!(\n                     \"{} -> Command {:?} has been sent from {}\",\n                     &registered_name, command, &from\n                 );\n                 exchange_command(\n"
                },
                {
                    "date": 1643873608541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,16 +376,16 @@\n                 );\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Pong => {\n-                *info!(\n+                info!(\n                     \"{} -> Command {:?} has been sent from {}\",\n                     &registered_name, command, &from\n                 );\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Ack => {\n-                *info!(\n+                info!(\n                     \"{} -> Command {:?} has been sent from {}\",\n                     &registered_name, command, &from\n                 );\n                 exchange_command(\n@@ -394,9 +394,9 @@\n                     SystemCommand::Seq(123),\n                 );\n             }\n             SystemCommand::NoAck => {\n-                *info!(\n+                info!(\n                     \"{} -> Command {:?} has been sent from {}\",\n                     &registered_name, command, &from\n                 )\n             }\n@@ -412,9 +412,9 @@\n                 );\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Ok => {\n-                *info!(\"Command {:?} has been sent from {}\", command, &from);\n+                info!(\"Command {:?} has been sent from {}\", command, &from);\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Err => {\n                 *info!(\"Command {:?} has been sent from {}\", command, &from);\n"
                },
                {
                    "date": 1643873613981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,9 +420,9 @@\n                 *info!(\"Command {:?} has been sent from {}\", command, &from);\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Seq(seq) => {\n-                *info!(\n+                info!(\n                     \"Command {:?} has been sent from {} with seq: {}\",\n                     command, &from, seq\n                 )\n             }\n"
                },
                {
                    "date": 1643873632613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -400,9 +400,9 @@\n                     &registered_name, command, &from\n                 )\n             }\n             SystemCommand::HealthCheck => {\n-                *info!(\n+                info!(\n                     \"{} -> Command {:?} has been sent from {}\",\n                     &registered_name, command, &from\n                 );\n                 exchange_command(\n@@ -416,9 +416,9 @@\n                 info!(\"Command {:?} has been sent from {}\", command, &from);\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Err => {\n-                *info!(\"Command {:?} has been sent from {}\", command, &from);\n+                info!(\"Command {:?} has been sent from {}\", command, &from);\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Seq(seq) => {\n                 info!(\n"
                },
                {
                    "date": 1643874227238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,8 +168,9 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n+        Command<Vec<u8>>,\n     }\n \n     impl Default for MessageType {\n         fn default() -> Self {\n"
                },
                {
                    "date": 1643874250034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,10 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n-        Command<Vec<u8>>,\n+        Request<Vec<u8>>,\n+        Response<Vec<u8>>,\n     }\n \n     impl Default for MessageType {\n         fn default() -> Self {\n"
                },
                {
                    "date": 1643874265753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,10 +168,10 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n-        Request<Vec<u8>>,\n-        Response<Vec<u8>>,\n+        Request(Vec<u8>),\n+        Response(Vec<u8>),\n     }\n \n     impl Default for MessageType {\n         fn default() -> Self {\n"
                },
                {
                    "date": 1643874280828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,8 +168,9 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n+        Event(Vec<u8>)\n         Request(Vec<u8>),\n         Response(Vec<u8>),\n     }\n \n"
                },
                {
                    "date": 1643874790866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n-        Event(Vec<u8>)\n+        Event(Vec<u8>),\n         Request(Vec<u8>),\n         Response(Vec<u8>),\n     }\n \n@@ -428,8 +428,21 @@\n                     \"Command {:?} has been sent from {} with seq: {}\",\n                     command, &from, seq\n                 )\n             }\n+            SystemCommand::Event(_) => todo!(),\n+            SystemCommand::Request(binary) => {\n+                let binary = system_message.payload.unwrap();\n+                            let response: Res =\n+                                match handle_message(binary, message_handler.clone()) {\n+                                    Ok(res) => res,\n+                                    Err(err) => {\n+                                        error!(\"failure.to.process.message: {:?}\", err);\n+                                        continue;\n+                                    }\n+                                };\n+            },\n+            SystemCommand::Response(_) => todo!(),\n         }\n         ControlFlow::Continue(())\n     }\n }\n"
                },
                {
                    "date": 1643874962142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,17 +430,16 @@\n                 )\n             }\n             SystemCommand::Event(_) => todo!(),\n             SystemCommand::Request(binary) => {\n-                let binary = system_message.payload.unwrap();\n-                            let response: Res =\n-                                match handle_message(binary, message_handler.clone()) {\n-                                    Ok(res) => res,\n-                                    Err(err) => {\n-                                        error!(\"failure.to.process.message: {:?}\", err);\n-                                        continue;\n-                                    }\n-                                };\n+                \n+                match handle_message(binary, message_handler.clone()) {\n+                    Ok(res) => res,\n+                    Err(err) => {\n+                        error!(\"failure.to.process.message: {:?}\", err);\n+                        continue;\n+                        }\n+                };\n             },\n             SystemCommand::Response(_) => todo!(),\n         }\n         ControlFlow::Continue(())\n"
                },
                {
                    "date": 1643874989886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -435,9 +435,9 @@\n                 match handle_message(binary, message_handler.clone()) {\n                     Ok(res) => res,\n                     Err(err) => {\n                         error!(\"failure.to.process.message: {:?}\", err);\n-                        continue;\n+                        return ControlFlow::Break(());;\n                         }\n                 };\n             },\n             SystemCommand::Response(_) => todo!(),\n"
                },
                {
                    "date": 1643875037125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,12 +432,18 @@\n             SystemCommand::Event(_) => todo!(),\n             SystemCommand::Request(binary) => {\n                 \n                 match handle_message(binary, message_handler.clone()) {\n-                    Ok(res) => res,\n+                    Ok(res) => exchange_message(\n+                        registered_name.to_string(),\n+                        from.clone(),\n+                        json,\n+                        correlation_id,\n+                        response.message_type(),\n+                    );,\n                     Err(err) => {\n                         error!(\"failure.to.process.message: {:?}\", err);\n-                        return ControlFlow::Break(());;\n+                        return ControlFlow::Break(());\n                         }\n                 };\n             },\n             SystemCommand::Response(_) => todo!(),\n"
                },
                {
                    "date": 1643875042861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,9 +438,9 @@\n                         from.clone(),\n                         json,\n                         correlation_id,\n                         response.message_type(),\n-                    );,\n+                    ),\n                     Err(err) => {\n                         error!(\"failure.to.process.message: {:?}\", err);\n                         return ControlFlow::Break(());\n                         }\n"
                },
                {
                    "date": 1643875052074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,9 @@\n             SystemCommand::Event(_) => todo!(),\n             SystemCommand::Request(binary) => {\n                 \n                 match handle_message(binary, message_handler.clone()) {\n-                    Ok(res) => exchange_message(\n+                    Ok(response) => exchange_message(\n                         registered_name.to_string(),\n                         from.clone(),\n                         json,\n                         correlation_id,\n"
                },
                {
                    "date": 1643876734451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,11 +168,8 @@\n         HealthCheck,\n         Ok,\n         Err,\n         Seq(u32),\n-        Event(Vec<u8>),\n-        Request(Vec<u8>),\n-        Response(Vec<u8>),\n     }\n \n     impl Default for MessageType {\n         fn default() -> Self {\n"
                },
                {
                    "date": 1643876755843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,27 +424,9 @@\n                 info!(\n                     \"Command {:?} has been sent from {} with seq: {}\",\n                     command, &from, seq\n                 )\n-            }\n-            SystemCommand::Event(_) => todo!(),\n-            SystemCommand::Request(binary) => {\n-                \n-                match handle_message(binary, message_handler.clone()) {\n-                    Ok(response) => exchange_message(\n-                        registered_name.to_string(),\n-                        from.clone(),\n-                        json,\n-                        correlation_id,\n-                        response.message_type(),\n-                    ),\n-                    Err(err) => {\n-                        error!(\"failure.to.process.message: {:?}\", err);\n-                        return ControlFlow::Break(());\n-                        }\n-                };\n-            },\n-            SystemCommand::Response(_) => todo!(),\n+\n         }\n         ControlFlow::Continue(())\n     }\n }\n"
                },
                {
                    "date": 1643876762657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,9 +424,9 @@\n                 info!(\n                     \"Command {:?} has been sent from {} with seq: {}\",\n                     command, &from, seq\n                 )\n-\n+            }\n         }\n         ControlFlow::Continue(())\n     }\n }\n"
                },
                {
                    "date": 1643876822088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -428,8 +428,16 @@\n             }\n         }\n         ControlFlow::Continue(())\n     }\n+\n+    fn process_request(){\n+\n+    }\n+\n+    fn process_response(){\n+        \n+    }\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n"
                },
                {
                    "date": 1643876835044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -429,15 +429,8 @@\n         }\n         ControlFlow::Continue(())\n     }\n \n-    fn process_request(){\n-\n-    }\n-\n-    fn process_response(){\n-        \n-    }\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n"
                },
                {
                    "date": 1643878065899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,8 +272,19 @@\n     pub struct WordList {\n         pub words: Vec<String>,\n     }\n \n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+    pub struct WordListReq {\n+        pub words: Vec<String>,\n+        pub message_type: MessageType,\n+    }\n+\n+    pub struct WordListRes {\n+        pub processed: Vec<String>,\n+        pub not_found: Vec<String>,\n+    }\n+\n     impl Reply for WordList {\n         fn reply(&self) -> bool {\n             false\n         }\n@@ -428,9 +439,8 @@\n             }\n         }\n         ControlFlow::Continue(())\n     }\n-\n }\n \n #[cfg(test)]\n mod actor_unit_test {\n"
                },
                {
                    "date": 1643878094692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,10 +274,9 @@\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct WordListReq {\n-        pub words: Vec<String>,\n-        pub message_type: MessageType,\n+        pub words: Vec<String>\n     }\n \n     pub struct WordListRes {\n         pub processed: Vec<String>,\n"
                },
                {
                    "date": 1643878125964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,8 +282,18 @@\n         pub processed: Vec<String>,\n         pub not_found: Vec<String>,\n     }\n \n+    impl Reply for WordListRes {\n+        fn reply(&self) -> bool {\n+            true\n+        }\n+\n+        fn message_type(&self) -> MessageType {\n+            MessageType::Request\n+        }\n+    }\n+\n     impl Reply for WordList {\n         fn reply(&self) -> bool {\n             false\n         }\n"
                },
                {
                    "date": 1643878144415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,9 @@\n         pub processed: Vec<String>,\n         pub not_found: Vec<String>,\n     }\n \n-    impl Reply for WordListRes {\n+    impl Reply for WordListReq {\n         fn reply(&self) -> bool {\n             true\n         }\n \n@@ -292,8 +292,18 @@\n             MessageType::Request\n         }\n     }\n \n+    impl Reply for WordListRes {\n+        fn reply(&self) -> bool {\n+            false\n+        }\n+\n+        fn message_type(&self) -> MessageType {\n+            MessageType::Response\n+        }\n+    }\n+\n     impl Reply for WordList {\n         fn reply(&self) -> bool {\n             false\n         }\n"
                },
                {
                    "date": 1643878195636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,10 +315,10 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n-    impl MessageHandler for WordList {\n-        type Output = WordList;\n+    impl MessageHandler for WordListReq {\n+        type Output = WordListRes;\n \n         fn handle(self, _message: WordList) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             Ok(WordList { words: vec![] })\n"
                },
                {
                    "date": 1643878204268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n \n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n-        fn handle(self, _message: WordList) -> ProcessResult<Self::Output> {\n+        fn handle(self, _message: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             Ok(WordList { words: vec![] })\n         }\n     }\n"
                },
                {
                    "date": 1643878209634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, _message: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            Ok(WordList { words: vec![] })\n+            Ok(WordListRes { words: vec![] })\n         }\n     }\n \n     pub fn run<\n"
                },
                {
                    "date": 1643878223648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, _message: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            Ok(WordListRes { words: vec![] })\n+            Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n     pub fn run<\n"
                },
                {
                    "date": 1643878247799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n     }\n \n     pub fn start_actor(actor_name: String) -> AppResult<()> {\n         let mut workers = ACTORS.lock().unwrap();\n-        let wlh = WordList { words: vec![] };\n+        let wlh = WordListReq { words: vec![] };\n         if workers.contains_key(&actor_name) {\n             let msg = format!(\"worker with name: {} already has been started.\", actor_name);\n             return Err(AppError::throw(&msg));\n         }\n"
                },
                {
                    "date": 1643878278496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,10 @@\n     pub struct WordListReq {\n         pub words: Vec<String>\n     }\n \n-    pub struct WordListRes {\n+    #[derive(Debug, Clone, Serialize, Deserialize)]\n+        pub struct WordListRes {\n         pub processed: Vec<String>,\n         pub not_found: Vec<String>,\n     }\n \n"
                },
                {
                    "date": 1643879794536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,9 +278,9 @@\n         pub words: Vec<String>\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n-        pub struct WordListRes {\n+    pub struct WordListRes {\n         pub processed: Vec<String>,\n         pub not_found: Vec<String>,\n     }\n \n@@ -303,18 +303,9 @@\n             MessageType::Response\n         }\n     }\n \n-    impl Reply for WordList {\n-        fn reply(&self) -> bool {\n-            false\n-        }\n \n-        fn message_type(&self) -> MessageType {\n-            MessageType::Request\n-        }\n-    }\n-\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n     impl MessageHandler for WordListReq {\n"
                },
                {
                    "date": 1643879809800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,12 +267,8 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-    #[derive(Debug, Clone, Serialize, Deserialize)]\n-    pub struct WordList {\n-        pub words: Vec<String>,\n-    }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct WordListReq {\n         pub words: Vec<String>\n"
                },
                {
                    "date": 1643879825510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -458,9 +458,9 @@\n \n     use crate::model::actor::{exchange_command, start_actor};\n \n     use super::{\n-        actor::{exchange_message, WordList},\n+        actor::exchange_message,\n         MessageType,\n     };\n \n     #[test]\n"
                },
                {
                    "date": 1643879835804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -458,9 +458,9 @@\n \n     use crate::model::actor::{exchange_command, start_actor};\n \n     use super::{\n-        actor::exchange_message,\n+        actor::{exchange_message, WordListReq},\n         MessageType,\n     };\n \n     #[test]\n@@ -486,9 +486,9 @@\n             crate::model::actor::SystemCommand::HealthCheck,\n         );\n         sleep(Duration::from_secs(2));\n \n-        let words = WordList {\n+        let words = WordListReq {\n             words: vec![\"alex\".to_string()],\n         };\n         let json = serde_json::to_string(&words).unwrap();\n         exchange_message(\n"
                },
                {
                    "date": 1643881152900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,8 +308,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, _message: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n+            \n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881201389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, _message: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            \n+            scrape_all()\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881213644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,8 +152,9 @@\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n     use log::{error, info};\n+    use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n     use std::{thread, time::Duration, ops::ControlFlow};\n \n"
                },
                {
                    "date": 1643881232196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,11 +307,11 @@\n \n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n-        fn handle(self, _message: WordListReq) -> ProcessResult<Self::Output> {\n+        fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            scrape_all()\n+            scrape_all(request.words)\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881238252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            scrape_all(request.words)\n+            scrape_all(request.words);\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881246283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            scrape_all(request.words);\n+            scrape_all(request.words).await;\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881279732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,11 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            scrape_all(request.words).await;\n+            asyn{\n+                scrape_all(request.words).await;\n+            }\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881288926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,11 +309,11 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            asyn{\n+            async{\n                 scrape_all(request.words).await;\n-            }\n+            };\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881321804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             async{\n-                scrape_all(request.words).await;\n+                scrape_all::<String>(request.words).await;\n             };\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n"
                },
                {
                    "date": 1643881328559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             async{\n-                scrape_all::<String>(request.words).await;\n+                scrape_all<String>(request.words).await;\n             };\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n"
                },
                {
                    "date": 1643881334260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             async{\n-                scrape_all<String>(request.words).await;\n+                scrape_all::<String>(request.words).await;\n             };\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n"
                },
                {
                    "date": 1643881412931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,10 +310,10 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             async{\n-                scrape_all::<String>(request.words).await;\n-            };\n+                scrape_all(request.words.clone()).await;\n+            }\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643881428561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             async{\n                 scrape_all(request.words.clone()).await;\n-            }\n+            };\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643882141431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n-        fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n+        async fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n         binary: Vec<u8>,\n"
                },
                {
                    "date": 1643882154588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     }\n \n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n-        async fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n+        fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n         binary: Vec<u8>,\n"
                },
                {
                    "date": 1643882172489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n \n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n-        fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n+        async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             async{\n                 scrape_all(request.words.clone()).await;\n             };\n"
                },
                {
                    "date": 1643882178864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,11 +309,11 @@\n         type Output = WordListRes;\n \n         async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            async{\n-                scrape_all(request.words.clone()).await;\n-            };\n+            \n+            scrape_all(request.words.clone()).await;\n+            \n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643882194559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,10 +310,10 @@\n \n         async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             \n-            scrape_all(request.words.clone()).await;\n-            \n+                scrape_all(request.words.clone()).await;\n+        \n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643882721507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,13 +307,13 @@\n \n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n-        async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n+        fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             \n-                scrape_all(request.words.clone()).await;\n-        \n+                \n+            \n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643882771016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,11 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            \n-                \n-            \n+            thread::spawn(async move || scrape_all(request.words))\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643882778031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            thread::spawn(async move || scrape_all(request.words))\n+            thread::spawn( move || scrape_all(request.words));\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883075436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            thread::spawn( move || scrape_all(request.words));\n+            thread::spawn(move || scrape_all(request.words));\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n@@ -489,9 +489,9 @@\n         );\n         sleep(Duration::from_secs(2));\n \n         let words = WordListReq {\n-            words: vec![\"alex\".to_string()],\n+            words: vec![\"correct\".to_string()],\n         };\n         let json = serde_json::to_string(&words).unwrap();\n         exchange_message(\n             silvester.clone(),\n"
                },
                {
                    "date": 1643883166404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n-            thread::spawn(move || scrape_all(request.words));\n+            let _ = thread::spawn(move || scrape_all(request.words));\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883202911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n     use log::{error, info};\n     use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{thread, time::Duration, ops::ControlFlow};\n+    use std::{thread::{self, sleep}, time::Duration, ops::ControlFlow};\n \n     use super::{MessageType, ProcessResult, ACTORS};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n@@ -310,8 +310,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             let _ = thread::spawn(move || scrape_all(request.words));\n+            sleep(Duration::from_secs(1));\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883337876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,8 +310,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled....\");\n             let _ = thread::spawn(move || scrape_all(request.words));\n+            info!(\"scrape_all should be spawned....\");\n             sleep(Duration::from_secs(1));\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n"
                },
                {
                    "date": 1643883384163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n     use log::{error, info};\n     use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{thread::{self, sleep}, time::Duration, ops::ControlFlow};\n+    use std::{thread::{self, sleep, JoinHandle}, time::Duration, ops::ControlFlow};\n \n     use super::{MessageType, ProcessResult, ACTORS};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n@@ -308,12 +308,13 @@\n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n-            info!(\"message is being handled....\");\n-            let _ = thread::spawn(move || scrape_all(request.words));\n-            info!(\"scrape_all should be spawned....\");\n+            info!(\"message is being handled...\");\n+            let handler = thread::spawn(move || scrape_all(request.words));\n+            info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n+            JoinHandle::join(self)\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883389564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n             info!(\"message is being handled...\");\n             let handler = thread::spawn(move || scrape_all(request.words));\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n-            JoinHandle::join(self)\n+            JoinHandle::join(handler)\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883401434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n             info!(\"message is being handled...\");\n             let handler = thread::spawn(move || scrape_all(request.words));\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n-            JoinHandle::join(handler)\n+            JoinHandle::join(handler.unwrap());\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883407452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n             info!(\"message is being handled...\");\n             let handler = thread::spawn(move || scrape_all(request.words));\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n-            JoinHandle::join(handler.unwrap());\n+            JoinHandle::join(handler);\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883417855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n             info!(\"message is being handled...\");\n             let handler = thread::spawn(move || scrape_all(request.words));\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n-            JoinHandle::join(handler);\n+            handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883440989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n             info!(\"message is being handled...\");\n             let handler = thread::spawn(move || scrape_all(request.words));\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n-            handler.join();\n+            let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883572946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || scrape_all(request.words));\n+            let handler = thread::spawn(move || scrape_all(request.words).await);\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n             let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883591892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || scrape_all(request.words).await);\n+            let handler = thread::spawn(async move || scrape_all(request.words).await);\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n             let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883614600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(async move || scrape_all(request.words).await);\n+            let handler = thread::spawn(move || scrape_all(request.words).await);\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n             let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883630713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || scrape_all(request.words).await);\n+            let handler = thread::spawn(move || scrape_all(async{request.words).await});\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n             let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883661485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || scrape_all(async{request.words).await});\n+            let handler = thread::spawn(move || {scrape_all(request.words).await});\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n             let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883668402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || {scrape_all(request.words).await});\n+            let handler = thread::spawn(move || asycn {scrape_all(request.words).await});\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n             let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883673725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || asycn {scrape_all(request.words).await});\n+            let handler = thread::spawn(move || async {scrape_all(request.words).await});\n             info!(\"scrape_all should be spawned...\");\n             sleep(Duration::from_secs(1));\n             let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883725128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,11 +310,10 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             let handler = thread::spawn(move || async {scrape_all(request.words).await});\n+            sleep(Duration::from_secs(1));\n             info!(\"scrape_all should be spawned...\");\n-            sleep(Duration::from_secs(1));\n-            let _ = handler.join();\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n \n"
                },
                {
                    "date": 1643883778106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n     use log::{error, info};\n     use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{thread::{self, sleep, JoinHandle}, time::Duration, ops::ControlFlow};\n+    use std::{thread::{self, sleep, JoinHandle}, time::Duration, ops::ControlFlow, vec};\n \n     use super::{MessageType, ProcessResult, ACTORS};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n@@ -310,8 +310,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             let handler = thread::spawn(move || async {scrape_all(request.words).await});\n+            join_all(vec![handler]);\n             sleep(Duration::from_secs(1));\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n"
                },
                {
                    "date": 1643883848646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,9 @@\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n+    use futures::future::join_all;\n     use log::{error, info};\n     use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n@@ -309,9 +310,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || async {scrape_all(request.words).await});\n+            let handler = thread::spawn(move || async scrape_all(request.words));\n             join_all(vec![handler]);\n             sleep(Duration::from_secs(1));\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883885310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move || async scrape_all(request.words));\n+            let handler = thread::spawn(move ||  scrape_all(request.words));\n             join_all(vec![handler]);\n             sleep(Duration::from_secs(1));\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883929204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = thread::spawn(move ||  scrape_all(request.words));\n+            let handler = scrape_all(request.words);\n             join_all(vec![handler]);\n             sleep(Duration::from_secs(1));\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n"
                },
                {
                    "date": 1643883949563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,11 +310,14 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let handler = scrape_all(request.words);\n-            join_all(vec![handler]);\n-            sleep(Duration::from_secs(1));\n+            async{\n+                let handler = scrape_all(request.words);\n+                join_all(vec![handler]);\n+                sleep(Duration::from_secs(1));\n+            }\n+            \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n     }\n"
                },
                {
                    "date": 1643883958385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n             async{\n                 let handler = scrape_all(request.words);\n                 join_all(vec![handler]);\n                 sleep(Duration::from_secs(1));\n-            }\n+            };\n             \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes { processed: vec![], not_found: vec![] })\n         }\n"
                },
                {
                    "date": 1643883965129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,14 @@\n     use log::{error, info};\n     use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n-    use std::{thread::{self, sleep, JoinHandle}, time::Duration, ops::ControlFlow, vec};\n+    use std::{\n+        ops::ControlFlow,\n+        thread::{self, sleep, JoinHandle},\n+        time::Duration,\n+        vec,\n+    };\n \n     use super::{MessageType, ProcessResult, ACTORS};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n@@ -269,12 +274,11 @@\n             let _ = handler.send(binary);\n         }\n     }\n \n-\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct WordListReq {\n-        pub words: Vec<String>\n+        pub words: Vec<String>,\n     }\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     pub struct WordListRes {\n@@ -301,25 +305,27 @@\n             MessageType::Response\n         }\n     }\n \n-\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            async{\n+            async {\n                 let handler = scrape_all(request.words);\n                 join_all(vec![handler]);\n                 sleep(Duration::from_secs(1));\n             };\n-            \n+\n             info!(\"scrape_all should be spawned...\");\n-            Ok(WordListRes { processed: vec![], not_found: vec![] })\n+            Ok(WordListRes {\n+                processed: vec![],\n+                not_found: vec![],\n+            })\n         }\n     }\n \n     pub fn run<\n@@ -347,9 +353,11 @@\n \n                         if system_message.command.is_some() {\n                             let command = system_message.command.unwrap();\n \n-                            if let ControlFlow::Break(_) = process_command(command, registered_name, &from) {\n+                            if let ControlFlow::Break(_) =\n+                                process_command(command, registered_name, &from)\n+                            {\n                                 continue;\n                             }\n                         }\n \n@@ -388,9 +396,13 @@\n         }\n         Ok(())\n     }\n \n-    fn process_command(command: SystemCommand, registered_name: &str, from: &String) -> ControlFlow<()> {\n+    fn process_command(\n+        command: SystemCommand,\n+        registered_name: &str,\n+        from: &String,\n+    ) -> ControlFlow<()> {\n         match command {\n             SystemCommand::Ping => {\n                 info!(\n                     \"{} -> Command {:?} has been sent from {}\",\n@@ -431,13 +443,9 @@\n                 info!(\n                     \"{} -> Command {:?} has been sent from {}\",\n                     &registered_name, command, &from\n                 );\n-                exchange_command(\n-                    registered_name.to_string(),\n-                    from.clone(),\n-                    SystemCommand::Ok,\n-                );\n+                exchange_command(registered_name.to_string(), from.clone(), SystemCommand::Ok);\n                 return ControlFlow::Break(());\n             }\n             SystemCommand::Ok => {\n                 info!(\"Command {:?} has been sent from {}\", command, &from);\n"
                },
                {
                    "date": 1643883979208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             async {\n-                let handler = scrape_all(request.words);\n+                let handler = scrape_all(request.words).await;\n                 join_all(vec![handler]);\n                 sleep(Duration::from_secs(1));\n             };\n \n"
                },
                {
                    "date": 1643883989897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,10 +314,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             async {\n-                let handler = scrape_all(request.words).await;\n-                join_all(vec![handler]);\n+                scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n             };\n \n             info!(\"scrape_all should be spawned...\");\n"
                },
                {
                    "date": 1643884036689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            async {\n+            let fut = async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n             };\n \n"
                },
                {
                    "date": 1643884068889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n-    use futures::future::join_all;\n+    use futures::future::{join_all, join};\n     use log::{error, info};\n     use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n@@ -317,9 +317,9 @@\n             let fut = async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n             };\n-\n+            \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643884083696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n             let fut = async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n             };\n-            \n+            join_all(vec![fut]);\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643884147288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,8 @@\n             let fut = async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n             };\n-            join_all(vec![fut]);\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643884155087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            let fut = async {\n+            async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n             };\n             info!(\"scrape_all should be spawned...\");\n"
                },
                {
                    "date": 1643884161677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n             info!(\"message is being handled...\");\n             async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n-            };\n+            }\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643884168280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n             info!(\"message is being handled...\");\n             async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n-            }\n+            };\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643884263007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,8 +308,14 @@\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n+    impl WordListReq {\n+        async fn(list: Vec<String>) {\n+            \n+        }\n+    }\n+\n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n"
                },
                {
                    "date": 1643884272728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,10 +309,10 @@\n     #[derive(Debug, Clone, Serialize, Deserialize)]\n     struct WordListHander {}\n \n     impl WordListReq {\n-        async fn(list: Vec<String>) {\n-            \n+        async fn do_it(list: Vec<String>) {\n+\n         }\n     }\n \n     impl MessageHandler for WordListReq {\n"
                },
                {
                    "date": 1643884280797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n     struct WordListHander {}\n \n     impl WordListReq {\n         async fn do_it(list: Vec<String>) {\n-\n+            scrape_all(request.words).await\n         }\n     }\n \n     impl MessageHandler for WordListReq {\n"
                },
                {
                    "date": 1643884287293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n     struct WordListHander {}\n \n     impl WordListReq {\n         async fn do_it(list: Vec<String>) {\n-            scrape_all(request.words).await\n+            scrape_all(list).await\n         }\n     }\n \n     impl MessageHandler for WordListReq {\n"
                },
                {
                    "date": 1643884641902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n     collections::HashMap,\n     fmt::{Display, Formatter},\n     sync::Mutex,\n };\n-\n+use async_trait::async_trait;\n use common_libs::error::FmtResult;\n \n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n"
                },
                {
                    "date": 1643884666897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,8 +203,9 @@\n         fn reply(&self) -> bool;\n         fn message_type(&self) -> MessageType;\n     }\n \n+    #[async_trait]\n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n         fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n"
                },
                {
                    "date": 1643884680211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n \n     #[async_trait]\n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n-        fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n+        async fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n     fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n         binary: Vec<u8>,\n"
                },
                {
                    "date": 1643884710396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,12 +315,13 @@\n             scrape_all(list).await\n         }\n     }\n \n+    #[async_trait]\n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n-        fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n+        async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n"
                },
                {
                    "date": 1643884719162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,12 +321,11 @@\n         type Output = WordListRes;\n \n         async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            async {\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n-            };\n+        \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643884727867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,9 @@\n }\n \n pub mod actor {\n     use crate::CommandHandler;\n+    use async_trait::async_trait;\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n"
                },
                {
                    "date": 1643884752828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n         type Output;\n         async fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n-    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n+    async fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n         binary: Vec<u8>,\n         handler: impl MessageHandler<Req, Output = Res>,\n     ) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n"
                },
                {
                    "date": 1643906353326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,12 +204,11 @@\n         fn reply(&self) -> bool;\n         fn message_type(&self) -> MessageType;\n     }\n \n-    #[async_trait]\n     pub trait MessageHandler<Rhs = Self> {\n         type Output;\n-        async fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n+        fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n     async fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n         binary: Vec<u8>,\n"
                },
                {
                    "date": 1643906362782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n     collections::HashMap,\n     fmt::{Display, Formatter},\n     sync::Mutex,\n };\n-use async_trait::async_trait;\n use common_libs::error::FmtResult;\n \n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n"
                },
                {
                    "date": 1643906386794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,8 @@\n             scrape_all(list).await\n         }\n     }\n \n-    #[async_trait]\n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n         async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n"
                },
                {
                    "date": 1643906395045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n \n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n-        async fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n+        fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n                 scrape_all(request.words).await;\n                 sleep(Duration::from_secs(1));\n         \n"
                },
                {
                    "date": 1643906409353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,9 +319,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-                scrape_all(request.words).await;\n+                scrape_all(request.words);\n                 sleep(Duration::from_secs(1));\n         \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n"
                },
                {
                    "date": 1643906419141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,10 +319,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-                scrape_all(request.words);\n-                sleep(Duration::from_secs(1));\n+            scrape_all(request.words);\n         \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n"
                },
                {
                    "date": 1643906661633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,10 +319,12 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            scrape_all(request.words);\n-        \n+            tokio::spawn(async move {\n+                scrape_all(request.words);\n+            });\n+            \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643906700821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             tokio::spawn(async move {\n-                scrape_all(request.words);\n+                scrape_all(request.words).await;\n             });\n             \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n"
                },
                {
                    "date": 1643906783600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n         type Output;\n         fn handle(self, message: Rhs) -> ProcessResult<Self::Output>;\n     }\n \n-    async fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n+    fn handle_message<Req: ?Sized + DeserializeOwned, Res>(\n         binary: Vec<u8>,\n         handler: impl MessageHandler<Req, Output = Res>,\n     ) -> ProcessResult<Res> {\n         let req = from_binary::<Req>(binary).unwrap();\n"
                },
                {
                    "date": 1643907058938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         async fn do_it(list: Vec<String>) {\n             scrape_all(list).await\n         }\n     }\n-\n+    \n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n"
                },
                {
                    "date": 1643907312180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,14 +313,16 @@\n         async fn do_it(list: Vec<String>) {\n             scrape_all(list).await\n         }\n     }\n-    \n+\n     impl MessageHandler for WordListReq {\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n+            runtime::Runtime::new().unwrap().block_on(async {\n+                let value = spawn_tokio(ok::<_, u8>(\":)\")).await.unwrap();\n             tokio::spawn(async move {\n                 scrape_all(request.words).await;\n             });\n             \n"
                },
                {
                    "date": 1643907346551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,8 +156,9 @@\n     use log::{error, info};\n     use mk_scraper::scrape_all;\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n+    use tokio::runtime;\n     use std::{\n         ops::ControlFlow,\n         thread::{self, sleep, JoinHandle},\n         time::Duration,\n@@ -320,13 +321,13 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             runtime::Runtime::new().unwrap().block_on(async {\n-                let value = spawn_tokio(ok::<_, u8>(\":)\")).await.unwrap();\n-            tokio::spawn(async move {\n-                scrape_all(request.words).await;\n-            });\n+                let value = tokio::spawn(async move {\n+                    scrape_all(request.words).await;\n+                }).await.unwrap();\n             \n+            \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643907401873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,13 +321,13 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             runtime::Runtime::new().unwrap().block_on(async {\n-                let value = tokio::spawn(async move {\n-                    scrape_all(request.words).await;\n-                }).await.unwrap();\n+                let value = spawn_tokio(scrape_all(request.words)).await.unwrap();\n+            tokio::spawn(async move {\n+                scrape_all(request.words).await;\n+            });\n             \n-            \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643907418416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,12 +321,10 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             runtime::Runtime::new().unwrap().block_on(async {\n-                let value = spawn_tokio(scrape_all(request.words)).await.unwrap();\n-            tokio::spawn(async move {\n-                scrape_all(request.words).await;\n-            });\n+                let value = tokio::spawn(scrape_all(request.words)).await.unwrap();\n+  \n             \n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n"
                },
                {
                    "date": 1643907426742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n         type Output = WordListRes;\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n-            runtime::Runtime::new().unwrap().block_on(async {\n+            runtime::Runtime::new().unwrap().block_on(async move {\n                 let value = tokio::spawn(scrape_all(request.words)).await.unwrap();\n   \n             \n             info!(\"scrape_all should be spawned...\");\n"
                },
                {
                    "date": 1643907450912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,9 +323,9 @@\n             info!(\"message is being handled...\");\n             runtime::Runtime::new().unwrap().block_on(async move {\n                 let value = tokio::spawn(scrape_all(request.words)).await.unwrap();\n   \n-            \n+            });\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n                 not_found: vec![],\n"
                },
                {
                    "date": 1643907458800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             runtime::Runtime::new().unwrap().block_on(async move {\n-                let value = tokio::spawn(scrape_all(request.words)).await.unwrap();\n+                let _value = tokio::spawn(scrape_all(request.words)).await.unwrap();\n   \n             });\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n"
                },
                {
                    "date": 1643907897923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n \n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             runtime::Runtime::new().unwrap().block_on(async move {\n-                let _value = tokio::spawn(scrape_all(request.words)).await.unwrap();\n+                let _value = tokio::spawn(tokio_scrape_all(request.words)).await.unwrap();\n   \n             });\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n"
                },
                {
                    "date": 1643907961785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n         utils::from_binary,\n     };\n     use futures::future::{join_all, join};\n     use log::{error, info};\n-    use mk_scraper::scrape_all;\n+    use mk_scraper::{scrape_all, tokio_scrape_all};\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n     use tokio::runtime;\n     use std::{\n@@ -484,9 +484,9 @@\n         actor::{exchange_message, WordListReq},\n         MessageType,\n     };\n \n-    #[test]\n+    #[tokio::test]\n     fn ping_pong_test() {\n         configure_log4rs();\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n"
                },
                {
                    "date": 1643908006543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,9 +485,9 @@\n         MessageType,\n     };\n \n     #[tokio::test]\n-    fn ping_pong_test() {\n+    async fn ping_pong_test() {\n         configure_log4rs();\n         let arnold = \"arnold\".to_string();\n         let silvester = \"silvester\".to_string();\n         let _ok = start_actor(silvester.clone());\n"
                },
                {
                    "date": 1643981214292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,9 +375,9 @@\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     }\n-                                };\n+                                };                                                                \n                             if response.reply() {\n                                 let json = serde_json::to_string(&response).unwrap();\n                                 exchange_message(\n                                     registered_name.to_string(),\n@@ -386,8 +386,10 @@\n                                     correlation_id,\n                                     response.message_type(),\n                                 );\n                             }\n+\n+                            info!(\"Server {} reports that message has been handled successfully\", registered_name);\n                         }\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n"
                },
                {
                    "date": 1643981311632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,10 +387,12 @@\n                                     response.message_type(),\n                                 );\n                             }\n \n-                            info!(\"Server {} reports that message has been handled successfully\", registered_name);\n+                            \n                         }\n+\n+                        info!(\"Server {} reports that message has been handled successfully\", registered_name);\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n                     }\n"
                },
                {
                    "date": 1643981317442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,8 +366,9 @@\n                             }\n                         }\n \n                         info!(\"processing msg payload...\");\n+                        \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let response: Res =\n                                 match handle_message(binary, message_handler.clone()) {\n"
                },
                {
                    "date": 1643981361760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -525,7 +525,7 @@\n             Some(\"123\".to_string()),\n             MessageType::Request,\n         );\n \n-        sleep(Duration::from_secs(2));\n+        sleep(Duration::from_secs(5));\n     }\n }\n"
                },
                {
                    "date": 1643981496254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,10 @@\n                         info!(\"processing msg payload...\");\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let response: Res =\n+                            async{\n+                                let response: Res =\n                                 match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n@@ -387,8 +388,10 @@\n                                     correlation_id,\n                                     response.message_type(),\n                                 );\n                             }\n+                            }\n+                            \n \n                             \n                         }\n \n"
                },
                {
                    "date": 1643981509323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,10 +369,10 @@\n                         info!(\"processing msg payload...\");\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            async{\n-                                let response: Res =\n+                            \n+                            let response: Res =\n                                 match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n@@ -388,10 +388,8 @@\n                                     correlation_id,\n                                     response.message_type(),\n                                 );\n                             }\n-                            }\n-                            \n \n                             \n                         }\n \n"
                },
                {
                    "date": 1643981522375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,11 @@\n                         info!(\"processing msg payload...\");\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            \n+                            async {\n+                                \n+                            }\n                             let response: Res =\n                                 match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n"
                },
                {
                    "date": 1643981533843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,18 +370,18 @@\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             async {\n-                                \n-                            }\n-                            let response: Res =\n+                                let response: Res =\n                                 match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);\n                                         continue;\n                                     }\n-                                };                                                                \n+                                };   \n+                            }\n+                                                                                         \n                             if response.reply() {\n                                 let json = serde_json::to_string(&response).unwrap();\n                                 exchange_message(\n                                     registered_name.to_string(),\n"
                },
                {
                    "date": 1643981541162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,10 +374,9 @@\n                                 let response: Res =\n                                 match handle_message(binary, message_handler.clone()) {\n                                     Ok(res) => res,\n                                     Err(err) => {\n-                                        error!(\"failure.to.process.message: {:?}\", err);\n-                                        continue;\n+                                        error!(\"failure.to.process.message: {:?}\", err);                                        \n                                     }\n                                 };   \n                             }\n                                                                                          \n"
                },
                {
                    "date": 1643981557939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,20 +377,21 @@\n                                     Err(err) => {\n                                         error!(\"failure.to.process.message: {:?}\", err);                                        \n                                     }\n                                 };   \n+                                if response.reply() {\n+                                    let json = serde_json::to_string(&response).unwrap();\n+                                    exchange_message(\n+                                        registered_name.to_string(),\n+                                        from.clone(),\n+                                        json,\n+                                        correlation_id,\n+                                        response.message_type(),\n+                                    );\n+                                }\n                             }\n                                                                                          \n-                            if response.reply() {\n-                                let json = serde_json::to_string(&response).unwrap();\n-                                exchange_message(\n-                                    registered_name.to_string(),\n-                                    from.clone(),\n-                                    json,\n-                                    correlation_id,\n-                                    response.message_type(),\n-                                );\n-                            }\n+                            \n \n                             \n                         }\n \n"
                },
                {
                    "date": 1643981590914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,26 +370,11 @@\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             async {\n-                                let response: Res =\n-                                match handle_message(binary, message_handler.clone()) {\n-                                    Ok(res) => res,\n-                                    Err(err) => {\n-                                        error!(\"failure.to.process.message: {:?}\", err);                                        \n-                                    }\n-                                };   \n-                                if response.reply() {\n-                                    let json = serde_json::to_string(&response).unwrap();\n-                                    exchange_message(\n-                                        registered_name.to_string(),\n-                                        from.clone(),\n-                                        json,\n-                                        correlation_id,\n-                                        response.message_type(),\n-                                    );\n-                                }\n-                            }\n+                                \n+                                handle_message(binary, message_handler.clone()) \n+                            };\n                                                                                          \n                             \n \n                             \n"
                },
                {
                    "date": 1643981597441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,10 +370,9 @@\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             async {\n-                                \n-                                handle_message(binary, message_handler.clone()) \n+                                handle_message(binary, message_handler.clone()) ;\n                             };\n                                                                                          \n                             \n \n"
                },
                {
                    "date": 1643981609871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,12 +372,8 @@\n                             let binary = system_message.payload.unwrap();\n                             async {\n                                 handle_message(binary, message_handler.clone()) ;\n                             };\n-                                                                                         \n-                            \n-\n-                            \n                         }\n \n                         info!(\"Server {} reports that message has been handled successfully\", registered_name);\n                     } else {\n"
                },
                {
                    "date": 1643981629494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             async {\n-                                handle_message(binary, message_handler.clone()) ;\n+                                let fut = handle_message(binary, message_handler.clone()) ;\n                             };\n                         }\n \n                         info!(\"Server {} reports that message has been handled successfully\", registered_name);\n"
                },
                {
                    "date": 1643981659700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,10 +369,10 @@\n                         info!(\"processing msg payload...\");\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            async {\n-                                let fut = handle_message(binary, message_handler.clone()) ;\n+                            let fut = async {\n+                                handle_message(binary, message_handler.clone());\n                             };\n                         }\n \n                         info!(\"Server {} reports that message has been handled successfully\", registered_name);\n"
                },
                {
                    "date": 1643981667184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n                         \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let fut = async {\n-                                handle_message(binary, message_handler.clone());\n+                                handle_message(binary, message_handler.clone())\n                             };\n                         }\n \n                         info!(\"Server {} reports that message has been handled successfully\", registered_name);\n"
                },
                {
                    "date": 1643981695061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,8 +372,15 @@\n                             let binary = system_message.payload.unwrap();\n                             let fut = async {\n                                 handle_message(binary, message_handler.clone())\n                             };\n+                            let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n+        .threaded_scheduler()\n+        .enable_all()\n+        .core_threads(10)\n+        .max_threads(10)\n+        .thread_name(\"multi-threaded\")\n+        .build()?;\n                         }\n \n                         info!(\"Server {} reports that message has been handled successfully\", registered_name);\n                     } else {\n"
                },
                {
                    "date": 1643981703853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n+use common_libs::error::FmtResult;\n use std::{\n     collections::HashMap,\n     fmt::{Display, Formatter},\n     sync::Mutex,\n };\n-use common_libs::error::FmtResult;\n \n use serde::{Deserialize, Serialize};\n use serde_json::to_string_pretty;\n \n@@ -151,20 +151,20 @@\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n-    use futures::future::{join_all, join};\n+    use futures::future::{join, join_all};\n     use log::{error, info};\n     use mk_scraper::{scrape_all, tokio_scrape_all};\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n-    use tokio::runtime;\n     use std::{\n         ops::ControlFlow,\n         thread::{self, sleep, JoinHandle},\n         time::Duration,\n         vec,\n     };\n+    use tokio::runtime;\n \n     use super::{MessageType, ProcessResult, ACTORS};\n \n     #[derive(Debug, Clone, Serialize, Deserialize)]\n@@ -322,9 +322,8 @@\n         fn handle(self, request: WordListReq) -> ProcessResult<Self::Output> {\n             info!(\"message is being handled...\");\n             runtime::Runtime::new().unwrap().block_on(async move {\n                 let _value = tokio::spawn(tokio_scrape_all(request.words)).await.unwrap();\n-  \n             });\n             info!(\"scrape_all should be spawned...\");\n             Ok(WordListRes {\n                 processed: vec![],\n@@ -366,24 +365,25 @@\n                             }\n                         }\n \n                         info!(\"processing msg payload...\");\n-                        \n+\n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let fut = async {\n-                                handle_message(binary, message_handler.clone())\n-                            };\n+                            let fut = async { handle_message(binary, message_handler.clone()) };\n                             let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n-        .threaded_scheduler()\n-        .enable_all()\n-        .core_threads(10)\n-        .max_threads(10)\n-        .thread_name(\"multi-threaded\")\n-        .build()?;\n+                                .threaded_scheduler()\n+                                .enable_all()\n+                                .core_threads(10)\n+                                .max_threads(10)\n+                                .thread_name(\"multi-threaded\")\n+                                .build()?;\n                         }\n \n-                        info!(\"Server {} reports that message has been handled successfully\", registered_name);\n+                        info!(\n+                            \"Server {} reports that message has been handled successfully\",\n+                            registered_name\n+                        );\n                     } else {\n                         error!(\"invalid.message\");\n                         break;\n                     }\n"
                },
                {
                    "date": 1643981715206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,9 +375,9 @@\n                                 .enable_all()\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n-                                .build()?;\n+                                .build().unwrap();\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643981726426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let fut = async { handle_message(binary, message_handler.clone()) };\n-                            let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n+                            let multi_threaded_runtime = tokio::runtime::Builder::new()\n                                 .threaded_scheduler()\n                                 .enable_all()\n                                 .core_threads(10)\n                                 .max_threads(10)\n"
                },
                {
                    "date": 1643981742596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,8 +376,9 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n+                                multi_threaded_runtime.block_on(fut);\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643981754573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n                             let fut = async { handle_message(binary, message_handler.clone()) };\n-                            let multi_threaded_runtime = tokio::runtime::Builder::new()\n+                            let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n                                 .threaded_scheduler()\n                                 .enable_all()\n                                 .core_threads(10)\n                                 .max_threads(10)\n"
                },
                {
                    "date": 1643981766230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,9 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n-                                multi_threaded_runtime.block_on(fut);\n+                                let _ =multi_threaded_runtime.block_on(fut);\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643981823707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,9 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n-                                let _ =multi_threaded_runtime.block_on(fut);\n+                                let _ = multi_threaded_runtime.spawn(fut);\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643981895414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,9 @@\n                         info!(\"processing msg payload...\");\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let fut = async { handle_message(binary, message_handler.clone()) };\n+                            let fut = async move { handle_message(binary, message_handler.clone()) };\n                             let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n                                 .threaded_scheduler()\n                                 .enable_all()\n                                 .core_threads(10)\n"
                },
                {
                    "date": 1643981939745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,9 @@\n                         info!(\"processing msg payload...\");\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let fut = async move { handle_message(binary, message_handler.clone()) };\n+                            let fut = async move { sleep(Duration::from_secs(2)) };\n                             let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n                                 .threaded_scheduler()\n                                 .enable_all()\n                                 .core_threads(10)\n"
                },
                {
                    "date": 1643982024381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,13 @@\n                         info!(\"processing msg payload...\");\n \n                         if system_message.payload.is_some() {\n                             let binary = system_message.payload.unwrap();\n-                            let fut = async move { sleep(Duration::from_secs(2)) };\n+                            let fut = async move { \n+                                info!(\"start sleeping for 2 sec...\");\n+                                let f = sleep(Duration::from_secs(2));\n+                                info!(\"start sleeping for 2 sec...\");\n+                            };\n                             let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n                                 .threaded_scheduler()\n                                 .enable_all()\n                                 .core_threads(10)\n"
                },
                {
                    "date": 1643982030404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,10 @@\n                             let binary = system_message.payload.unwrap();\n                             let fut = async move { \n                                 info!(\"start sleeping for 2 sec...\");\n                                 let f = sleep(Duration::from_secs(2));\n-                                info!(\"start sleeping for 2 sec...\");\n+                                info!(\"done\");\n+                                f\n                             };\n                             let mut multi_threaded_runtime = tokio::runtime::Builder::new()\n                                 .threaded_scheduler()\n                                 .enable_all()\n"
                },
                {
                    "date": 1643982129469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n     use common_libs::{\n         error::{AppError, AppResult},\n         utils::from_binary,\n     };\n-    use futures::future::{join, join_all};\n+    use futures::{future::{join, join_all}, StreamExt};\n     use log::{error, info};\n     use mk_scraper::{scrape_all, tokio_scrape_all};\n     use serde::{de::DeserializeOwned, Deserialize, Serialize};\n     use serde_json::Map;\n@@ -381,9 +381,9 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n-                                let _ = multi_threaded_runtime.spawn(fut);\n+                                let _ = multi_threaded_runtime..spawn(fut).buffer_unordered(2);\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643982192243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,9 +381,9 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n-                                let _ = multi_threaded_runtime..spawn(fut).buffer_unordered(2);\n+                                let _ = multi_threaded_runtime..spawn(fut);\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643982203585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,9 +381,9 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n-                                let _ = multi_threaded_runtime..spawn(fut);\n+                                let _ = multi_threaded_runtime.spawn(fut);\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643982210828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,9 +381,9 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n-                                let _ = multi_threaded_runtime.spawn(fut);\n+                                let _ = multi_threaded_runtime.spawn(fut).await;\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                },
                {
                    "date": 1643982607198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,9 +381,10 @@\n                                 .core_threads(10)\n                                 .max_threads(10)\n                                 .thread_name(\"multi-threaded\")\n                                 .build().unwrap();\n-                                let _ = multi_threaded_runtime.spawn(fut).await;\n+                                let _ = multi_threaded_runtime.spawn(fut);\n+                                futures::Future::join()\n                         }\n \n                         info!(\n                             \"Server {} reports that message has been handled successfully\",\n"
                }
            ],
            "date": 1642086490668,
            "name": "Commit-0",
            "content": "#[derive(Debug, Clone)]\npub struct Message {\n\n}\n\npub enum Command {\n    Stop,\n    Ping,\n    Status,\n    Process\n}"
        }
    ]
}