{
    "sourceFile": "common_libs/src/error.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1641794264096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641794358700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n use serde::Serialize;\n use serde_json::to_string_pretty;\n \n-use super::FmtResult;\n+use std::fmt::Error;\n \n \n pub type DataResult<T> = std::result::Result<T, RuntimeError>;\n pub type ServiceExuctionResult<T> = std::result::Result<T, ServiceError>;\n"
                },
                {
                    "date": 1641798978872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n use serde_json::to_string_pretty;\n \n use std::fmt::Error;\n \n-\n pub type DataResult<T> = std::result::Result<T, RuntimeError>;\n pub type ServiceExuctionResult<T> = std::result::Result<T, ServiceError>;\n pub type TestResult<T> = std::result::Result<T, TestError>;\n pub type AppResult<T> = std::result::Result<T, AppError>;\n@@ -161,9 +160,8 @@\n     }\n }\n \n \n-\n impl From<std::io::Error> for DictionaryError {\n     fn from(error: std::io::Error) -> Self {\n         let msg = format!(\"io error: {}\", error.to_string());\n         DictionaryError::throw(&msg, DictionaryErrorKind::IOError)\n"
                },
                {
                    "date": 1642333357374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n use std::{fmt::{Display, Formatter}, string::FromUtf8Error};\n \n use serde::Serialize;\n use serde_json::to_string_pretty;\n-\n+                     \n use std::fmt::Error;\n \n-pub type DataResult<T> = std::result::Result<T, RuntimeError>;\n+pub type RuntimeResult<T> = std::result::Result<T, RuntimeError>;\n pub type ServiceExuctionResult<T> = std::result::Result<T, ServiceError>;\n pub type TestResult<T> = std::result::Result<T, TestError>;\n pub type AppResult<T> = std::result::Result<T, AppError>;\n pub type FmtResult = std::result::Result<(), Error>;\n"
                },
                {
                    "date": 1642525713763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,4 +173,11 @@\n         let msg = format!(\"json error: {}\", error.to_string());\n         DictionaryError::throw(&msg, DictionaryErrorKind::SerializationError)\n     }\n }\n+\n+impl From<serde_json::Error> for RuntimeError {\n+    fn from(error: serde_json::Error) -> Self {\n+        let msg = format!(\"json error: {}\", error.to_string());\n+        DictionaryError::throw(&msg, DictionaryErrorKind::SerializationError)\n+    }\n+}\n"
                },
                {
                    "date": 1642525743573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,7 +177,9 @@\n \n impl From<serde_json::Error> for RuntimeError {\n     fn from(error: serde_json::Error) -> Self {\n         let msg = format!(\"json error: {}\", error.to_string());\n-        DictionaryError::throw(&msg, DictionaryErrorKind::SerializationError)\n+        RuntimeError{\n+            \n+        }\n     }\n }\n"
                },
                {
                    "date": 1642525809042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,8 +178,9 @@\n impl From<serde_json::Error> for RuntimeError {\n     fn from(error: serde_json::Error) -> Self {\n         let msg = format!(\"json error: {}\", error.to_string());\n         RuntimeError{\n-            \n+            message: msg,\n+            error_type: RuntimeErrorType::InvalidData\n         }\n     }\n }\n"
                },
                {
                    "date": 1642527061877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,15 +167,10 @@\n         DictionaryError::throw(&msg, DictionaryErrorKind::IOError)\n     }\n }\n \n-impl From<serde_json::Error> for DictionaryError {\n-    fn from(error: serde_json::Error) -> Self {\n-        let msg = format!(\"json error: {}\", error.to_string());\n-        DictionaryError::throw(&msg, DictionaryErrorKind::SerializationError)\n-    }\n-}\n \n+\n impl From<serde_json::Error> for RuntimeError {\n     fn from(error: serde_json::Error) -> Self {\n         let msg = format!(\"json error: {}\", error.to_string());\n         RuntimeError{\n"
                },
                {
                    "date": 1642527092207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,10 +167,15 @@\n         DictionaryError::throw(&msg, DictionaryErrorKind::IOError)\n     }\n }\n \n+impl From<serde_json::Error> for DictionaryError {\n+    fn from(error: serde_json::Error) -> Self {\n+        let msg = format!(\"json error: {}\", error.to_string());\n+        DictionaryError::throw(&msg, DictionaryErrorKind::SerializationError)\n+    }\n+}\n \n-\n impl From<serde_json::Error> for RuntimeError {\n     fn from(error: serde_json::Error) -> Self {\n         let msg = format!(\"json error: {}\", error.to_string());\n         RuntimeError{\n"
                }
            ],
            "date": 1641794264096,
            "name": "Commit-0",
            "content": "use std::{fmt::{Display, Formatter}, string::FromUtf8Error};\n\nuse serde::Serialize;\nuse serde_json::to_string_pretty;\n\nuse super::FmtResult;\n\n\npub type DataResult<T> = std::result::Result<T, RuntimeError>;\npub type ServiceExuctionResult<T> = std::result::Result<T, ServiceError>;\npub type TestResult<T> = std::result::Result<T, TestError>;\npub type AppResult<T> = std::result::Result<T, AppError>;\npub type FmtResult = std::result::Result<(), Error>;\n\n#[derive(Debug, Serialize, PartialEq)]\n#[allow(warnings)]\npub struct DictionaryError {\n    pub message: String,\n    pub error_kind: DictionaryErrorKind,\n}\n\n#[derive(Debug, Serialize, PartialEq)]\npub struct RuntimeError {\n    pub message: String,\n    pub error_type: RuntimeErrorType,\n}\n\n#[derive(Debug, Serialize, PartialEq)]\npub enum RuntimeErrorType {\n    InvalidData,\n    NotFound,\n}\n\n#[derive(Debug, Serialize, PartialEq)]\npub struct ServiceError {\n    pub message: String,\n    pub error_type: ServiceErrorType,\n}\n\n#[derive(Debug, Serialize, PartialEq)]\npub enum ServiceErrorType {\n    Failure,\n    SerializationError,\n    ResourceNotFound,\n    IOError,\n    Unavailable\n}\n#[derive(Debug, Serialize, PartialEq)]\npub struct TestError {\n    pub message: String,\n    pub error_type: TestErrorType,\n}\n\n#[derive(Debug, Serialize, PartialEq)]\npub enum TestErrorType {\n    Timeout,\n    WrongAnswer,\n}\n\n#[derive(Debug, Serialize, PartialEq)]\npub struct AppError {\n    pub message: String,\n}\n\nimpl AppError {\n    pub fn throw(msg: &str) -> Self {\n        AppError {\n            message: msg.to_lowercase(),\n        }\n    }\n}\n\nimpl Display for AppError {\n    fn fmt(&self, f: &mut Formatter) -> FmtResult {\n        write!(f, \"{}\", to_string_pretty(self).unwrap())\n    }\n}\n\n#[derive(Debug, Serialize, PartialEq)]\npub enum DictionaryErrorKind {\n    NotFound,\n    Timeout,\n    InvalidData,\n    WrongAnswer,\n    SerializationError,\n    IOError,\n}\n\nimpl Display for DictionaryError {\n    fn fmt(&self, f: &mut Formatter) -> FmtResult {\n        write!(f, \"{}\", to_string_pretty(self).unwrap())\n    }\n}\n\nimpl DictionaryError {\n    pub fn throw(msg: &str, error_type: DictionaryErrorKind) -> Self {\n        DictionaryError { \n            message: msg.to_lowercase(),\n            error_kind: error_type\n        }\n    }\n}\n\nimpl From<FromUtf8Error> for DictionaryError {\n    fn from(_error: FromUtf8Error) -> Self {\n        DictionaryError::throw(\"utf8.failed\", DictionaryErrorKind::SerializationError)\n    }\n}\n\nimpl From<ServiceError> for AppError {\n    fn from(error: ServiceError) -> Self {\n        let msg = format!(\"critical.error {}. Aborting the applicaiton...\", error.message);\n        AppError::throw(&msg)\n    }\n}\n\nimpl From<reqwest::Error> for DictionaryError {\n    fn from(error: reqwest::Error) -> Self {\n        let msg = format!(\n            \"Request failed. Status: {}, error: {}\",\n            error.status().unwrap(),\n            error.to_string()\n        );\n\n        DictionaryError::throw(&msg, DictionaryErrorKind::NotFound)\n    }\n}\n\nimpl From<std::io::Error> for ServiceError {\n    fn from(error: std::io::Error) -> Self {\n        let msg = format!(\"io error: {}\", error.to_string());\n        ServiceError{\n            message: msg,\n            error_type: ServiceErrorType::IOError,\n        }\n    }\n}\n\nimpl From<FromUtf8Error> for ServiceError {\n    fn from(error: FromUtf8Error) -> Self {\n        let msg = format!(\"io error: {}\", error.to_string());\n        ServiceError{\n            message: msg,\n            error_type: ServiceErrorType::SerializationError,\n        }\n    }\n}\n\nimpl From<reqwest::Error> for ServiceError {\n    fn from(error: reqwest::Error) -> Self {\n        let msg = format!(\n            \"Request failed. Status: {}, error: {}\",\n            error.status().unwrap(),\n            error.to_string()\n        );\n\n        ServiceError{\n            message: msg,\n            error_type: ServiceErrorType::ResourceNotFound,\n        }\n    }\n}\n\n\n\nimpl From<std::io::Error> for DictionaryError {\n    fn from(error: std::io::Error) -> Self {\n        let msg = format!(\"io error: {}\", error.to_string());\n        DictionaryError::throw(&msg, DictionaryErrorKind::IOError)\n    }\n}\n\nimpl From<serde_json::Error> for DictionaryError {\n    fn from(error: serde_json::Error) -> Self {\n        let msg = format!(\"json error: {}\", error.to_string());\n        DictionaryError::throw(&msg, DictionaryErrorKind::SerializationError)\n    }\n}\n"
        }
    ]
}