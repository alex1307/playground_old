{
    "sourceFile": "scraper/src/unit_tests.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1641796664462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641796675030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n #[cfg(test)]\n mod runit {\n+    use crate::to_url;\n \n+\n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n \n     #[test]\n"
                },
                {
                    "date": 1641796687201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use crate::to_url;\n+    use crate::{to_url, download_from_url};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796699521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use crate::{to_url, download_from_url};\n+    use crate::{to_url, download_from_url, mp3_element};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796709605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use crate::{to_url, download_from_url, mp3_element};\n+    use crate::{to_url, download_from_url, mp3_element, first_element};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796720758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use crate::{to_url, download_from_url, mp3_element, first_element};\n+    use crate::{to_url, download_from_url, mp3_element, first_element, description};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796740376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use crate::{to_url, download_from_url, mp3_element, first_element, description};\n+    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796747619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements};\n+    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::PAGE_NOT_FOUND};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796758562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::PAGE_NOT_FOUND};\n+    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND}};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796798810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n #[cfg(test)]\n mod runit {\n+    use common_libs::files::file_name;\n+\n     use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND}};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n"
                },
                {
                    "date": 1641796807480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #[cfg(test)]\n mod runit {\n     use common_libs::files::file_name;\n \n-    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND}};\n+    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND}, merge_definitions};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796826368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #[cfg(test)]\n mod runit {\n     use common_libs::files::file_name;\n \n-    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND}, merge_definitions};\n+    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND, HTML_EXT}, merge_definitions};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796834894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #[cfg(test)]\n mod runit {\n     use common_libs::files::file_name;\n \n-    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND, HTML_EXT}, merge_definitions};\n+    use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND, HTML_EXT}, merge_definitions, oxford_scraper::check_for_more};\n \n \n     const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n     const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n"
                },
                {
                    "date": 1641796850468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #[cfg(test)]\n mod runit {\n-    use common_libs::files::file_name;\n+    use common_libs::files::{file_name, read_file_content};\n \n     use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND, HTML_EXT}, merge_definitions, oxford_scraper::check_for_more};\n \n \n"
                },
                {
                    "date": 1641796998348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n #[cfg(test)]\n mod runit {\n     use common_libs::files::{file_name, read_file_content};\n+    use itertools::Itertools;\n \n     use crate::{to_url, download_from_url, mp3_element, first_element, description, elements, constants::{PAGE_NOT_FOUND, NOT_FOUND, HTML_EXT}, merge_definitions, oxford_scraper::check_for_more};\n \n \n"
                }
            ],
            "date": 1641796664462,
            "name": "Commit-0",
            "content": "#[cfg(test)]\nmod runit {\n\n    const CAMBRIDGE_URL: &str = \"https://dictionary.cambridge.org/dictionary/english/\";\n    const OXFORD_URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\n\n    #[test]\n    fn url_test() {\n        assert_eq!(\n            \"https://dictionary.cambridge.org/dictionary/english/dust-up\",\n            to_url(CAMBRIDGE_URL, \"dust up\")\n        );\n\n        assert_eq!(\n            \"https://www.oxfordlearnersdictionaries.com/definition/english/dust-up\",\n            to_url(OXFORD_URL, \"dust up\")\n        );\n    }\n\n    #[tokio::test]\n    async fn not_found_test() {\n        let words = vec![\"amisega\", \"tazi e niama\", \"гьон сурат\", \"villian\"];\n        for w in words {\n            let url = to_url(CAMBRIDGE_URL, w);\n            assert!(download_from_url(&url).await.is_err());\n            let url = to_url(OXFORD_URL, w);\n            assert!(download_from_url(&url).await.is_err());\n        }\n    }\n\n    #[tokio::test]\n    async fn scrape_words_success_test() {\n        let words = vec![\"dust up\", \"cling\", \"stark\", \"villain\", \"bail out\"];\n        for w in words {\n            let url = to_url(CAMBRIDGE_URL, w);\n            assert!(download_from_url(&url).await.is_ok());\n            let url = to_url(OXFORD_URL, w);\n            assert!(download_from_url(&url).await.is_ok());\n        }\n    }\n\n    #[tokio::test]\n    async fn mp3_url_test() {\n        let url = to_url(OXFORD_URL, \"bail out\");\n        let found = download_from_url(&url).await;\n        assert!(found.is_ok());\n        let html = found.unwrap();\n        let mp3 = mp3_element(\n            r#\"div[class=\"sound audio_play_button pron-uk icon-audio\"]\"#,\n            &html,\n        )\n        .unwrap();\n        println!(\"mp3 element: {}\", mp3);\n        assert!(!mp3.is_empty());\n\n        let url = to_url(CAMBRIDGE_URL, \"bail out\");\n        let found = download_from_url(&url).await;\n        assert!(found.is_ok());\n        let html = found.unwrap();\n        let mp3 = mp3_element(r#\"source[type=\"audio/mpeg\"]\"#, &html).unwrap();\n        println!(\"mp3 element: {}\", mp3);\n        assert!(!mp3.is_empty());\n    }\n\n    #[tokio::test]\n    async fn definition_test() {\n        let url = to_url(CAMBRIDGE_URL, \"bail out\");\n        let html = download_from_url(&url).await.unwrap();\n        let definition = first_element(r#\"div[class=\"def ddef_d db\"]\"#, &html, true);\n        assert!(definition.is_some());\n        let inner_txt = definition.unwrap();\n        println!(\"inner html: {}\", inner_txt);\n        println!(\"definition: {}\", description(inner_txt).unwrap());\n    }\n\n    #[tokio::test]\n    async fn cambridge_definitions_test() {\n        let url = to_url(CAMBRIDGE_URL, \"correct\");\n        let html = download_from_url(&url).await.unwrap();\n        let definitions = elements(r#\"div[class=\"def ddef_d db\"]\"#, &html, true);\n        assert!(!definitions.is_empty());\n        assert_eq!(9, definitions.len());\n        for d in definitions {\n            println!(\"-> {}\", description(d).unwrap());\n        }\n    }\n\n    #[test]\n    fn test_not_found() {\n        let lower = String::from(PAGE_NOT_FOUND).to_lowercase();\n        let mut found = false;\n        for i in 0..NOT_FOUND.len() {\n            if lower.contains(NOT_FOUND[i]) {\n                found = true;\n                break;\n            }\n        }\n\n        assert!(found);\n    }\n\n    #[tokio::test]\n    async fn test_collins_url() {\n        let cmd = format!(\"wget --user-agent=\\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\\\" https://www.collinsdictionary.com/dictionary/english/{} -O download/tmp/collins/{}.html\", \"correct\", \"correct\");\n        println!(\"cmd: {}\", cmd);\n        let command = std::process::Command::new(\"pwd\").output().unwrap();\n        println!(\"output: {:?}\", String::from_utf8(command.stdout).unwrap());\n\n        std::process::Command::new(\"mkdir\")\n            .arg(\"-p\")\n            .arg(\"download/tmp/collins\")\n            .status()\n            .expect(\"failed to execute mkdir\");\n        std::process::Command::new(\"mkdir\")\n            .arg(\"-p\")\n            .arg(\"download/tmp/cambridge\")\n            .status()\n            .expect(\"failed to execute mkdir\");\n        std::process::Command::new(\"mkdir\")\n            .arg(\"-p\")\n            .arg(\"download/tmp/oxford\")\n            .status()\n            .expect(\"failed to execute mkdir\");\n\n        std::process::Command::new(\"wget\")\n            .arg(\"--user-agent\")\n            .arg(\"'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15'\")\n            .arg(\"https://www.collinsdictionary.com/dictionary/english/rampage\")\n            .arg(\"-O\")\n            .arg(\"download/tmp/collins/rampage.html\")\n            .status()\n            .expect(\"failed to execute wget\");\n\n        std::process::Command::new(\"wget\")\n            .arg(\"--user-agent\")\n            .arg(\"'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15'\")\n            .arg(\"https://dictionary.cambridge.org/dictionary/english/correct\")\n            .arg(\"-O\")\n            .arg(\"download/tmp/cambridge/correct.html\")\n            .status()\n            .expect(\"failed to execute wget\");\n\n        std::process::Command::new(\"wget\")\n            .arg(\"--user-agent\")\n            .arg(\"'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15'\")\n            .arg(\"https://www.oxfordlearnersdictionaries.com/definition/english/correct\")\n            .arg(\"-O\")\n            .arg(\"download/tmp/oxford/correct.html\")\n            .status()\n            .expect(\"failed to execute wget\");\n    }\n\n    #[tokio::test]\n    async fn oxford_redirect_test() {\n        let word = \"unrelenting\";\n        let url = to_url(OXFORD_URL, word);\n\n        let html = download_from_url(&url).await.unwrap();\n\n        let elements = elements(r#\"link[rel=\"canonical\"]\"#, &html, false);\n        assert!(!elements.is_empty());\n        let txt = elements.get(0).unwrap();\n        println!(\"found: {:?}\", txt);\n        let arr = txt\n            .split_whitespace()\n            .filter(|s| s.starts_with(\"href\"))\n            .at_most_one()\n            .unwrap()\n            .unwrap();\n        println!(\"href: {:?}\", arr);\n        let url = arr\n            .split(\"\\\"\")\n            .filter(|s| s.starts_with(\"http\"))\n            .at_most_one()\n            .unwrap()\n            .unwrap();\n        println!(\"url: {:?}\", url);\n        assert!(url.ends_with(word))\n    }\n\n    #[tokio::test]\n    async fn oxford_first_element_test() {\n        let url = to_url(OXFORD_URL, \"unrelenting\");\n        let html = download_from_url(&url).await.unwrap();\n        let first = first_element(r#\"link[rel=\"canonical\"]\"#, &html, false);\n        assert!(first.is_some());\n        let txt = first.unwrap();\n        assert!(txt.contains(\n            r#\"\"https://www.oxfordlearnersdictionaries.com/definition/english/unrelenting\"\"#\n        ))\n    }\n\n    #[test]\n    fn download_sth() {\n        std::process::Command::new(\"wget\")\n        .arg(\"--user-agent\")\n        .arg(\"'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15'\")\n        .arg(\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_2\")\n        .arg(\"-O\")\n        .arg(\"download/tmp/oxford/correct_2.html\")\n        .status()\n        .expect(\"failed to execute wget\");\n    }\n\n    #[test]\n    fn to_next_word2_test() {\n        let word = \"correct\";\n        let file_name = file_name(\"download/tmp/oxford/\", word, HTML_EXT);\n        let html = match read_file_content(&file_name) {\n            Ok(cnt) => {\n                println!(\"size: {}\", cnt.len());\n                String::from_utf8(cnt).unwrap()\n            }\n            _ => String::new(),\n        };\n        assert_eq!(\n            Some(String::from(\n                r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_2\"#\n            )),\n            check_for_more(word, &html)\n        );\n    }\n\n    #[tokio::test]\n    async fn merge_correct2_test() {\n        let res = merge_definitions(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_1\"#,\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_2\"#,\n            r#\"\"#,\n        )\n        .await;\n        assert!(res.is_some());\n        println!(\"found: {:?}\", res.unwrap());\n    }\n\n    #[tokio::test]\n    async fn merge_correct3_test() {\n        let res = merge_definitions(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_1\"#,\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_2\"#,\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_3\"#,\n        )\n        .await;\n        assert!(res.is_some());\n        println!(\"found: {:?}\", res.unwrap());\n    }\n}\n"
        }
    ]
}