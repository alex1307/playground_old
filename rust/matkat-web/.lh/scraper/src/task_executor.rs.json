{
    "sourceFile": "scraper/src/task_executor.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 130,
            "patches": [
                {
                    "date": 1641886261112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641886410404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n+\n+static mut HANDLERS: Arc<Vec<CommandHandler>> = Vec::new();\n+\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641886455648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n+use std::sync::Arc;\n \n+\n static mut HANDLERS: Arc<Vec<CommandHandler>> = Vec::new();\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n"
                },
                {
                    "date": 1641886518253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-use std::sync::Arc;\n+use std::sync::{Arc, RwLock};\n \n \n-static mut HANDLERS: Arc<Vec<CommandHandler>> = Vec::new();\n+static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![])\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886571852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![])\n+static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886602029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n+static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::from(vec![]));\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886609880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::from(vec![]));\n+static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886640454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n+static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886775930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n+static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>>;\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886786503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static mut HANDLERS: RwLock<Arc<Vec<CommandHandler>>>;\n+static HANDLERS: RwLock<Arc<Vec<CommandHandler>>>;\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886798300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static HANDLERS: RwLock<Arc<Vec<CommandHandler>>>;\n+static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886818167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n \n-static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n+static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886865286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n use std::sync::{Arc, RwLock};\n \n+use itertools::Combinations;\n \n-static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n \n+static HANDLERS: Arc<Vec<Combinations<>> = Arc::new(vec![]);\n+\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641886878695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n use itertools::Combinations;\n \n \n-static HANDLERS: Arc<Vec<Combinations<>> = Arc::new(vec![]);\n+static HANDLERS: Arc<Vec<Combinations<>> = vec![];\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886910249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n use std::sync::{Arc, RwLock};\n \n use itertools::Combinations;\n \n+thread_local! {\n+    static HANDLERS: Arc<Vec<Combinations<>> = vec![];\n+}\n \n-static HANDLERS: Arc<Vec<Combinations<>> = vec![];\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641886927554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n use std::sync::{Arc, RwLock};\n \n-use itertools::Combinations;\n \n thread_local! {\n     static HANDLERS: Arc<Vec<Combinations<>> = vec![];\n }\n"
                },
                {
                    "date": 1641886977498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: Arc<Vec<Combinations<>> = vec![];\n+    static HANDLERS: RwLock<Arc<Combinations<>>> = vec![];\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641886988783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: RwLock<Arc<Combinations<>>> = vec![];\n+    static HANDLERS: RwLock<Arc<Combinations<>>> = RwLock::new(vec!0-);\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641886999725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: RwLock<Arc<Combinations<>>> = RwLock::new(vec!0-);\n+    static HANDLERS: RwLock<Arc<CommandHandler>>> = RwLock::new(vec![]);\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641887087351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: RwLock<Arc<CommandHandler>>> = RwLock::new(vec![]);\n+    static HANDLERS: RwLock<Arc<CommandHandler>> = RwLock::new(vec![]);\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641887107689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: RwLock<Arc<CommandHandler>> = RwLock::new(vec![]);\n+    static HANDLERS: RwLock<Arc<CommandHandler>> = RwLock::new(Vec::new());\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641887118177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: RwLock<Arc<CommandHandler>> = RwLock::new(Vec::new());\n+    static HANDLERS: RwLock<Arc<CommandHandler>> = RwLock::new(Vec::default());\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641887140095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: RwLock<Arc<CommandHandler>> = RwLock::new(Vec::default());\n+    static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641887161549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n thread_local! {\n-    static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(vec![]);\n+    static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n }\n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641887248228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,16 @@\n use std::sync::{Arc, RwLock};\n \n \n-thread_local! {\n+\n     static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n-}\n \n \n+\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n+}\n+\n+impl Default for CommandHandler {\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641887253645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n \n \n-    static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n+static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n \n \n \n pub struct CommandHandler {\n"
                },
                {
                    "date": 1641887261558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,4 @@\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n-impl Default for CommandHandler {\n-    \n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641889176913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n use std::sync::{Arc, RwLock};\n \n \n \n-static HANDLERS: RwLock<Arc<Vec<CommandHandler>>> = RwLock::new(Arc::new(vec![]));\n-\n-\n-\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n+impl Default for CommandHandler {\n+    \n+}\n"
                },
                {
                    "date": 1641889187131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,6 +7,8 @@\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n impl Default for CommandHandler {\n-    \n+    fn default() -> Self {\n+        Self { sender: Default::default(), receiver: Default::default() }\n+    }\n }\n"
                },
                {
                    "date": 1641889236421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,8 @@\n }\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n+        crossbeam::channel::unbounded<Vec<u8>();\n         Self { sender: Default::default(), receiver: Default::default() }\n     }\n }\n"
                },
                {
                    "date": 1641889258606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,11 @@\n }\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n-        crossbeam::channel::unbounded<Vec<u8>();\n-        Self { sender: Default::default(), receiver: Default::default() }\n+        let (tx, rx) = crossbeam::channel::bounded(0);\n+        CommandHandler {\n+            sender: tx,\n+            receiver: rx,\n+        }\n     }\n }\n"
                },
                {
                    "date": 1641889263773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n-        CommandHandler {\n+        Self {\n             sender: tx,\n             receiver: rx,\n         }\n     }\n"
                },
                {
                    "date": 1641889361371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n+static HANDER: Arc<CommandHandler> = Default::default();\n \n-\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n"
                },
                {
                    "date": 1641889441766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n use std::sync::{Arc, RwLock};\n \n-static HANDER: Arc<CommandHandler> = Default::default();\n+thread_local! {\n+    static CURRENT_HANDLER: Arc<CommandHandler> = CommandHandler::default();\n+}\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n"
                },
                {
                    "date": 1641889471633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n thread_local! {\n-    static CURRENT_HANDLER: Arc<CommandHandler> = CommandHandler::default();\n+    static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(CommandHandler::default());\n }\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n"
                },
                {
                    "date": 1641889478177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use std::sync::{Arc, RwLock};\n \n thread_local! {\n-    static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(CommandHandler::default());\n+    static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n \n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n"
                },
                {
                    "date": 1641892389202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,4 +17,6 @@\n             receiver: rx,\n         }\n     }\n }\n+\n+#[test]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641892398391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,5 +18,6 @@\n         }\n     }\n }\n \n-#[test]\n\\ No newline at end of file\n+#[tokio::test]\n+fn \n\\ No newline at end of file\n"
                },
                {
                    "date": 1641892436274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,14 @@\n use std::sync::{Arc, RwLock};\n \n+static mut counter:i32 = 1;\n+\n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n \n pub struct CommandHandler {\n+\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n"
                },
                {
                    "date": 1641892475994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,17 +6,19 @@\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n \n pub struct CommandHandler {\n-\n+    id: i32,\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n+        counter += 1;\n         Self {\n+            id: counter\n             sender: tx,\n             receiver: rx,\n         }\n     }\n"
                },
                {
                    "date": 1641892494900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n         counter += 1;\n         Self {\n-            id: counter\n+            id: counter.clone(),\n             sender: tx,\n             receiver: rx,\n         }\n     }\n"
                },
                {
                    "date": 1641892523402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use std::sync::{Arc, RwLock};\n \n-static mut counter:i32 = 1;\n+static mut counter: Arc<i32> = Arc::new<1>;\n \n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n@@ -14,9 +14,9 @@\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n-        counter += 1;\n+        ucounter += 1;\n         Self {\n             id: counter.clone(),\n             sender: tx,\n             receiver: rx,\n"
                },
                {
                    "date": 1641892533028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use std::sync::{Arc, RwLock};\n \n-static mut counter: Arc<i32> = Arc::new<1>;\n+static mut counter: Arc<i32> = Arc::new(1);\n \n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n"
                },
                {
                    "date": 1641892541345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n-        ucounter += 1;\n+        counter += 1;\n         Self {\n             id: counter.clone(),\n             sender: tx,\n             receiver: rx,\n"
                },
                {
                    "date": 1641892551759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n-        counter += 1;\n+        \n         Self {\n             id: counter.clone(),\n             sender: tx,\n             receiver: rx,\n"
                },
                {
                    "date": 1641892591663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use std::sync::{Arc, RwLock};\n \n-static mut counter: Arc<i32> = Arc::new(1);\n+pub static mut counter: Ai32 = 1;\n \n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n@@ -14,9 +14,11 @@\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n-        \n+        unsafe{\n+            counter\n+        }\n         Self {\n             id: counter.clone(),\n             sender: tx,\n             receiver: rx,\n"
                },
                {
                    "date": 1641892598464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n         unsafe{\n-            counter\n+            counter += 1;\n         }\n         Self {\n             id: counter.clone(),\n             sender: tx,\n"
                },
                {
                    "date": 1641892646421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,7 +24,4 @@\n             receiver: rx,\n         }\n     }\n }\n-\n-#[tokio::test]\n-fn \n\\ No newline at end of file\n"
                },
                {
                    "date": 1641892653381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n use std::sync::{Arc, RwLock};\n \n-pub static mut counter: Ai32 = 1;\n+pub static mut counter: i32 = 1;\n \n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n"
                },
                {
                    "date": 1641892659078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::sync::{Arc, RwLock};\n+use std::sync::{Arc};\n \n pub static mut counter: i32 = 1;\n \n thread_local! {\n"
                },
                {
                    "date": 1641892664467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::sync::{Arc};\n+use std::sync::Arc;\n \n pub static mut counter: i32 = 1;\n \n thread_local! {\n"
                },
                {
                    "date": 1641892679690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n \n pub struct CommandHandler {\n-    id: i32,\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n \n@@ -18,9 +17,8 @@\n         unsafe{\n             counter += 1;\n         }\n         Self {\n-            id: counter.clone(),\n             sender: tx,\n             receiver: rx,\n         }\n     }\n"
                },
                {
                    "date": 1641899856767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,4 +22,9 @@\n             receiver: rx,\n         }\n     }\n }\n+\n+#[tokio::test]\n+fn singleton_test() {\n+    \n+}\n"
                },
                {
                    "date": 1641899865141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,7 +24,7 @@\n     }\n }\n \n #[tokio::test]\n-fn singleton_test() {\n-    \n+async fn singleton_test() {\n+\n }\n"
                },
                {
                    "date": 1641899894501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,6 +25,6 @@\n }\n \n #[tokio::test]\n async fn singleton_test() {\n-\n+    \n }\n"
                },
                {
                    "date": 1641910972558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n         }\n     }\n }\n \n+\n #[tokio::test]\n async fn singleton_test() {\n-    \n+    assert_eq!(1, counter);\n }\n"
                },
                {
                    "date": 1641911017357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,6 +26,9 @@\n \n \n #[tokio::test]\n async fn singleton_test() {\n-    assert_eq!(1, counter);\n+    unsafe{\n+        assert_eq!(1, counter);\n+    }\n+    \n }\n"
                },
                {
                    "date": 1641911162228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,6 +29,8 @@\n async fn singleton_test() {\n     unsafe{\n         assert_eq!(1, counter);\n     }\n+\n+    tokio::\n     \n }\n"
                },
                {
                    "date": 1641911244072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    tokio::\n+    spawn(async {let _ = CURRENT_HANDLER};)\n     \n }\n"
                },
                {
                    "date": 1641911249835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    spawn(async {let _ = CURRENT_HANDLER};)\n+    spawn(async {let _ = CURRENT_HANDLER;};)\n     \n }\n"
                },
                {
                    "date": 1641911268924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    spawn(async {let _ = CURRENT_HANDLER;};)\n+    spawn(async {let _ = CURRENT_HANDLER;})\n     \n }\n"
                },
                {
                    "date": 1641911284742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    spawn(async {let _ = CURRENT_HANDLER;})\n+    tokio::spawn(async {let _ = CURRENT_HANDLER;})\n     \n }\n"
                },
                {
                    "date": 1641911298857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    tokio::spawn(async {let _ = CURRENT_HANDLER;})\n+    let _f = tokio::spawn(async {let _ = CURRENT_HANDLER;})\n     \n }\n"
                },
                {
                    "date": 1641911308846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    let _f = tokio::spawn(async {let _ = CURRENT_HANDLER;})\n+    let _f = tokio::spawn(async {let _ = CURRENT_HANDLER})\n     \n }\n"
                },
                {
                    "date": 1641911315512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    let _f = tokio::spawn(async {let _ = CURRENT_HANDLER})\n+    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER})\n     \n }\n"
                },
                {
                    "date": 1641911321862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER})\n+    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER});\n     \n }\n"
                },
                {
                    "date": 1641911335999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER});\n+    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;});\n     \n }\n"
                },
                {
                    "date": 1641911343553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,8 @@\n         assert_eq!(1, counter);\n     }\n \n     let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;});\n-    \n+    unsafe{\n+        assert_eq!(1, counter);\n+    }\n }\n"
                },
                {
                    "date": 1641911394950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n-    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;});\n+    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;}).await;\n     unsafe{\n         assert_eq!(1, counter);\n     }\n }\n"
                },
                {
                    "date": 1641911443142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n }\n \n \n #[tokio::test]\n-async fn singleton_test() {\n+async fn singleton_test1() {\n     unsafe{\n         assert_eq!(1, counter);\n     }\n \n@@ -35,4 +35,15 @@\n     unsafe{\n         assert_eq!(1, counter);\n     }\n }\n+\n+async fn singleton_test2() {\n+    unsafe{\n+        assert_eq!(1, counter);\n+    }\n+\n+    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;}).await;\n+    unsafe{\n+        assert_eq!(1, counter);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641911452397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n         assert_eq!(1, counter);\n     }\n }\n \n+#[tokio::test]\n async fn singleton_test2() {\n     unsafe{\n         assert_eq!(1, counter);\n     }\n"
                },
                {
                    "date": 1641911484510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n         }\n     }\n }\n \n-\n+#[cfg(test)]\n+mod collins_unit_tests{\n #[tokio::test]\n async fn singleton_test1() {\n     unsafe{\n         assert_eq!(1, counter);\n@@ -46,5 +47,5 @@\n     let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;}).await;\n     unsafe{\n         assert_eq!(1, counter);\n     }\n-}\n\\ No newline at end of file\n+}}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641917750300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,5 +47,6 @@\n     let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;}).await;\n     unsafe{\n         assert_eq!(1, counter);\n     }\n-}}\n\\ No newline at end of file\n+}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641917773444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,10 @@\n }\n \n #[cfg(test)]\n mod collins_unit_tests{\n+    use super::CURRENT_HANDLER;\n+\n #[tokio::test]\n async fn singleton_test1() {\n     unsafe{\n         assert_eq!(1, counter);\n"
                },
                {
                    "date": 1641917820672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,10 @@\n }\n \n #[cfg(test)]\n mod collins_unit_tests{\n+    use crate::task_executor::counter;\n+\n     use super::CURRENT_HANDLER;\n \n #[tokio::test]\n async fn singleton_test1() {\n"
                },
                {
                    "date": 1641918040519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,23 @@\n         }\n     }\n }\n \n+pub fn server_loop () {\n+    let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n+    loop {\n+        \n+        match rx.recv_timeout(Duration::from_secs(1)) {\n+                Ok(_buffer) => {\n+                    play_it = false;\n+                    break;\n+                }\n+                Err(_) => continue,\n+        }\n+        \n+    }\n+}\n+\n #[cfg(test)]\n mod collins_unit_tests{\n     use crate::task_executor::counter;\n \n"
                },
                {
                    "date": 1641918049983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n pub fn server_loop () {\n     let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n     loop {\n         \n-        match rx.recv_timeout(Duration::from_secs(1)) {\n+        match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(_buffer) => {\n                     play_it = false;\n                     break;\n                 }\n"
                },
                {
                    "date": 1641918055251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use std::sync::Arc;\n+use std::{sync::Arc, time::Duration};\n \n pub static mut counter: i32 = 1;\n \n thread_local! {\n"
                },
                {
                    "date": 1641918280179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n use std::{sync::Arc, time::Duration};\n \n+use log::info;\n+\n pub static mut counter: i32 = 1;\n \n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n@@ -23,16 +25,14 @@\n         }\n     }\n }\n \n-pub fn server_loop () {\n+pub fn server_loop (max: i32) {\n     let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n     loop {\n-        \n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(_buffer) => {\n-                    play_it = false;\n-                    break;\n+                    info!(\"Message: {}\", Vec:);\n                 }\n                 Err(_) => continue,\n         }\n         \n"
                },
                {
                    "date": 1641918314223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n pub fn server_loop (max: i32) {\n     let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(_buffer) => {\n-                    info!(\"Message: {}\", Vec:);\n+                Ok(buffer) => {\n+                    info!(\"Message: {}\", String::from_utf8_lossy(buffer));\n                 }\n                 Err(_) => continue,\n         }\n         \n"
                },
                {
                    "date": 1641918321490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n-                    info!(\"Message: {}\", String::from_utf8_lossy(buffer));\n+                    info!(\"Message: {}\", String::from_utf8_lossy(&buffer));\n                 }\n                 Err(_) => continue,\n         }\n         \n"
                },
                {
                    "date": 1641918372366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,19 @@\n }\n \n pub fn server_loop (max: i32) {\n     let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n+    let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n                     info!(\"Message: {}\", String::from_utf8_lossy(&buffer));\n+                    message_counter += 1;\n+                    if message_counter < max {\n+                        continue\n+                    } else {\n+                        break;\n+                    }\n                 }\n                 Err(_) => continue,\n         }\n         \n"
                },
                {
                    "date": 1641918393787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n-                    info!(\"Message: {}\", String::from_utf8_lossy(&buffer));\n+                    info!(\"Message number #{}: {}\", message_counter,String::from_utf8_lossy(&buffer));\n                     message_counter += 1;\n                     if message_counter < max {\n                         continue\n                     } else {\n"
                },
                {
                    "date": 1641918407431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n-                    info!(\"Message number #{}: {}\", message_counter,String::from_utf8_lossy(&buffer));\n                     message_counter += 1;\n+                    info!(\"Message number #{}: {}\", message_counter, String::from_utf8_lossy(&buffer));            \n                     if message_counter < max {\n                         continue\n                     } else {\n                         break;\n"
                },
                {
                    "date": 1641918448569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n                     info!(\"Message number #{}: {}\", message_counter, String::from_utf8_lossy(&buffer));            \n                     if message_counter < max {\n                         continue\n                     } else {\n+                        info!(\"Threshold maximum messages reached: {}\", max);            \n                         break;\n                     }\n                 }\n                 Err(_) => continue,\n"
                },
                {
                    "date": 1641918465112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,13 @@\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n                     message_counter += 1;\n-                    info!(\"Message number #{}: {}\", message_counter, String::from_utf8_lossy(&buffer));            \n+                    info!(\" => Message number #{}: {}\", message_counter, String::from_utf8_lossy(&buffer));            \n                     if message_counter < max {\n                         continue\n                     } else {\n-                        info!(\"Threshold maximum messages reached: {}\", max);            \n+                        info!(\"!!! Threshold maximum messages reached: {}\", max);            \n                         break;\n                     }\n                 }\n                 Err(_) => continue,\n"
                },
                {
                    "date": 1641918542787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,9 @@\n                         break;\n                     }\n                 }\n                 Err(_) => continue,\n-        }\n-        \n+        }   \n     }\n }\n \n #[cfg(test)]\n"
                },
                {
                    "date": 1641918676220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n+    let reciver = CURRENT_HANDLER.clone().with(|h| h.receiver);\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641918689860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.clone().with(|h| h.receiver);\n+    let reciver = CURRENT_HANDLER.with(|h| &h.receiver);\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641918701271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.with(|h| &h.receiver);\n+    let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641918708843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n+    let reciver = CURRENT_HANDLER.try_with(|h| h.receiver);\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641918722735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.try_with(|h| h.receiver);\n+    let reciver = CURRENT_HANDLER.try_with(|h| h.receiver).unwrap();\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641918729312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.try_with(|h| h.receiver).unwrap();\n+    let reciver = CURRENT_HANDLER.try_with(|h| h.receiver);\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641918739298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.try_with(|h| h.receiver);\n+    let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641919123130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.with(|h| h.receiver);\n+    let reciver = CURRENT_HANDLER.with(|f| f.clone().receiver );\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641976936532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.with(|f| f.clone().receiver );\n+    let reciver = CURRENT_HANDLER.with(|f| f.receiver );\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641977069007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n }\n-\n+#[derive(Debug, Clone)]\n pub struct CommandHandler {\n     sender: crossbeam::channel::Sender<Vec<u8>>,\n     receiver: crossbeam::channel::Receiver<Vec<u8>>,\n }\n"
                },
                {
                    "date": 1641977087894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     }\n }\n \n pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.with(|f| f.receiver );\n+    let reciver = CURRENT_HANDLER.with(|f| f.receiver.clone() );\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n                 Ok(buffer) => {\n"
                },
                {
                    "date": 1641977150400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,28 @@\n         }   \n     }\n }\n \n+pub fn client (max: i32) {\n+    let sender = CURRENT_HANDLER.with(|f| f.sender.clone() );\n+    let mut message_counter = 0;\n+    loop {\n+        match reciver.recv_timeout(Duration::from_secs(1)) {\n+                Ok(buffer) => {\n+                    message_counter += 1;\n+                    info!(\" => Message number #{}: {}\", message_counter, String::from_utf8_lossy(&buffer));            \n+                    if message_counter < max {\n+                        continue\n+                    } else {\n+                        info!(\"!!! Threshold maximum messages reached: {}\", max);            \n+                        break;\n+                    }\n+                }\n+                Err(_) => continue,\n+        }   \n+    }\n+}\n+\n #[cfg(test)]\n mod collins_unit_tests{\n     use crate::task_executor::counter;\n \n"
                },
                {
                    "date": 1641977192697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,24 +47,9 @@\n }\n \n pub fn client (max: i32) {\n     let sender = CURRENT_HANDLER.with(|f| f.sender.clone() );\n-    let mut message_counter = 0;\n-    loop {\n-        match reciver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(buffer) => {\n-                    message_counter += 1;\n-                    info!(\" => Message number #{}: {}\", message_counter, String::from_utf8_lossy(&buffer));            \n-                    if message_counter < max {\n-                        continue\n-                    } else {\n-                        info!(\"!!! Threshold maximum messages reached: {}\", max);            \n-                        break;\n-                    }\n-                }\n-                Err(_) => continue,\n-        }   \n-    }\n+    tx.send(vec![99]).unwrap();\n }\n \n #[cfg(test)]\n mod collins_unit_tests{\n"
                },
                {
                    "date": 1641977199562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n }\n \n pub fn client (max: i32) {\n     let sender = CURRENT_HANDLER.with(|f| f.sender.clone() );\n-    tx.send(vec![99]).unwrap();\n+    sender.send(vec![99]).unwrap();\n }\n \n #[cfg(test)]\n mod collins_unit_tests{\n"
                },
                {
                    "date": 1641977299575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n use std::{sync::Arc, time::Duration};\n \n use log::info;\n+use serde::de::value::StrDeserializer;\n \n pub static mut counter: i32 = 1;\n \n thread_local! {\n@@ -45,10 +46,11 @@\n         }   \n     }\n }\n \n-pub fn client (max: i32) {\n+pub fn client (id: i32) {\n     let sender = CURRENT_HANDLER.with(|f| f.sender.clone() );\n+    let msg = format!(\"Hello. I am #{}\", id);\n     sender.send(vec![99]).unwrap();\n }\n \n #[cfg(test)]\n"
                },
                {
                    "date": 1641977345688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n pub fn client (id: i32) {\n     let sender = CURRENT_HANDLER.with(|f| f.sender.clone() );\n     let msg = format!(\"Hello. I am #{}\", id);\n-    sender.send(vec![99]).unwrap();\n+    sender.send(msg.as_bytes()).unwrap();\n }\n \n #[cfg(test)]\n mod collins_unit_tests{\n"
                },
                {
                    "date": 1641977366871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n pub fn client (id: i32) {\n     let sender = CURRENT_HANDLER.with(|f| f.sender.clone() );\n     let msg = format!(\"Hello. I am #{}\", id);\n-    sender.send(msg.as_bytes()).unwrap();\n+    sender.send(msg.as_bytes().to_vec()).unwrap();\n }\n \n #[cfg(test)]\n mod collins_unit_tests{\n"
                },
                {
                    "date": 1641977417357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n impl Default for CommandHandler {\n     fn default() -> Self {\n         let (tx, rx) = crossbeam::channel::bounded(0);\n-        unsafe{\n+        unsafe {\n             counter += 1;\n         }\n         Self {\n             sender: tx,\n@@ -26,60 +26,70 @@\n         }\n     }\n }\n \n-pub fn server_loop (max: i32) {\n-    let reciver = CURRENT_HANDLER.with(|f| f.receiver.clone() );\n+pub fn server_loop(max: i32) {\n+    let reciver = CURRENT_HANDLER.with(|f| f.receiver.clone());\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n-                Ok(buffer) => {\n-                    message_counter += 1;\n-                    info!(\" => Message number #{}: {}\", message_counter, String::from_utf8_lossy(&buffer));            \n-                    if message_counter < max {\n-                        continue\n-                    } else {\n-                        info!(\"!!! Threshold maximum messages reached: {}\", max);            \n-                        break;\n-                    }\n+            Ok(buffer) => {\n+                message_counter += 1;\n+                info!(\n+                    \" => Message number #{}: {}\",\n+                    message_counter,\n+                    String::from_utf8_lossy(&buffer)\n+                );\n+                if message_counter < max {\n+                    continue;\n+                } else {\n+                    info!(\"!!! Threshold maximum messages reached: {}\", max);\n+                    break;\n                 }\n-                Err(_) => continue,\n-        }   \n+            }\n+            Err(_) => continue,\n+        }\n     }\n }\n \n-pub fn client (id: i32) {\n-    let sender = CURRENT_HANDLER.with(|f| f.sender.clone() );\n+pub fn client(id: i32) {\n+    let sender = CURRENT_HANDLER.with(|f| f.sender.clone());\n     let msg = format!(\"Hello. I am #{}\", id);\n     sender.send(msg.as_bytes().to_vec()).unwrap();\n }\n \n #[cfg(test)]\n-mod collins_unit_tests{\n+mod collins_unit_tests {\n     use crate::task_executor::counter;\n \n     use super::CURRENT_HANDLER;\n \n-#[tokio::test]\n-async fn singleton_test1() {\n-    unsafe{\n-        assert_eq!(1, counter);\n\\ No newline at end of file\n-    }\n+    #[tokio::test]\n+    async fn singleton_test1() {\n+        unsafe {\n+            assert_eq!(1, counter);\n+        }\n \n-    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;}).await;\n-    unsafe{\n-        assert_eq!(1, counter);\n+        let _f = tokio::spawn(async move {\n+            let _ = CURRENT_HANDLER;\n+        })\n+        .await;\n+        unsafe {\n+            assert_eq!(1, counter);\n+        }\n     }\n-}\n \n-#[tokio::test]\n-async fn singleton_test2() {\n-    unsafe{\n-        assert_eq!(1, counter);\n-    }\n+    #[tokio::test]\n+    async fn singleton_test2() {\n+        unsafe {\n+            assert_eq!(1, counter);\n+        }\n \n-    let _f = tokio::spawn(async move {let _ = CURRENT_HANDLER;}).await;\n-    unsafe{\n-        assert_eq!(1, counter);\n+        let _f = tokio::spawn(async move {\n+            let _ = CURRENT_HANDLER;\n+        })\n+        .await;\n+        unsafe {\n+            assert_eq!(1, counter);\n+        }\n     }\n }\n-}\n"
                },
                {
                    "date": 1641977683310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n #[cfg(test)]\n mod collins_unit_tests {\n     use crate::task_executor::counter;\n \n-    use super::CURRENT_HANDLER;\n+    use super::{CURRENT_HANDLER, server_loop};\n \n     #[tokio::test]\n     async fn singleton_test1() {\n         unsafe {\n@@ -83,13 +83,7 @@\n         unsafe {\n             assert_eq!(1, counter);\n         }\n \n-        let _f = tokio::spawn(async move {\n-            let _ = CURRENT_HANDLER;\n-        })\n-        .await;\n-        unsafe {\n-            assert_eq!(1, counter);\n-        }\n+        let server = thread::spawn(||server_loop(3));\n     }\n }\n"
                },
                {
                    "date": 1641977693461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,6 +84,8 @@\n             assert_eq!(1, counter);\n         }\n \n         let server = thread::spawn(||server_loop(3));\n+        let server = thread::spawn(||server_loop(3));\n+        let server = thread::spawn(||server_loop(3));\n     }\n }\n"
                },
                {
                    "date": 1641977724114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,10 @@\n }\n \n #[cfg(test)]\n mod collins_unit_tests {\n+    use std::thread;\n+\n     use crate::task_executor::counter;\n \n     use super::{CURRENT_HANDLER, server_loop};\n \n@@ -84,8 +86,9 @@\n             assert_eq!(1, counter);\n         }\n \n         let server = thread::spawn(||server_loop(3));\n-        let server = thread::spawn(||server_loop(3));\n-        let server = thread::spawn(||server_loop(3));\n+        let c1 = thread::spawn(||server_loop(3));\n+        let c2 = thread::spawn(||server_loop(3));\n+        let c3 = thread::spawn(||server_loop(3));\n     }\n }\n"
                },
                {
                    "date": 1641977774109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     use std::thread;\n \n     use crate::task_executor::counter;\n \n-    use super::{CURRENT_HANDLER, server_loop};\n+    use super::{CURRENT_HANDLER, server_loop, client};\n \n     #[tokio::test]\n     async fn singleton_test1() {\n         unsafe {\n@@ -86,9 +86,11 @@\n             assert_eq!(1, counter);\n         }\n \n         let server = thread::spawn(||server_loop(3));\n-        let c1 = thread::spawn(||server_loop(3));\n-        let c2 = thread::spawn(||server_loop(3));\n-        let c3 = thread::spawn(||server_loop(3));\n+        let c1 = thread::spawn(||client(1));\n+        let c2 = thread::spawn(||client(2));\n+        let c3 = thread::spawn(||client(3));\n+        let c4 = thread::spawn(||client(4));\n+        \n     }\n }\n"
                },
                {
                    "date": 1641977859435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,7 +90,12 @@\n         let c1 = thread::spawn(||client(1));\n         let c2 = thread::spawn(||client(2));\n         let c3 = thread::spawn(||client(3));\n         let c4 = thread::spawn(||client(4));\n-        \n+\n+\n+        let f = vec![server, c1, c2, c3, c4];\n+\n+        futures::future::join_all()\n+\n     }\n }\n"
                },
                {
                    "date": 1641977869769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,8 @@\n \n \n         let f = vec![server, c1, c2, c3, c4];\n \n-        futures::future::join_all()\n+        futures::future::join_all(f);\n \n     }\n }\n"
                },
                {
                    "date": 1641977937635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,8 @@\n \n \n         let f = vec![server, c1, c2, c3, c4];\n \n-        futures::future::join_all(f);\n+        join_all(f);\n \n     }\n }\n"
                },
                {
                    "date": 1641977963445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,8 @@\n \n \n         let f = vec![server, c1, c2, c3, c4];\n \n-        join_all(f);\n+        futures::future::join_all(f);\n \n     }\n }\n"
                },
                {
                    "date": 1641977975409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,8 @@\n \n \n         let f = vec![server, c1, c2, c3, c4];\n \n-        futures::future::join_all(f);\n+        futures::future::join_all(f).unwrap();\n \n     }\n }\n"
                },
                {
                    "date": 1641978022104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         }\n     }\n }\n \n-pub fn client(id: i32) {\n+pub async fn client(id: i32) {\n     let sender = CURRENT_HANDLER.with(|f| f.sender.clone());\n     let msg = format!(\"Hello. I am #{}\", id);\n     sender.send(msg.as_bytes().to_vec()).unwrap();\n }\n"
                },
                {
                    "date": 1641978029397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         }\n     }\n }\n \n-pub fn server_loop(max: i32) {\n+pub async fn server_loop(max: i32) {\n     let reciver = CURRENT_HANDLER.with(|f| f.receiver.clone());\n     let mut message_counter = 0;\n     loop {\n         match reciver.recv_timeout(Duration::from_secs(1)) {\n"
                },
                {
                    "date": 1641978133309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,10 @@\n         let c3 = thread::spawn(||client(3));\n         let c4 = thread::spawn(||client(4));\n \n \n-        let f = vec![server, c1, c2, c3, c4];\n-\n+        let f = vec![ c1, c2, c3, c4];\n+        \n         futures::future::join_all(f).unwrap();\n \n     }\n }\n"
                },
                {
                    "date": 1641978142100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         let c3 = thread::spawn(||client(3));\n         let c4 = thread::spawn(||client(4));\n \n \n-        let f = vec![ c1, c2, c3, c4];\n+        let f = vec![c1, c2, c3, c4];\n         \n         futures::future::join_all(f).unwrap();\n \n     }\n"
                },
                {
                    "date": 1641978175217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,8 @@\n \n \n         let f = vec![c1, c2, c3, c4];\n         \n-        futures::future::join_all(f).unwrap();\n+        let _ = futures::future::join_all(f).unwrap();\n \n     }\n }\n"
                },
                {
                    "date": 1641978232021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,17 +85,17 @@\n         unsafe {\n             assert_eq!(1, counter);\n         }\n \n-        let server = thread::spawn(||server_loop(3));\n-        let c1 = thread::spawn(||client(1));\n-        let c2 = thread::spawn(||client(2));\n-        let c3 = thread::spawn(||client(3));\n-        let c4 = thread::spawn(||client(4));\n+        let server = server_loop(3);\n+        let c1 = client(1);\n+        let c2 = ||client(2);\n+        let c3 = client(3);\n+        let c4 = client(4);\n \n \n         let f = vec![c1, c2, c3, c4];\n         \n-        let _ = futures::future::join_all(f).unwrap();\n+        let _ = futures::future::join_all(f);\n \n     }\n }\n"
                },
                {
                    "date": 1641978238194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         }\n \n         let server = server_loop(3);\n         let c1 = client(1);\n-        let c2 = ||client(2);\n+        let c2 = client(2);\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n"
                },
                {
                    "date": 1641978246244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n-        let f = vec![c1, c2, c3, c4];\n+        let f = vec![server, c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n \n     }\n"
                },
                {
                    "date": 1641978255616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,7 +95,10 @@\n \n         let f = vec![server, c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n+        unsafe {\n+            assert_eq!(1, counter);\n+        }\n \n     }\n }\n"
                },
                {
                    "date": 1641978263575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n \n         let f = vec![server, c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n+        \n         unsafe {\n             assert_eq!(1, counter);\n         }\n \n"
                },
                {
                    "date": 1641978293688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,12 +92,12 @@\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n-        let f = vec![server, c1, c2, c3, c4];\n+        let f = vec![c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n-        \n+\n         unsafe {\n             assert_eq!(1, counter);\n         }\n \n"
                },
                {
                    "date": 1641978352507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,15 +85,16 @@\n         unsafe {\n             assert_eq!(1, counter);\n         }\n \n-        let server = server_loop(3);\n+        let server = thread::spawn(||server_loop(3));\n         let c1 = client(1);\n         let c2 = client(2);\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n+\n         let f = vec![c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n \n"
                },
                {
                    "date": 1641978364048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n-\n+        server.join().unwrap();\n         let f = vec![c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n \n"
                },
                {
                    "date": 1641978372460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,10 @@\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n-        server.join().unwrap();\n+        server.join();\n+\n         let f = vec![c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n \n"
                },
                {
                    "date": 1641978416064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n-        server.join();\n+        let res = server.join().unwrap();\n \n         let f = vec![c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n"
                },
                {
                    "date": 1641978421269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         let c3 = client(3);\n         let c4 = client(4);\n \n \n-        let res = server.join().unwrap();\n+        let _res = server.join().unwrap();\n \n         let f = vec![c1, c2, c3, c4];\n         \n         let _ = futures::future::join_all(f);\n"
                },
                {
                    "date": 1641984486534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use std::{sync::Arc, time::Duration};\n \n use log::info;\n-use serde::de::value::StrDeserializer;\n \n+\n pub static mut counter: i32 = 1;\n \n thread_local! {\n     static CURRENT_HANDLER: Arc<CommandHandler> = Arc::new(Default::default());\n"
                }
            ],
            "date": 1641886261112,
            "name": "Commit-0",
            "content": "pub struct CommandHandler {\n    sender: crossbeam::channel::Sender<Vec<u8>>,\n    receiver: crossbeam::channel::Receiver<Vec<u8>>,\n}"
        }
    ]
}