{
    "sourceFile": "scraper/src/oxford_scraper.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1641795835789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641795867832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n use log::error;\n \n \n+use crate::first_element;\n+\n use super::{\n     description, download_from_url, elements, merge_definitions, mp3_element, mp3_element_to_url,\n     to_url,\n };\n"
                },
                {
                    "date": 1641795882313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n use log::error;\n \n \n-use crate::first_element;\n+use crate::{first_element, model::DictionaryEntry};\n \n use super::{\n     description, download_from_url, elements, merge_definitions, mp3_element, mp3_element_to_url,\n     to_url,\n"
                },
                {
                    "date": 1641795903408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+use common_libs::utils::{trim_tabs, replace_tabs};\n use log::error;\n \n \n use crate::{first_element, model::DictionaryEntry};\n"
                },
                {
                    "date": 1641795911171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n use common_libs::utils::{trim_tabs, replace_tabs};\n use log::error;\n \n \n-use crate::{first_element, model::DictionaryEntry};\n+use crate::{first_element, model::{DictionaryEntry, Dictionary}};\n \n use super::{\n     description, download_from_url, elements, merge_definitions, mp3_element, mp3_element_to_url,\n     to_url,\n"
                },
                {
                    "date": 1641795922211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use common_libs::utils::{trim_tabs, replace_tabs};\n+use common_libs::{utils::{trim_tabs, replace_tabs}, error::ServiceExuctionResult};\n use log::error;\n \n \n use crate::{first_element, model::{DictionaryEntry, Dictionary}};\n"
                },
                {
                    "date": 1641795938776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use common_libs::{utils::{trim_tabs, replace_tabs}, error::ServiceExuctionResult};\n+use common_libs::{utils::{trim_tabs, replace_tabs}, error::{ServiceExuctionResult, ServiceError}};\n use log::error;\n \n \n use crate::{first_element, model::{DictionaryEntry, Dictionary}};\n"
                },
                {
                    "date": 1641796000732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-use common_libs::{utils::{trim_tabs, replace_tabs}, error::{ServiceExuctionResult, ServiceError}};\n+use common_libs::{utils::{trim_tabs, replace_tabs}, error::{ServiceExuctionResult, ServiceError, ServiceErrorType}};\n use log::error;\n \n \n use crate::{first_element, model::{DictionaryEntry, Dictionary}};\n@@ -144,9 +144,9 @@\n }\n \n #[cfg(test)]\n mod oxford_unit_tests {\n-    use crate::{scraper::{oxford_scraper::{self, check_for_more}, download_from_url, merge_definitions}, files::{read_file_content, file_name}, HTML_EXT};\n+    use crate::{scraper::{oxford_scraper::{self, check_for_more}, download_from_url, merge_definitions}, files::{read_file_content, file_name}, HTML_EXT, oxford_scraper::check_for_more};\n \n     #[tokio::test]\n     async fn oxford_scraper_test() {\n         let res = oxford_scraper::scrape(r#\"correct\"#).await;\n"
                },
                {
                    "date": 1641796058106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,10 +144,9 @@\n }\n \n #[cfg(test)]\n mod oxford_unit_tests {\n-    use crate::{scraper::{oxford_scraper::{self, check_for_more}, download_from_url, merge_definitions}, files::{read_file_content, file_name}, HTML_EXT, oxford_scraper::check_for_more};\n-\n+    \n     #[tokio::test]\n     async fn oxford_scraper_test() {\n         let res = oxford_scraper::scrape(r#\"correct\"#).await;\n         assert!(res.is_some());\n"
                },
                {
                    "date": 1641796063615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,10 @@\n }\n \n #[cfg(test)]\n mod oxford_unit_tests {\n+    use crate::oxford_scraper;\n+\n     \n     #[tokio::test]\n     async fn oxford_scraper_test() {\n         let res = oxford_scraper::scrape(r#\"correct\"#).await;\n"
                },
                {
                    "date": 1641796081544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,10 @@\n }\n \n #[cfg(test)]\n mod oxford_unit_tests {\n+    use common_libs::files::file_name;\n+\n     use crate::oxford_scraper;\n \n     \n     #[tokio::test]\n"
                },
                {
                    "date": 1641796095292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n #[cfg(test)]\n mod oxford_unit_tests {\n     use common_libs::files::file_name;\n \n-    use crate::oxford_scraper;\n+    use crate::{oxford_scraper, merge_definitions};\n \n     \n     #[tokio::test]\n     async fn oxford_scraper_test() {\n"
                },
                {
                    "date": 1641796122029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n #[cfg(test)]\n mod oxford_unit_tests {\n     use common_libs::files::file_name;\n \n-    use crate::{oxford_scraper, merge_definitions};\n+    use crate::{oxford_scraper, merge_definitions, constants::HTML_EXT};\n \n     \n     #[tokio::test]\n     async fn oxford_scraper_test() {\n"
                },
                {
                    "date": 1641796128049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n }\n \n #[cfg(test)]\n mod oxford_unit_tests {\n-    use common_libs::files::file_name;\n+    use common_libs::files::{file_name, read_file_content};\n \n     use crate::{oxford_scraper, merge_definitions, constants::HTML_EXT};\n \n     \n"
                },
                {
                    "date": 1641796153622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n #[cfg(test)]\n mod oxford_unit_tests {\n     use common_libs::files::{file_name, read_file_content};\n \n-    use crate::{oxford_scraper, merge_definitions, constants::HTML_EXT};\n+    use crate::{oxford_scraper::{self, check_for_more}, merge_definitions, constants::HTML_EXT};\n \n     \n     #[tokio::test]\n     async fn oxford_scraper_test() {\n"
                },
                {
                    "date": 1641796160582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n #[cfg(test)]\n mod oxford_unit_tests {\n     use common_libs::files::{file_name, read_file_content};\n \n-    use crate::{oxford_scraper::{self, check_for_more}, merge_definitions, constants::HTML_EXT};\n+    use crate::{oxford_scraper::{self, check_for_more}, merge_definitions, constants::HTML_EXT, download_from_url};\n \n     \n     #[tokio::test]\n     async fn oxford_scraper_test() {\n"
                }
            ],
            "date": 1641795835789,
            "name": "Commit-0",
            "content": "use log::error;\n\n\nuse super::{\n    description, download_from_url, elements, merge_definitions, mp3_element, mp3_element_to_url,\n    to_url,\n};\n\nconst URL: &str = r#\"https://www.oxfordlearnersdictionaries.com/definition/english/\"#;\npub const MP3_QUERY: &str = r#\"div[class=\"sound audio_play_button pron-uk icon-audio\"]\"#;\npub const MP3_START_WITH: &str = r#\"https://\"#;\npub const DEFINITION_QUERY: &str = r#\"div[class=\"entry\"] span[class=\"def\"]\"#;\n\nfn mp3_url(html: &str) -> Option<String> {\n    let element = mp3_element(MP3_QUERY, &html);\n\n    if element.is_none() {\n        return None;\n    }\n\n    mp3_element_to_url(&element.unwrap(), MP3_START_WITH)\n}\n\nfn to_definitions(html: &str) -> Vec<String> {\n    let definitions = elements(DEFINITION_QUERY, &html, true);\n    definitions\n        .into_iter()\n        .map(|e| description(e))\n        .filter(Option::is_some)\n        .map(Option::unwrap)\n        .collect()\n}\n\npub fn check_for_more(word: &str, html: &str) -> Option<String> {\n    let first = first_element(r#\"link[rel=\"canonical\"]\"#, &html, false);\n\n    if first.is_none() {\n        return None;\n    }\n\n    let base_url = to_url(URL, word);\n\n    let canonical = first.unwrap();\n    let mut expected_url = String::from(r#\"\"\"#);\n    expected_url.push_str(&base_url);\n    expected_url.push_str(r#\"\"\"#);\n\n    if canonical.contains(&expected_url) {\n        return None;\n    }\n\n    for i in 1..4 {\n        let mut search_url = String::from(&base_url);\n        let id = vec![r#\"_\"#, &i.to_string()].join(\"\");\n        search_url.push_str(&id);\n\n        if canonical.contains(&search_url) {\n            let next_id = vec![r#\"_\"#, &(i + 1).to_string()].join(\"\");\n            search_url = search_url.replace(&id, &next_id);\n            return Some(search_url);\n        }\n    }\n    return None;\n}\n\npub fn check_for_redirects(word: &str, html: &str) -> bool {\n    let first = first_element(r#\"link[rel=\"canonical\"]\"#, &html, false);\n\n    if first.is_none() {\n        return false;\n    }\n\n    let base_url = to_url(URL, word);\n    let expected_url = vec![r#\"\"\"#, &base_url, r#\"\"\"#].join(\"\");\n    let canonical = first.unwrap();\n    return !canonical.contains(&expected_url);\n}\n\npub async fn scrape(word: &str) -> Option<DictionaryEntry> {\n    if word.trim().is_empty() || word.trim().len() < 3 {\n        error!(\"word.min.lenght.is.3\");\n        return None;\n    }\n    let mut trimmed = trim_tabs(&mut String::from(word));\n    trimmed = replace_tabs(&mut trimmed, \"-\");\n    let url = to_url(URL, &trimmed);\n    let html = match download_from_url(&url).await {\n        Ok(content) => content,\n        Err(_) => return None,\n    };\n\n    if check_for_redirects(word, &html) {\n        merge_definitions(\n            vec![URL, &trimmed, r#\"_1\"#].join(\"\").as_str(),\n            vec![URL, &trimmed, r#\"_2\"#].join(\"\").as_str(),\n            vec![URL, &trimmed, r#\"_3\"#].join(\"\").as_str(),\n        )\n        .await\n    } else {\n        let mp3_link = mp3_url(&html);\n        let definitions = to_definitions(&html);\n\n        if mp3_link.is_none() || definitions.is_empty() {\n            return None;\n        }\n\n        Some(DictionaryEntry {\n            source: Dictionary::Oxford,\n            word: word.clone().to_lowercase(),\n            url: to_url(URL, word),\n            mp3_link,\n            definitions,\n            file: None,\n        })\n    }\n}\n\npub async fn download(url: &str) -> ServiceExuctionResult<DictionaryEntry> {\n    let html = (download_from_url(url).await)?;\n\n    let mp3_link = mp3_url(&html);\n    let definitions = to_definitions(&html);\n\n    if mp3_link.is_none() || definitions.is_empty() {\n        return Err(ServiceError {\n            message: \"definitions or/and mp3 files are not found\".to_string(),\n            error_type: ServiceErrorType::ResourceNotFound,\n        });\n    }\n\n    let found = first_element(r#\"div[class=\"webtop\"] h1[class=\"headword\"]\"#, &html, true);\n    let word = found.unwrap();\n    Ok(DictionaryEntry {\n        source: Dictionary::Oxford,\n        word: word.clone(),\n        url: to_url(URL, &word),\n        mp3_link,\n        definitions,\n        file: None,\n    })\n}\n\n#[cfg(test)]\nmod oxford_unit_tests {\n    use crate::{scraper::{oxford_scraper::{self, check_for_more}, download_from_url, merge_definitions}, files::{read_file_content, file_name}, HTML_EXT};\n\n    #[tokio::test]\n    async fn oxford_scraper_test() {\n        let res = oxford_scraper::scrape(r#\"correct\"#).await;\n        assert!(res.is_some());\n        println!(\n            \"found: {}\",\n            serde_json::to_string_pretty(&res.unwrap()).unwrap()\n        );\n    }\n\n    #[tokio::test]\n    async fn scrape_wind_up_test() {\n        let res = merge_definitions(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/wind-up_1\"#,\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/wind-up_2\"#,\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/wind-up_3\"#,\n        )\n        .await;\n        assert!(res.is_some());\n        println!(\"found: {:?}\", res.clone().unwrap());\n\n        let scrape = oxford_scraper::scrape(\"wind-up\").await;\n        assert!(scrape.is_some());\n        println!(\"found: {:?}\", scrape.clone().unwrap());\n\n        assert_eq!(\n            res.unwrap().definitions.len(),\n            scrape.unwrap().definitions.len()\n        );\n    }\n\n    #[tokio::test]\n    async fn to_next_word3_test() {\n        let word = \"correct_2\";\n        let file_name = file_name(\"download/tmp/oxford/\", word, HTML_EXT);\n        let html = match read_file_content(&file_name) {\n            Ok(cnt) => {\n                println!(\"size: {}\", cnt.len());\n                String::from_utf8(cnt).unwrap()\n            }\n            _ => String::new(),\n        };\n        assert_eq!(\n            Some(String::from(\n                r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_3\"#\n            )),\n            check_for_more(\"correct\", &html)\n        );\n\n        assert!(\n            download_from_url(\n                r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_3\"#\n            )\n            .await.is_err()\n        );\n\n        assert!(download_from_url(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_2\"#\n        )\n        .await\n        .is_ok());\n        assert!(download_from_url(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_1\"#\n        )\n        .await\n        .is_ok());\n        assert!(download_from_url(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct\"#\n        )\n        .await\n        .is_ok());\n\n        let correct = oxford_scraper::scrape(r#\"correct\"#).await;\n        assert!(correct.is_some());\n        println!(\"found: {:?}\", correct.unwrap());\n\n        let correct = oxford_scraper::download(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_1\"#,\n        )\n        .await;\n        assert!(correct.is_ok());\n        println!(\"found: {:?}\", correct.unwrap());\n\n        let correct = oxford_scraper::download(\n            r#\"https://www.oxfordlearnersdictionaries.com/definition/english/correct_2\"#,\n        )\n        .await;\n        assert!(correct.is_ok());\n        println!(\"found: {:?}\", correct.unwrap());\n    }\n}\n"
        }
    ]
}