// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: artillery.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtilleryServiceClient is the client API for ArtilleryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtilleryServiceClient interface {
	GetSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MissleSystem, error)
	Filter(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LauncherList, error)
	AddLauncher(ctx context.Context, in *LauncherRequest, opts ...grpc.CallOption) (*MissleSystem, error)
	LoadLauncher(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LauncherList, error)
	Execute(ctx context.Context, in *Action, opts ...grpc.CallOption) (ArtilleryService_ExecuteClient, error)
}

type artilleryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtilleryServiceClient(cc grpc.ClientConnInterface) ArtilleryServiceClient {
	return &artilleryServiceClient{cc}
}

func (c *artilleryServiceClient) GetSystem(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MissleSystem, error) {
	out := new(MissleSystem)
	err := c.cc.Invoke(ctx, "/api.ArtilleryService/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artilleryServiceClient) Filter(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LauncherList, error) {
	out := new(LauncherList)
	err := c.cc.Invoke(ctx, "/api.ArtilleryService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artilleryServiceClient) AddLauncher(ctx context.Context, in *LauncherRequest, opts ...grpc.CallOption) (*MissleSystem, error) {
	out := new(MissleSystem)
	err := c.cc.Invoke(ctx, "/api.ArtilleryService/AddLauncher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artilleryServiceClient) LoadLauncher(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LauncherList, error) {
	out := new(LauncherList)
	err := c.cc.Invoke(ctx, "/api.ArtilleryService/LoadLauncher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artilleryServiceClient) Execute(ctx context.Context, in *Action, opts ...grpc.CallOption) (ArtilleryService_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtilleryService_ServiceDesc.Streams[0], "/api.ArtilleryService/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &artilleryServiceExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArtilleryService_ExecuteClient interface {
	Recv() (*Projectile, error)
	grpc.ClientStream
}

type artilleryServiceExecuteClient struct {
	grpc.ClientStream
}

func (x *artilleryServiceExecuteClient) Recv() (*Projectile, error) {
	m := new(Projectile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtilleryServiceServer is the server API for ArtilleryService service.
// All implementations must embed UnimplementedArtilleryServiceServer
// for forward compatibility
type ArtilleryServiceServer interface {
	GetSystem(context.Context, *Empty) (*MissleSystem, error)
	Filter(context.Context, *Request) (*LauncherList, error)
	AddLauncher(context.Context, *LauncherRequest) (*MissleSystem, error)
	LoadLauncher(context.Context, *LoadRequest) (*LauncherList, error)
	Execute(*Action, ArtilleryService_ExecuteServer) error
	mustEmbedUnimplementedArtilleryServiceServer()
}

// UnimplementedArtilleryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtilleryServiceServer struct {
}

func (UnimplementedArtilleryServiceServer) GetSystem(context.Context, *Empty) (*MissleSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedArtilleryServiceServer) Filter(context.Context, *Request) (*LauncherList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedArtilleryServiceServer) AddLauncher(context.Context, *LauncherRequest) (*MissleSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLauncher not implemented")
}
func (UnimplementedArtilleryServiceServer) LoadLauncher(context.Context, *LoadRequest) (*LauncherList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadLauncher not implemented")
}
func (UnimplementedArtilleryServiceServer) Execute(*Action, ArtilleryService_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedArtilleryServiceServer) mustEmbedUnimplementedArtilleryServiceServer() {}

// UnsafeArtilleryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtilleryServiceServer will
// result in compilation errors.
type UnsafeArtilleryServiceServer interface {
	mustEmbedUnimplementedArtilleryServiceServer()
}

func RegisterArtilleryServiceServer(s grpc.ServiceRegistrar, srv ArtilleryServiceServer) {
	s.RegisterService(&ArtilleryService_ServiceDesc, srv)
}

func _ArtilleryService_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtilleryServiceServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArtilleryService/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtilleryServiceServer).GetSystem(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtilleryService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtilleryServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArtilleryService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtilleryServiceServer).Filter(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtilleryService_AddLauncher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LauncherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtilleryServiceServer).AddLauncher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArtilleryService/AddLauncher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtilleryServiceServer).AddLauncher(ctx, req.(*LauncherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtilleryService_LoadLauncher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtilleryServiceServer).LoadLauncher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ArtilleryService/LoadLauncher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtilleryServiceServer).LoadLauncher(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtilleryService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Action)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArtilleryServiceServer).Execute(m, &artilleryServiceExecuteServer{stream})
}

type ArtilleryService_ExecuteServer interface {
	Send(*Projectile) error
	grpc.ServerStream
}

type artilleryServiceExecuteServer struct {
	grpc.ServerStream
}

func (x *artilleryServiceExecuteServer) Send(m *Projectile) error {
	return x.ServerStream.SendMsg(m)
}

// ArtilleryService_ServiceDesc is the grpc.ServiceDesc for ArtilleryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtilleryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ArtilleryService",
	HandlerType: (*ArtilleryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystem",
			Handler:    _ArtilleryService_GetSystem_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _ArtilleryService_Filter_Handler,
		},
		{
			MethodName: "AddLauncher",
			Handler:    _ArtilleryService_AddLauncher_Handler,
		},
		{
			MethodName: "LoadLauncher",
			Handler:    _ArtilleryService_LoadLauncher_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _ArtilleryService_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "artillery.proto",
}
